{"statements":[{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.History.[constructor].[return].decodeFragment","newFunction":"function(fragment) {\r\n            return decodeURI(fragment.replace(/%25/g, '%2525'));\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.History.[constructor]","oldFunction":"function() {\r\n        this.handlers = [];\r\n        _.bindAll(this, 'checkUrl');\r\n\r\n        // Ensure that `History` can be used outside of the browser.\r\n        if (typeof window !== 'undefined') {\r\n            this.location = window.location;\r\n            this.history = window.history;\r\n        }\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.History.[constructor].[return]","key":"decodeFragment","newType":"(fragment: string) => string","isAny":false,"isClass":false,"containerType":"class History1 {\n    constructor ();\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    static started: boolean;\n    _updateHash: (location: Location, fragment: string, replace: boolean) => void;\n    atRoot: () => boolean;\n    bind: typeof Backbone.bind;\n    checkUrl: (e: any) => boolean;\n    decodeFragment: (fragment: string) => string;\n    getFragment: (fragment: string) => string;\n    getHash: (window: any) => string;\n    getPath: () => string | number;\n    getSearch: () => string;\n    handlers: Array<any>;\n    history: History;\n    interval: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    loadUrl: (fragment: string) => boolean;\n    location: Location;\n    matchRoot: () => boolean;\n    navigate: (fragment: string, options: boolean | {replace: boolean, trigger: boolean}) => boolean;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    route: (route: RegExp, callback: (fragment: void) => void) => void;\n    start: (options: any) => boolean;\n    stop: () => void;\n    stopListening: typeof Backbone.stopListening;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n}\n","containerDescription":"class Backbone.History"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.History.[constructor].[return].getSearch","newFunction":"function() {\r\n            var match = this.location.href.replace(/#.*/, '').match(/\\?.+/);\r\n            return match ? match[0] : '';\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.History.[constructor]","oldFunction":"function() {\r\n        this.handlers = [];\r\n        _.bindAll(this, 'checkUrl');\r\n\r\n        // Ensure that `History` can be used outside of the browser.\r\n        if (typeof window !== 'undefined') {\r\n            this.location = window.location;\r\n            this.history = window.history;\r\n        }\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.History.[constructor].[return]","key":"getSearch","newType":"() => string","isAny":false,"isClass":false,"containerType":"class History1 {\n    constructor ();\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    static started: boolean;\n    _updateHash: (location: Location, fragment: string, replace: boolean) => void;\n    atRoot: () => boolean;\n    bind: typeof Backbone.bind;\n    checkUrl: (e: any) => boolean;\n    decodeFragment: (fragment: string) => string;\n    getFragment: (fragment: string) => string;\n    getHash: (window: any) => string;\n    getPath: () => string | number;\n    getSearch: () => string;\n    handlers: Array<any>;\n    history: History;\n    interval: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    loadUrl: (fragment: string) => boolean;\n    location: Location;\n    matchRoot: () => boolean;\n    navigate: (fragment: string, options: boolean | {replace: boolean, trigger: boolean}) => boolean;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    route: (route: RegExp, callback: (fragment: void) => void) => void;\n    start: (options: any) => boolean;\n    stop: () => void;\n    stopListening: typeof Backbone.stopListening;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n}\n","containerDescription":"class Backbone.History"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.History.[constructor].[return].getPath","newFunction":"function() {\r\n            var path = this.decodeFragment(\r\n                this.location.pathname + this.getSearch()\r\n            ).slice(this.root.length - 1);\r\n            return path.charAt(0) === '/' ? path.slice(1) : path;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.History.[constructor]","oldFunction":"function() {\r\n        this.handlers = [];\r\n        _.bindAll(this, 'checkUrl');\r\n\r\n        // Ensure that `History` can be used outside of the browser.\r\n        if (typeof window !== 'undefined') {\r\n            this.location = window.location;\r\n            this.history = window.history;\r\n        }\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.History.[constructor].[return]","key":"getPath","newType":"() => string | number","isAny":false,"isClass":false,"containerType":"class History1 {\n    constructor ();\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    static started: boolean;\n    _updateHash: (location: Location, fragment: string, replace: boolean) => void;\n    atRoot: () => boolean;\n    bind: typeof Backbone.bind;\n    checkUrl: (e: any) => boolean;\n    decodeFragment: (fragment: string) => string;\n    getFragment: (fragment: string) => string;\n    getHash: (window: any) => string;\n    getPath: () => string | number;\n    getSearch: () => string;\n    handlers: Array<any>;\n    history: History;\n    interval: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    loadUrl: (fragment: string) => boolean;\n    location: Location;\n    matchRoot: () => boolean;\n    navigate: (fragment: string, options: boolean | {replace: boolean, trigger: boolean}) => boolean;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    route: (route: RegExp, callback: (fragment: void) => void) => void;\n    start: (options: any) => boolean;\n    stop: () => void;\n    stopListening: typeof Backbone.stopListening;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n}\n","containerDescription":"class Backbone.History"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.History.[constructor].[return].matchRoot","newFunction":"function() {\r\n            var path = this.decodeFragment(this.location.pathname);\r\n            var rootPath = path.slice(0, this.root.length - 1) + '/';\r\n            return rootPath === this.root;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.History.[constructor]","oldFunction":"function() {\r\n        this.handlers = [];\r\n        _.bindAll(this, 'checkUrl');\r\n\r\n        // Ensure that `History` can be used outside of the browser.\r\n        if (typeof window !== 'undefined') {\r\n            this.location = window.location;\r\n            this.history = window.history;\r\n        }\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.History.[constructor].[return]","key":"matchRoot","newType":"() => boolean","isAny":false,"isClass":false,"containerType":"class History1 {\n    constructor ();\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    static started: boolean;\n    _updateHash: (location: Location, fragment: string, replace: boolean) => void;\n    atRoot: () => boolean;\n    bind: typeof Backbone.bind;\n    checkUrl: (e: any) => boolean;\n    decodeFragment: (fragment: string) => string;\n    getFragment: (fragment: string) => string;\n    getHash: (window: any) => string;\n    getPath: () => string | number;\n    getSearch: () => string;\n    handlers: Array<any>;\n    history: History;\n    interval: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    loadUrl: (fragment: string) => boolean;\n    location: Location;\n    matchRoot: () => boolean;\n    navigate: (fragment: string, options: boolean | {replace: boolean, trigger: boolean}) => boolean;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    route: (route: RegExp, callback: (fragment: void) => void) => void;\n    start: (options: any) => boolean;\n    stop: () => void;\n    stopListening: typeof Backbone.stopListening;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n}\n","containerDescription":"class Backbone.History"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.History.[constructor].[return].atRoot","newFunction":"function() {\r\n            var path = this.location.pathname.replace(/[^\\/]$/, '$&/');\r\n            return path === this.root && !this.getSearch();\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.History.[constructor]","oldFunction":"function() {\r\n        this.handlers = [];\r\n        _.bindAll(this, 'checkUrl');\r\n\r\n        // Ensure that `History` can be used outside of the browser.\r\n        if (typeof window !== 'undefined') {\r\n            this.location = window.location;\r\n            this.history = window.history;\r\n        }\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.History.[constructor].[return]","key":"atRoot","newType":"() => boolean","isAny":false,"isClass":false,"containerType":"class History1 {\n    constructor ();\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    static started: boolean;\n    _updateHash: (location: Location, fragment: string, replace: boolean) => void;\n    atRoot: () => boolean;\n    bind: typeof Backbone.bind;\n    checkUrl: (e: any) => boolean;\n    decodeFragment: (fragment: string) => string;\n    getFragment: (fragment: string) => string;\n    getHash: (window: any) => string;\n    getPath: () => string | number;\n    getSearch: () => string;\n    handlers: Array<any>;\n    history: History;\n    interval: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    loadUrl: (fragment: string) => boolean;\n    location: Location;\n    matchRoot: () => boolean;\n    navigate: (fragment: string, options: boolean | {replace: boolean, trigger: boolean}) => boolean;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    route: (route: RegExp, callback: (fragment: void) => void) => void;\n    start: (options: any) => boolean;\n    stop: () => void;\n    stopListening: typeof Backbone.stopListening;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n}\n","containerDescription":"class Backbone.History"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Router.[constructor].[return].execute","newFunction":"function(callback, args, name) {\r\n            if (callback) callback.apply(this, args);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Router.[constructor]","oldFunction":"function(options) {\r\n        options || (options = {});\r\n        if (options.routes) this.routes = options.routes;\r\n        this._bindRoutes();\r\n        this.initialize.apply(this, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Router.[constructor].[return]","key":"execute","newType":"(callback: string | {apply: (arg0: void, arg1: void) => void}, args: string | Element | Object | Text | JQueryPromiseCallback<any> | JQuery | any[], name: string) => boolean","isAny":false,"isClass":false,"containerType":"class Router {\n    constructor (options: {routes: any});\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _bindRoutes: () => void;\n    _extractParameters: (route: RegExp, fragment: any) => string | Element | Object | Text | JQueryPromiseCallback<any> | JQuery | any[];\n    _routeToRegExp: (route: RegExp | string | number) => string | number | RegExp;\n    bind: typeof Backbone.bind;\n    execute: (callback: string | {apply: (arg0: void, arg1: void) => void}, args: string | Element | Object | Text | JQueryPromiseCallback<any> | JQuery | any[], name: string) => boolean;\n    initialize: () => void;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    navigate: (fragment: string, options: boolean | {replace: any, trigger: any}) => Backbone.Router;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    route: (route: string | number | RegExp, name: {apply: (arg0: void, arg1: void) => void} | string, callback: string | {apply: (arg0: void, arg1: void) => void}) => Backbone.Router;\n    stopListening: typeof Backbone.stopListening;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n}\n","containerDescription":"class Backbone.Router"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Model.[constructor]","newFunction":"function(attributes, options) {\r\n        var attrs = attributes || {};\r\n        options || (options = {});\r\n        this.cid = _.uniqueId(this.cidPrefix);\r\n        this.attributes = {};\r\n        if (options.collection) this.collection = options.collection;\r\n        if (options.parse) attrs = this.parse(attrs, options) || {};\r\n        var defaults = _.result(this, 'defaults');\r\n        attrs = _.defaults(_.extend({}, defaults, attrs), defaults);\r\n        this.set(attrs, options);\r\n        this.changed = {};\r\n        this.initialize.apply(this, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Model.[constructor]","oldFunction":"function(attributes, options) {\r\n        var defaults;\r\n        var attrs = attributes || {};\r\n        options || (options = {});\r\n        this.cid = _.uniqueId('c');\r\n        this.attributes = {};\r\n        _.extend(this, _.pick(options, modelOptions));\r\n        if (options.parse) attrs = this.parse(attrs, options) || {};\r\n        if (defaults = _.result(this, 'defaults')) {\r\n            attrs = _.defaults({}, attrs, defaults);\r\n        }\r\n        this.set(attrs, options);\r\n        this.changed = {};\r\n        this.initialize.apply(this, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Model.[constructor].[return]","key":"cidPrefix","newType":"string","isAny":false,"isClass":false,"containerType":"class Model {\n    constructor (attributes: Backbone.Model | interface_272 | boolean, options: any);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _changing: boolean;\n    _pending: boolean;\n    _previousAttributes: any;\n    _validate: (attrs: any, options: any) => boolean;\n    attributes: any;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    changed: void;\n    changedAttributes: (diff: any) => boolean;\n    cid: string;\n    cidPrefix: string;\n    clear: (options: any) => Backbone.Model | boolean;\n    clone: () => Backbone.Model;\n    destroy: (options: interface_276) => boolean | JQueryXHR;\n    escape: (attr: string | number) => string;\n    fetch: (options: any) => JQueryXHR;\n    get: (attr: string) => string;\n    has: (attr: string) => boolean;\n    hasChanged: (attr: string) => boolean;\n    idAttribute: string;\n    initialize: () => void;\n    invert: () => any;\n    isEmpty: () => any;\n    isNew: () => boolean;\n    isValid: (options: any) => boolean;\n    keys: () => any;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    matches: (attrs: Array<any> | Function | Element | Text | Object | JQueryPromiseCallback<any> | JQuery | string) => boolean;\n    off: typeof Backbone.off;\n    omit: () => any;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    pairs: () => any;\n    parse: (resp: any, options: any) => any;\n    pick: () => any;\n    previous: (attr: string | number) => any;\n    previousAttributes: () => any;\n    save: (key: string | number | interface_261, val: boolean | interface_278, options: any) => boolean | JQueryXHR;\n    set: (key: any, val: any, options: any) => Backbone.Model | boolean;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => boolean | JQueryXHR;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unset: (attr: string | number | interface_257, options: any) => Backbone.Model | boolean;\n    url: () => any;\n    validationError: void;\n    values: () => any;\n}\n","containerDescription":"class Backbone.Model"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Model.[constructor].[return].chain","newFunction":"function() {\r\n                return _[method](this[attribute]);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Model.[constructor]","oldFunction":"function(attributes, options) {\r\n        var defaults;\r\n        var attrs = attributes || {};\r\n        options || (options = {});\r\n        this.cid = _.uniqueId('c');\r\n        this.attributes = {};\r\n        _.extend(this, _.pick(options, modelOptions));\r\n        if (options.parse) attrs = this.parse(attrs, options) || {};\r\n        if (defaults = _.result(this, 'defaults')) {\r\n            attrs = _.defaults({}, attrs, defaults);\r\n        }\r\n        this.set(attrs, options);\r\n        this.changed = {};\r\n        this.initialize.apply(this, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Model.[constructor].[return]","key":"chain","newType":"() => any","isAny":false,"isClass":false,"containerType":"class Model {\n    constructor (attributes: Backbone.Model | interface_272 | boolean, options: any);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _changing: boolean;\n    _pending: boolean;\n    _previousAttributes: any;\n    _validate: (attrs: any, options: any) => boolean;\n    attributes: any;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    changed: void;\n    changedAttributes: (diff: any) => boolean;\n    cid: string;\n    cidPrefix: string;\n    clear: (options: any) => Backbone.Model | boolean;\n    clone: () => Backbone.Model;\n    destroy: (options: interface_276) => boolean | JQueryXHR;\n    escape: (attr: string | number) => string;\n    fetch: (options: any) => JQueryXHR;\n    get: (attr: string) => string;\n    has: (attr: string) => boolean;\n    hasChanged: (attr: string) => boolean;\n    idAttribute: string;\n    initialize: () => void;\n    invert: () => any;\n    isEmpty: () => any;\n    isNew: () => boolean;\n    isValid: (options: any) => boolean;\n    keys: () => any;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    matches: (attrs: Array<any> | Function | Element | Text | Object | JQueryPromiseCallback<any> | JQuery | string) => boolean;\n    off: typeof Backbone.off;\n    omit: () => any;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    pairs: () => any;\n    parse: (resp: any, options: any) => any;\n    pick: () => any;\n    previous: (attr: string | number) => any;\n    previousAttributes: () => any;\n    save: (key: string | number | interface_261, val: boolean | interface_278, options: any) => boolean | JQueryXHR;\n    set: (key: any, val: any, options: any) => Backbone.Model | boolean;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => boolean | JQueryXHR;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unset: (attr: string | number | interface_257, options: any) => Backbone.Model | boolean;\n    url: () => any;\n    validationError: void;\n    values: () => any;\n}\n","containerDescription":"class Backbone.Model"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Model.[constructor].[return].isEmpty","newFunction":"function() {\r\n                return _[method](this[attribute]);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Model.[constructor]","oldFunction":"function(attributes, options) {\r\n        var defaults;\r\n        var attrs = attributes || {};\r\n        options || (options = {});\r\n        this.cid = _.uniqueId('c');\r\n        this.attributes = {};\r\n        _.extend(this, _.pick(options, modelOptions));\r\n        if (options.parse) attrs = this.parse(attrs, options) || {};\r\n        if (defaults = _.result(this, 'defaults')) {\r\n            attrs = _.defaults({}, attrs, defaults);\r\n        }\r\n        this.set(attrs, options);\r\n        this.changed = {};\r\n        this.initialize.apply(this, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Model.[constructor].[return]","key":"isEmpty","newType":"() => any","isAny":false,"isClass":false,"containerType":"class Model {\n    constructor (attributes: Backbone.Model | interface_272 | boolean, options: any);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _changing: boolean;\n    _pending: boolean;\n    _previousAttributes: any;\n    _validate: (attrs: any, options: any) => boolean;\n    attributes: any;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    changed: void;\n    changedAttributes: (diff: any) => boolean;\n    cid: string;\n    cidPrefix: string;\n    clear: (options: any) => Backbone.Model | boolean;\n    clone: () => Backbone.Model;\n    destroy: (options: interface_276) => boolean | JQueryXHR;\n    escape: (attr: string | number) => string;\n    fetch: (options: any) => JQueryXHR;\n    get: (attr: string) => string;\n    has: (attr: string) => boolean;\n    hasChanged: (attr: string) => boolean;\n    idAttribute: string;\n    initialize: () => void;\n    invert: () => any;\n    isEmpty: () => any;\n    isNew: () => boolean;\n    isValid: (options: any) => boolean;\n    keys: () => any;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    matches: (attrs: Array<any> | Function | Element | Text | Object | JQueryPromiseCallback<any> | JQuery | string) => boolean;\n    off: typeof Backbone.off;\n    omit: () => any;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    pairs: () => any;\n    parse: (resp: any, options: any) => any;\n    pick: () => any;\n    previous: (attr: string | number) => any;\n    previousAttributes: () => any;\n    save: (key: string | number | interface_261, val: boolean | interface_278, options: any) => boolean | JQueryXHR;\n    set: (key: any, val: any, options: any) => Backbone.Model | boolean;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => boolean | JQueryXHR;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unset: (attr: string | number | interface_257, options: any) => Backbone.Model | boolean;\n    url: () => any;\n    validationError: void;\n    values: () => any;\n}\n","containerDescription":"class Backbone.Model"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Model.[constructor].[return].matches","newFunction":"function(attrs) {\r\n            return !!_.iteratee(attrs, this)(this.attributes);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Model.[constructor]","oldFunction":"function(attributes, options) {\r\n        var defaults;\r\n        var attrs = attributes || {};\r\n        options || (options = {});\r\n        this.cid = _.uniqueId('c');\r\n        this.attributes = {};\r\n        _.extend(this, _.pick(options, modelOptions));\r\n        if (options.parse) attrs = this.parse(attrs, options) || {};\r\n        if (defaults = _.result(this, 'defaults')) {\r\n            attrs = _.defaults({}, attrs, defaults);\r\n        }\r\n        this.set(attrs, options);\r\n        this.changed = {};\r\n        this.initialize.apply(this, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Model.[constructor].[return]","key":"matches","newType":"(attrs: Array<any> | Function | Element | Text | Object | JQueryPromiseCallback<any> | JQuery | string) => boolean","isAny":false,"isClass":false,"containerType":"class Model {\n    constructor (attributes: Backbone.Model | interface_272 | boolean, options: any);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _changing: boolean;\n    _pending: boolean;\n    _previousAttributes: any;\n    _validate: (attrs: any, options: any) => boolean;\n    attributes: any;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    changed: void;\n    changedAttributes: (diff: any) => boolean;\n    cid: string;\n    cidPrefix: string;\n    clear: (options: any) => Backbone.Model | boolean;\n    clone: () => Backbone.Model;\n    destroy: (options: interface_276) => boolean | JQueryXHR;\n    escape: (attr: string | number) => string;\n    fetch: (options: any) => JQueryXHR;\n    get: (attr: string) => string;\n    has: (attr: string) => boolean;\n    hasChanged: (attr: string) => boolean;\n    idAttribute: string;\n    initialize: () => void;\n    invert: () => any;\n    isEmpty: () => any;\n    isNew: () => boolean;\n    isValid: (options: any) => boolean;\n    keys: () => any;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    matches: (attrs: Array<any> | Function | Element | Text | Object | JQueryPromiseCallback<any> | JQuery | string) => boolean;\n    off: typeof Backbone.off;\n    omit: () => any;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    pairs: () => any;\n    parse: (resp: any, options: any) => any;\n    pick: () => any;\n    previous: (attr: string | number) => any;\n    previousAttributes: () => any;\n    save: (key: string | number | interface_261, val: boolean | interface_278, options: any) => boolean | JQueryXHR;\n    set: (key: any, val: any, options: any) => Backbone.Model | boolean;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => boolean | JQueryXHR;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unset: (attr: string | number | interface_257, options: any) => Backbone.Model | boolean;\n    url: () => any;\n    validationError: void;\n    values: () => any;\n}\n","containerDescription":"class Backbone.Model"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor]","newFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].sortedIndex","oldFunction":"function(model, value, context) {\r\n            value || (value = this.comparator);\r\n            var iterator = _.isFunction(value) ? value : function(model) {\r\n                return model.get(value);\r\n            };\r\n            return _.sortedIndex(this.models, model, iterator, context);\r\n        }","oldJSDoc":null,"type":"removedProperty","typePath":"window.Backbone.Collection.[constructor].[return]","key":"sortedIndex","isClass":false,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].modelId","newFunction":"function(attrs) {\r\n            return attrs[this.model.prototype.idAttribute || 'id'];\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor]","oldFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.url) this.url = options.url;\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Collection.[constructor].[return]","key":"modelId","newType":"(attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268","isAny":false,"isClass":false,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].has","newFunction":"function(obj) {\r\n            return this.get(obj) != null;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor]","oldFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.url) this.url = options.url;\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Collection.[constructor].[return]","key":"has","newType":"(obj: string | number | interface_268) => boolean","isAny":false,"isClass":false,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].indexBy","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor]","oldFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.url) this.url = options.url;\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Collection.[constructor].[return]","key":"indexBy","newType":"(iteratee: any, context: any) => any","isAny":false,"isClass":false,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].includes","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor]","oldFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.url) this.url = options.url;\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Collection.[constructor].[return]","key":"includes","newType":"(iteratee: any, context: any) => any","isAny":false,"isClass":false,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].difference","newFunction":"function() {\r\n                var args = slice.call(arguments);\r\n                args.unshift(this[attribute]);\r\n                return _[method].apply(_, args);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor]","oldFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.url) this.url = options.url;\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Collection.[constructor].[return]","key":"difference","newType":"() => any","isAny":false,"isClass":false,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return]._addReference","newFunction":"function(model, options) {\r\n            this._byId[model.cid] = model;\r\n            var id = this.modelId(model.attributes);\r\n            if (id != null) this._byId[id] = model;\r\n            model.on('all', this._onModelEvent, this);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor]","oldFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.url) this.url = options.url;\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Collection.[constructor].[return]","key":"_addReference","newType":"(model: Backbone.Model | interface_272 | boolean, options: any) => void","isAny":false,"isClass":false,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return]._isModel","newFunction":"function(model) {\r\n            return model instanceof Model;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor]","oldFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.url) this.url = options.url;\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Collection.[constructor].[return]","key":"_isModel","newType":"(model: any) => boolean","isAny":false,"isClass":false,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].partition","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor]","oldFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.url) this.url = options.url;\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Collection.[constructor].[return]","key":"partition","newType":"(iteratee: any, context: any) => any","isAny":false,"isClass":false,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return]._removeModels","newFunction":"function(models, options) {\r\n            var removed = [];\r\n            for (var i = 0; i < models.length; i++) {\r\n                var model = this.get(models[i]);\r\n                if (!model) continue;\r\n\r\n                var index = this.indexOf(model);\r\n                this.models.splice(index, 1);\r\n                this.length--;\r\n\r\n                // Remove references before triggering 'remove' event to prevent an\r\n                // infinite loop. #3693\r\n                delete this._byId[model.cid];\r\n                var id = this.modelId(model.attributes);\r\n                if (id != null) delete this._byId[id];\r\n\r\n                if (!options.silent) {\r\n                    options.index = index;\r\n                    model.trigger('remove', model, this, options);\r\n                }\r\n\r\n                removed.push(model);\r\n                this._removeReference(model, options);\r\n            }\r\n            return removed;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor]","oldFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.url) this.url = options.url;\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Collection.[constructor].[return]","key":"_removeModels","newType":"(models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[]","isAny":false,"isClass":false,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].findLastIndex","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor]","oldFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.url) this.url = options.url;\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Collection.[constructor].[return]","key":"findLastIndex","newType":"(iteratee: any, context: any) => any","isAny":false,"isClass":false,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].sample","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor]","oldFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.url) this.url = options.url;\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Collection.[constructor].[return]","key":"sample","newType":"(iteratee: any, context: any) => any","isAny":false,"isClass":false,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].findIndex","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor]","oldFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.url) this.url = options.url;\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Collection.[constructor].[return]","key":"findIndex","newType":"(iteratee: any, context: any) => any","isAny":false,"isClass":false,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.View.[constructor]","newFunction":"function(options) {\r\n        this.cid = _.uniqueId('view');\r\n        _.extend(this, _.pick(options, viewOptions));\r\n        this._ensureElement();\r\n        this.initialize.apply(this, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.View.[constructor].[return]._configure","oldFunction":"function(options) {\r\n            if (this.options) options = _.extend({}, _.result(this, 'options'), options);\r\n            _.extend(this, _.pick(options, viewOptions));\r\n            this.options = options;\r\n        }","oldJSDoc":null,"type":"removedProperty","typePath":"window.Backbone.View.[constructor].[return]","key":"_configure","isClass":false,"containerType":"class View {\n    constructor (options: any);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    $: (selector: any) => any;\n    $el: interface_279;\n    _createElement: (tagName: any) => any;\n    _ensureElement: () => void;\n    _removeElement: () => void;\n    _setAttributes: (attributes: any) => void;\n    _setElement: (el: any) => void;\n    bind: typeof Backbone.bind;\n    cid: string;\n    delegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n    delegateEvents: (events: any) => Backbone.View;\n    el: HTMLDivElement;\n    initialize: () => void;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    remove: () => Backbone.View;\n    render: () => Backbone.View;\n    setElement: (element: any) => Backbone.View;\n    stopListening: typeof Backbone.stopListening;\n    tagName: string;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    undelegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n    undelegateEvents: () => Backbone.View;\n}\n","containerDescription":"class Backbone.View"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.View.[constructor]","newFunction":"function(options) {\r\n        this.cid = _.uniqueId('view');\r\n        _.extend(this, _.pick(options, viewOptions));\r\n        this._ensureElement();\r\n        this.initialize.apply(this, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.View.[constructor]","oldFunction":"function(options) {\r\n        this.cid = _.uniqueId('view');\r\n        this._configure(options || {});\r\n        this._ensureElement();\r\n        this.initialize.apply(this, arguments);\r\n        this.delegateEvents();\r\n    }","oldJSDoc":null,"type":"removedProperty","typePath":"window.Backbone.View.[constructor].[return]","key":"options","isClass":false,"containerType":"class View {\n    constructor (options: any);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    $: (selector: any) => any;\n    $el: interface_279;\n    _createElement: (tagName: any) => any;\n    _ensureElement: () => void;\n    _removeElement: () => void;\n    _setAttributes: (attributes: any) => void;\n    _setElement: (el: any) => void;\n    bind: typeof Backbone.bind;\n    cid: string;\n    delegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n    delegateEvents: (events: any) => Backbone.View;\n    el: HTMLDivElement;\n    initialize: () => void;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    remove: () => Backbone.View;\n    render: () => Backbone.View;\n    setElement: (element: any) => Backbone.View;\n    stopListening: typeof Backbone.stopListening;\n    tagName: string;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    undelegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n    undelegateEvents: () => Backbone.View;\n}\n","containerDescription":"class Backbone.View"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.View.[constructor].[return].delegate","newFunction":"function(eventName, selector, listener) {\r\n            this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);\r\n            return this;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.View.[constructor]","oldFunction":"function(options) {\r\n        this.cid = _.uniqueId('view');\r\n        this._configure(options || {});\r\n        this._ensureElement();\r\n        this.initialize.apply(this, arguments);\r\n        this.delegateEvents();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.View.[constructor].[return]","key":"delegate","newType":"(eventName: string | number, selector: any, listener: any) => Backbone.View","isAny":false,"isClass":false,"containerType":"class View {\n    constructor (options: any);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    $: (selector: any) => any;\n    $el: interface_279;\n    _createElement: (tagName: any) => any;\n    _ensureElement: () => void;\n    _removeElement: () => void;\n    _setAttributes: (attributes: any) => void;\n    _setElement: (el: any) => void;\n    bind: typeof Backbone.bind;\n    cid: string;\n    delegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n    delegateEvents: (events: any) => Backbone.View;\n    el: HTMLDivElement;\n    initialize: () => void;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    remove: () => Backbone.View;\n    render: () => Backbone.View;\n    setElement: (element: any) => Backbone.View;\n    stopListening: typeof Backbone.stopListening;\n    tagName: string;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    undelegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n    undelegateEvents: () => Backbone.View;\n}\n","containerDescription":"class Backbone.View"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.View.[constructor].[return].undelegate","newFunction":"function(eventName, selector, listener) {\r\n            this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);\r\n            return this;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.View.[constructor]","oldFunction":"function(options) {\r\n        this.cid = _.uniqueId('view');\r\n        this._configure(options || {});\r\n        this._ensureElement();\r\n        this.initialize.apply(this, arguments);\r\n        this.delegateEvents();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.View.[constructor].[return]","key":"undelegate","newType":"(eventName: string | number, selector: any, listener: any) => Backbone.View","isAny":false,"isClass":false,"containerType":"class View {\n    constructor (options: any);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    $: (selector: any) => any;\n    $el: interface_279;\n    _createElement: (tagName: any) => any;\n    _ensureElement: () => void;\n    _removeElement: () => void;\n    _setAttributes: (attributes: any) => void;\n    _setElement: (el: any) => void;\n    bind: typeof Backbone.bind;\n    cid: string;\n    delegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n    delegateEvents: (events: any) => Backbone.View;\n    el: HTMLDivElement;\n    initialize: () => void;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    remove: () => Backbone.View;\n    render: () => Backbone.View;\n    setElement: (element: any) => Backbone.View;\n    stopListening: typeof Backbone.stopListening;\n    tagName: string;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    undelegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n    undelegateEvents: () => Backbone.View;\n}\n","containerDescription":"class Backbone.View"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.View.[constructor].[return]._setElement","newFunction":"function(el) {\r\n            this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);\r\n            this.el = this.$el[0];\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.View.[constructor]","oldFunction":"function(options) {\r\n        this.cid = _.uniqueId('view');\r\n        this._configure(options || {});\r\n        this._ensureElement();\r\n        this.initialize.apply(this, arguments);\r\n        this.delegateEvents();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.View.[constructor].[return]","key":"_setElement","newType":"(el: any) => void","isAny":false,"isClass":false,"containerType":"class View {\n    constructor (options: any);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    $: (selector: any) => any;\n    $el: interface_279;\n    _createElement: (tagName: any) => any;\n    _ensureElement: () => void;\n    _removeElement: () => void;\n    _setAttributes: (attributes: any) => void;\n    _setElement: (el: any) => void;\n    bind: typeof Backbone.bind;\n    cid: string;\n    delegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n    delegateEvents: (events: any) => Backbone.View;\n    el: HTMLDivElement;\n    initialize: () => void;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    remove: () => Backbone.View;\n    render: () => Backbone.View;\n    setElement: (element: any) => Backbone.View;\n    stopListening: typeof Backbone.stopListening;\n    tagName: string;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    undelegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n    undelegateEvents: () => Backbone.View;\n}\n","containerDescription":"class Backbone.View"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.View.[constructor].[return]._removeElement","newFunction":"function() {\r\n            this.$el.remove();\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.View.[constructor]","oldFunction":"function(options) {\r\n        this.cid = _.uniqueId('view');\r\n        this._configure(options || {});\r\n        this._ensureElement();\r\n        this.initialize.apply(this, arguments);\r\n        this.delegateEvents();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.View.[constructor].[return]","key":"_removeElement","newType":"() => void","isAny":false,"isClass":false,"containerType":"class View {\n    constructor (options: any);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    $: (selector: any) => any;\n    $el: interface_279;\n    _createElement: (tagName: any) => any;\n    _ensureElement: () => void;\n    _removeElement: () => void;\n    _setAttributes: (attributes: any) => void;\n    _setElement: (el: any) => void;\n    bind: typeof Backbone.bind;\n    cid: string;\n    delegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n    delegateEvents: (events: any) => Backbone.View;\n    el: HTMLDivElement;\n    initialize: () => void;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    remove: () => Backbone.View;\n    render: () => Backbone.View;\n    setElement: (element: any) => Backbone.View;\n    stopListening: typeof Backbone.stopListening;\n    tagName: string;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    undelegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n    undelegateEvents: () => Backbone.View;\n}\n","containerDescription":"class Backbone.View"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.View.[constructor].[return]._createElement","newFunction":"function(tagName) {\r\n            return document.createElement(tagName);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.View.[constructor]","oldFunction":"function(options) {\r\n        this.cid = _.uniqueId('view');\r\n        this._configure(options || {});\r\n        this._ensureElement();\r\n        this.initialize.apply(this, arguments);\r\n        this.delegateEvents();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.View.[constructor].[return]","key":"_createElement","newType":"(tagName: any) => any","isAny":false,"isClass":false,"containerType":"class View {\n    constructor (options: any);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    $: (selector: any) => any;\n    $el: interface_279;\n    _createElement: (tagName: any) => any;\n    _ensureElement: () => void;\n    _removeElement: () => void;\n    _setAttributes: (attributes: any) => void;\n    _setElement: (el: any) => void;\n    bind: typeof Backbone.bind;\n    cid: string;\n    delegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n    delegateEvents: (events: any) => Backbone.View;\n    el: HTMLDivElement;\n    initialize: () => void;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    remove: () => Backbone.View;\n    render: () => Backbone.View;\n    setElement: (element: any) => Backbone.View;\n    stopListening: typeof Backbone.stopListening;\n    tagName: string;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    undelegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n    undelegateEvents: () => Backbone.View;\n}\n","containerDescription":"class Backbone.View"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.View.[constructor].[return]._setAttributes","newFunction":"function(attributes) {\r\n            this.$el.attr(attributes);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.View.[constructor]","oldFunction":"function(options) {\r\n        this.cid = _.uniqueId('view');\r\n        this._configure(options || {});\r\n        this._ensureElement();\r\n        this.initialize.apply(this, arguments);\r\n        this.delegateEvents();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.View.[constructor].[return]","key":"_setAttributes","newType":"(attributes: any) => void","isAny":false,"isClass":false,"containerType":"class View {\n    constructor (options: any);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    $: (selector: any) => any;\n    $el: interface_279;\n    _createElement: (tagName: any) => any;\n    _ensureElement: () => void;\n    _removeElement: () => void;\n    _setAttributes: (attributes: any) => void;\n    _setElement: (el: any) => void;\n    bind: typeof Backbone.bind;\n    cid: string;\n    delegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n    delegateEvents: (events: any) => Backbone.View;\n    el: HTMLDivElement;\n    initialize: () => void;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    remove: () => Backbone.View;\n    render: () => Backbone.View;\n    setElement: (element: any) => Backbone.View;\n    stopListening: typeof Backbone.stopListening;\n    tagName: string;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    undelegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n    undelegateEvents: () => Backbone.View;\n}\n","containerDescription":"class Backbone.View"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].first","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].first","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].first","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.History.[constructor].[return].getFragment","newFunction":"function(fragment) {\r\n            if (fragment == null) {\r\n                if (this._usePushState || !this._wantsHashChange) {\r\n                    fragment = this.getPath();\r\n                } else {\r\n                    fragment = this.getHash();\r\n                }\r\n            }\r\n            return fragment.replace(routeStripper, '');\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.History.[constructor].[return].getFragment","oldFunction":"function(fragment, forcePushState) {\r\n            if (fragment == null) {\r\n                if (this._hasPushState || !this._wantsHashChange || forcePushState) {\r\n                    fragment = this.location.pathname;\r\n                    var root = this.root.replace(trailingSlash, '');\r\n                    if (!fragment.indexOf(root)) fragment = fragment.substr(root.length);\r\n                } else {\r\n                    fragment = this.getHash();\r\n                }\r\n            }\r\n            return fragment.replace(routeStripper, '');\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.History.[constructor].[return].getFragment","isClass":true,"newType":"(fragment: string) => string","newTypeDescription":"function","oldType":"(fragment: string, forcePushState: boolean) => string","oldArgCount":2,"newArgCount":1,"containerType":"class History1 {\n    constructor ();\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    static started: boolean;\n    _updateHash: (location: Location, fragment: string, replace: boolean) => void;\n    atRoot: () => boolean;\n    bind: typeof Backbone.bind;\n    checkUrl: (e: any) => boolean;\n    decodeFragment: (fragment: string) => string;\n    getFragment: (fragment: string) => string;\n    getHash: (window: any) => string;\n    getPath: () => string | number;\n    getSearch: () => string;\n    handlers: Array<any>;\n    history: History;\n    interval: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    loadUrl: (fragment: string) => boolean;\n    location: Location;\n    matchRoot: () => boolean;\n    navigate: (fragment: string, options: boolean | {replace: boolean, trigger: boolean}) => boolean;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    route: (route: RegExp, callback: (fragment: void) => void) => void;\n    start: (options: any) => boolean;\n    stop: () => void;\n    stopListening: typeof Backbone.stopListening;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n}\n","containerDescription":"class Backbone.History"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].min","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].min","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].min","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].reject","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].reject","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].reject","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].map","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].map","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].map","isClass":true,"newType":"(iteratee: string | number | ((model: void) => any), context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].every","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].every","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].every","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].include","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].include","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].include","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].rest","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].rest","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].rest","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].max","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].max","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].max","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].initial","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].initial","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].initial","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].forEach","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].forEach","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].forEach","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].tail","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].tail","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].tail","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].any","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].any","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].any","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].filter","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].filter","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].filter","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].lastIndexOf","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].lastIndexOf","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].lastIndexOf","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].select","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].select","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].select","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].slice","newFunction":"function() {\r\n            return slice.apply(this.models, arguments);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].slice","oldFunction":"function(begin, end) {\r\n            return this.models.slice(begin, end);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].slice","isClass":true,"newType":"() => any","newTypeDescription":"function","oldType":"(begin: number, end: number) => string | Element | Text | Object | JQueryPromiseCallback<any> | JQuery | any[]","oldArgCount":2,"newArgCount":0,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].find","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].find","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].find","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].indexOf","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].indexOf","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].indexOf","isClass":true,"newType":"(iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number","newTypeDescription":"function","oldType":"() => number","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].all","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].all","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].all","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].last","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].last","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].last","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].each","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].each","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].each","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return]._removeReference","newFunction":"function(model, options) {\r\n            delete this._byId[model.cid];\r\n            var id = this.modelId(model.attributes);\r\n            if (id != null) delete this._byId[id];\r\n            if (this === model.collection) delete model.collection;\r\n            model.off('all', this._onModelEvent, this);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return]._removeReference","oldFunction":"function(model) {\r\n            if (this === model.collection) delete model.collection;\r\n            model.off('all', this._onModelEvent, this);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return]._removeReference","isClass":true,"newType":"(model: interface_273, options: any) => void","newTypeDescription":"function","oldType":"(model: interface_505) => void","oldArgCount":1,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].take","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].take","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].take","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].contains","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].contains","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].contains","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].collect","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].collect","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].collect","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].drop","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].drop","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].drop","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].some","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].some","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].some","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].detect","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].detect","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].detect","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].head","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].head","oldFunction":"function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.Collection.[constructor].[return].head","isClass":true,"newType":"(iteratee: any, context: any) => any","newTypeDescription":"function","oldType":"() => any","oldArgCount":0,"newArgCount":2,"containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.View.[constructor].[return].setElement","newFunction":"function(element) {\r\n            this.undelegateEvents();\r\n            this._setElement(element);\r\n            this.delegateEvents();\r\n            return this;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.View.[constructor].[return].setElement","oldFunction":"function(element, delegate) {\r\n            if (this.$el) this.undelegateEvents();\r\n            this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);\r\n            this.el = this.$el[0];\r\n            if (delegate !== false) this.delegateEvents();\r\n            return this;\r\n        }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.Backbone.View.[constructor].[return].setElement","isClass":true,"newType":"(element: any) => Backbone.View","newTypeDescription":"function","oldType":"(element: any, delegate: boolean) => Backbone.View","oldArgCount":2,"newArgCount":1,"containerType":"class View {\n    constructor (options: any);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    $: (selector: any) => any;\n    $el: interface_279;\n    _createElement: (tagName: any) => any;\n    _ensureElement: () => void;\n    _removeElement: () => void;\n    _setAttributes: (attributes: any) => void;\n    _setElement: (el: any) => void;\n    bind: typeof Backbone.bind;\n    cid: string;\n    delegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n    delegateEvents: (events: any) => Backbone.View;\n    el: HTMLDivElement;\n    initialize: () => void;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    remove: () => Backbone.View;\n    render: () => Backbone.View;\n    setElement: (element: any) => Backbone.View;\n    stopListening: typeof Backbone.stopListening;\n    tagName: string;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    undelegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n    undelegateEvents: () => Backbone.View;\n}\n","containerDescription":"class Backbone.View"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.View.[constructor]","newFunction":"function(options) {\r\n        this.cid = _.uniqueId('view');\r\n        _.extend(this, _.pick(options, viewOptions));\r\n        this._ensureElement();\r\n        this.initialize.apply(this, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.View.[constructor]","oldFunction":"function(options) {\r\n        this.cid = _.uniqueId('view');\r\n        this._configure(options || {});\r\n        this._ensureElement();\r\n        this.initialize.apply(this, arguments);\r\n        this.delegateEvents();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.View.[constructor].[return].$el","key":"context","newType":"HTMLDivElement","isAny":false,"isClass":false,"containerType":"interface interface_279 {\n    \"0\": HTMLDivElement;\n    context: HTMLDivElement;\n    length: number;\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.on.[function]","newFunction":"function(name, callback, context) {\r\n        return internalOn(this, name, callback, context);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.on.[function]","oldFunction":"function(name, callback, context) {\r\n            if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;\r\n            this._events || (this._events = {});\r\n            var events = this._events[name] || (this._events[name] = []);\r\n            events.push({callback: callback, context: context, ctx: context || this});\r\n            return this;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.on.[function].[arg2]","newType":"Backbone.Collection","oldType":"any","containerType":"(name: string | interface_180, callback: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void, context: Backbone.Collection) => Backbone.Model | interface_280","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.sync.[function]","newFunction":"function(method, model, options) {\r\n        var type = methodMap[method];\r\n\r\n        // Default options, unless specified.\r\n        _.defaults(options || (options = {}), {\r\n            emulateHTTP: Backbone.emulateHTTP,\r\n            emulateJSON: Backbone.emulateJSON\r\n        });\r\n\r\n        // Default JSON-request options.\r\n        var params = {type: type, dataType: 'json'};\r\n\r\n        // Ensure that we have a URL.\r\n        if (!options.url) {\r\n            params.url = _.result(model, 'url') || urlError();\r\n        }\r\n\r\n        // Ensure that we have the appropriate request data.\r\n        if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\r\n            params.contentType = 'application/json';\r\n            params.data = JSON.stringify(options.attrs || model.toJSON(options));\r\n        }\r\n\r\n        // For older servers, emulate JSON by encoding the request into an HTML-form.\r\n        if (options.emulateJSON) {\r\n            params.contentType = 'application/x-www-form-urlencoded';\r\n            params.data = params.data ? {model: params.data} : {};\r\n        }\r\n\r\n        // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n        // And an `X-HTTP-Method-Override` header.\r\n        if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\r\n            params.type = 'POST';\r\n            if (options.emulateJSON) params.data._method = type;\r\n            var beforeSend = options.beforeSend;\r\n            options.beforeSend = function(xhr) {\r\n                xhr.setRequestHeader('X-HTTP-Method-Override', type);\r\n                if (beforeSend) return beforeSend.apply(this, arguments);\r\n            };\r\n        }\r\n\r\n        // Don't process data on a non-GET request.\r\n        if (params.type !== 'GET' && !options.emulateJSON) {\r\n            params.processData = false;\r\n        }\r\n\r\n        // Pass along `textStatus` and `errorThrown` from jQuery.\r\n        var error = options.error;\r\n        options.error = function(xhr, textStatus, errorThrown) {\r\n            options.textStatus = textStatus;\r\n            options.errorThrown = errorThrown;\r\n            if (error) error.call(options.context, xhr, textStatus, errorThrown);\r\n        };\r\n\r\n        // Make the request, allowing the user to override any Ajax options.\r\n        var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\r\n        model.trigger('request', model, xhr, options);\r\n        return xhr;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.sync.[function]","oldFunction":"function(method, model, options) {\r\n        var type = methodMap[method];\r\n\r\n        // Default options, unless specified.\r\n        _.defaults(options || (options = {}), {\r\n            emulateHTTP: Backbone.emulateHTTP,\r\n            emulateJSON: Backbone.emulateJSON\r\n        });\r\n\r\n        // Default JSON-request options.\r\n        var params = {type: type, dataType: 'json'};\r\n\r\n        // Ensure that we have a URL.\r\n        if (!options.url) {\r\n            params.url = _.result(model, 'url') || urlError();\r\n        }\r\n\r\n        // Ensure that we have the appropriate request data.\r\n        if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\r\n            params.contentType = 'application/json';\r\n            params.data = JSON.stringify(options.attrs || model.toJSON(options));\r\n        }\r\n\r\n        // For older servers, emulate JSON by encoding the request into an HTML-form.\r\n        if (options.emulateJSON) {\r\n            params.contentType = 'application/x-www-form-urlencoded';\r\n            params.data = params.data ? {model: params.data} : {};\r\n        }\r\n\r\n        // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n        // And an `X-HTTP-Method-Override` header.\r\n        if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\r\n            params.type = 'POST';\r\n            if (options.emulateJSON) params.data._method = type;\r\n            var beforeSend = options.beforeSend;\r\n            options.beforeSend = function(xhr) {\r\n                xhr.setRequestHeader('X-HTTP-Method-Override', type);\r\n                if (beforeSend) return beforeSend.apply(this, arguments);\r\n            };\r\n        }\r\n\r\n        // Don't process data on a non-GET request.\r\n        if (params.type !== 'GET' && !options.emulateJSON) {\r\n            params.processData = false;\r\n        }\r\n\r\n        // If we're sending a `PATCH` request, and we're in an old Internet Explorer\r\n        // that still has ActiveX enabled by default, override jQuery to use that\r\n        // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.\r\n        if (params.type === 'PATCH' && window.ActiveXObject &&\r\n            !(window.external && window.external.msActiveXFilteringEnabled)) {\r\n            params.xhr = function() {\r\n                return new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n            };\r\n        }\r\n\r\n        // Make the request, allowing the user to override any Ajax options.\r\n        var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\r\n        model.trigger('request', model, xhr, options);\r\n        return xhr;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.sync.[function].[arg2]","key":"textStatus","newType":null,"isAny":true,"isClass":false,"containerType":"// Seen as: options\ninterface interface_283 {\n    attrs: any;\n    beforeSend: (xhr: void) => any;\n    context: any;\n    data: any;\n    emulateHTTP: any;\n    emulateJSON: any;\n    error: (xhr: void, textStatus: void, errorThrown: void) => void;\n    errorThrown: any;\n    textStatus: any;\n    url: any;\n    xhr: boolean | JQueryXHR;\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.sync.[function]","newFunction":"function(method, model, options) {\r\n        var type = methodMap[method];\r\n\r\n        // Default options, unless specified.\r\n        _.defaults(options || (options = {}), {\r\n            emulateHTTP: Backbone.emulateHTTP,\r\n            emulateJSON: Backbone.emulateJSON\r\n        });\r\n\r\n        // Default JSON-request options.\r\n        var params = {type: type, dataType: 'json'};\r\n\r\n        // Ensure that we have a URL.\r\n        if (!options.url) {\r\n            params.url = _.result(model, 'url') || urlError();\r\n        }\r\n\r\n        // Ensure that we have the appropriate request data.\r\n        if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\r\n            params.contentType = 'application/json';\r\n            params.data = JSON.stringify(options.attrs || model.toJSON(options));\r\n        }\r\n\r\n        // For older servers, emulate JSON by encoding the request into an HTML-form.\r\n        if (options.emulateJSON) {\r\n            params.contentType = 'application/x-www-form-urlencoded';\r\n            params.data = params.data ? {model: params.data} : {};\r\n        }\r\n\r\n        // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n        // And an `X-HTTP-Method-Override` header.\r\n        if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\r\n            params.type = 'POST';\r\n            if (options.emulateJSON) params.data._method = type;\r\n            var beforeSend = options.beforeSend;\r\n            options.beforeSend = function(xhr) {\r\n                xhr.setRequestHeader('X-HTTP-Method-Override', type);\r\n                if (beforeSend) return beforeSend.apply(this, arguments);\r\n            };\r\n        }\r\n\r\n        // Don't process data on a non-GET request.\r\n        if (params.type !== 'GET' && !options.emulateJSON) {\r\n            params.processData = false;\r\n        }\r\n\r\n        // Pass along `textStatus` and `errorThrown` from jQuery.\r\n        var error = options.error;\r\n        options.error = function(xhr, textStatus, errorThrown) {\r\n            options.textStatus = textStatus;\r\n            options.errorThrown = errorThrown;\r\n            if (error) error.call(options.context, xhr, textStatus, errorThrown);\r\n        };\r\n\r\n        // Make the request, allowing the user to override any Ajax options.\r\n        var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\r\n        model.trigger('request', model, xhr, options);\r\n        return xhr;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.sync.[function]","oldFunction":"function(method, model, options) {\r\n        var type = methodMap[method];\r\n\r\n        // Default options, unless specified.\r\n        _.defaults(options || (options = {}), {\r\n            emulateHTTP: Backbone.emulateHTTP,\r\n            emulateJSON: Backbone.emulateJSON\r\n        });\r\n\r\n        // Default JSON-request options.\r\n        var params = {type: type, dataType: 'json'};\r\n\r\n        // Ensure that we have a URL.\r\n        if (!options.url) {\r\n            params.url = _.result(model, 'url') || urlError();\r\n        }\r\n\r\n        // Ensure that we have the appropriate request data.\r\n        if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\r\n            params.contentType = 'application/json';\r\n            params.data = JSON.stringify(options.attrs || model.toJSON(options));\r\n        }\r\n\r\n        // For older servers, emulate JSON by encoding the request into an HTML-form.\r\n        if (options.emulateJSON) {\r\n            params.contentType = 'application/x-www-form-urlencoded';\r\n            params.data = params.data ? {model: params.data} : {};\r\n        }\r\n\r\n        // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n        // And an `X-HTTP-Method-Override` header.\r\n        if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\r\n            params.type = 'POST';\r\n            if (options.emulateJSON) params.data._method = type;\r\n            var beforeSend = options.beforeSend;\r\n            options.beforeSend = function(xhr) {\r\n                xhr.setRequestHeader('X-HTTP-Method-Override', type);\r\n                if (beforeSend) return beforeSend.apply(this, arguments);\r\n            };\r\n        }\r\n\r\n        // Don't process data on a non-GET request.\r\n        if (params.type !== 'GET' && !options.emulateJSON) {\r\n            params.processData = false;\r\n        }\r\n\r\n        // If we're sending a `PATCH` request, and we're in an old Internet Explorer\r\n        // that still has ActiveX enabled by default, override jQuery to use that\r\n        // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.\r\n        if (params.type === 'PATCH' && window.ActiveXObject &&\r\n            !(window.external && window.external.msActiveXFilteringEnabled)) {\r\n            params.xhr = function() {\r\n                return new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n            };\r\n        }\r\n\r\n        // Make the request, allowing the user to override any Ajax options.\r\n        var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\r\n        model.trigger('request', model, xhr, options);\r\n        return xhr;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.sync.[function].[arg2]","key":"errorThrown","newType":null,"isAny":true,"isClass":false,"containerType":"// Seen as: options\ninterface interface_283 {\n    attrs: any;\n    beforeSend: (xhr: void) => any;\n    context: any;\n    data: any;\n    emulateHTTP: any;\n    emulateJSON: any;\n    error: (xhr: void, textStatus: void, errorThrown: void) => void;\n    errorThrown: any;\n    textStatus: any;\n    url: any;\n    xhr: boolean | JQueryXHR;\n}\n\n","containerDescription":"object"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.sync.[function]","newFunction":"function(method, model, options) {\r\n        var type = methodMap[method];\r\n\r\n        // Default options, unless specified.\r\n        _.defaults(options || (options = {}), {\r\n            emulateHTTP: Backbone.emulateHTTP,\r\n            emulateJSON: Backbone.emulateJSON\r\n        });\r\n\r\n        // Default JSON-request options.\r\n        var params = {type: type, dataType: 'json'};\r\n\r\n        // Ensure that we have a URL.\r\n        if (!options.url) {\r\n            params.url = _.result(model, 'url') || urlError();\r\n        }\r\n\r\n        // Ensure that we have the appropriate request data.\r\n        if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\r\n            params.contentType = 'application/json';\r\n            params.data = JSON.stringify(options.attrs || model.toJSON(options));\r\n        }\r\n\r\n        // For older servers, emulate JSON by encoding the request into an HTML-form.\r\n        if (options.emulateJSON) {\r\n            params.contentType = 'application/x-www-form-urlencoded';\r\n            params.data = params.data ? {model: params.data} : {};\r\n        }\r\n\r\n        // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n        // And an `X-HTTP-Method-Override` header.\r\n        if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\r\n            params.type = 'POST';\r\n            if (options.emulateJSON) params.data._method = type;\r\n            var beforeSend = options.beforeSend;\r\n            options.beforeSend = function(xhr) {\r\n                xhr.setRequestHeader('X-HTTP-Method-Override', type);\r\n                if (beforeSend) return beforeSend.apply(this, arguments);\r\n            };\r\n        }\r\n\r\n        // Don't process data on a non-GET request.\r\n        if (params.type !== 'GET' && !options.emulateJSON) {\r\n            params.processData = false;\r\n        }\r\n\r\n        // Pass along `textStatus` and `errorThrown` from jQuery.\r\n        var error = options.error;\r\n        options.error = function(xhr, textStatus, errorThrown) {\r\n            options.textStatus = textStatus;\r\n            options.errorThrown = errorThrown;\r\n            if (error) error.call(options.context, xhr, textStatus, errorThrown);\r\n        };\r\n\r\n        // Make the request, allowing the user to override any Ajax options.\r\n        var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\r\n        model.trigger('request', model, xhr, options);\r\n        return xhr;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.sync.[function]","oldFunction":"function(method, model, options) {\r\n        var type = methodMap[method];\r\n\r\n        // Default options, unless specified.\r\n        _.defaults(options || (options = {}), {\r\n            emulateHTTP: Backbone.emulateHTTP,\r\n            emulateJSON: Backbone.emulateJSON\r\n        });\r\n\r\n        // Default JSON-request options.\r\n        var params = {type: type, dataType: 'json'};\r\n\r\n        // Ensure that we have a URL.\r\n        if (!options.url) {\r\n            params.url = _.result(model, 'url') || urlError();\r\n        }\r\n\r\n        // Ensure that we have the appropriate request data.\r\n        if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\r\n            params.contentType = 'application/json';\r\n            params.data = JSON.stringify(options.attrs || model.toJSON(options));\r\n        }\r\n\r\n        // For older servers, emulate JSON by encoding the request into an HTML-form.\r\n        if (options.emulateJSON) {\r\n            params.contentType = 'application/x-www-form-urlencoded';\r\n            params.data = params.data ? {model: params.data} : {};\r\n        }\r\n\r\n        // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n        // And an `X-HTTP-Method-Override` header.\r\n        if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\r\n            params.type = 'POST';\r\n            if (options.emulateJSON) params.data._method = type;\r\n            var beforeSend = options.beforeSend;\r\n            options.beforeSend = function(xhr) {\r\n                xhr.setRequestHeader('X-HTTP-Method-Override', type);\r\n                if (beforeSend) return beforeSend.apply(this, arguments);\r\n            };\r\n        }\r\n\r\n        // Don't process data on a non-GET request.\r\n        if (params.type !== 'GET' && !options.emulateJSON) {\r\n            params.processData = false;\r\n        }\r\n\r\n        // If we're sending a `PATCH` request, and we're in an old Internet Explorer\r\n        // that still has ActiveX enabled by default, override jQuery to use that\r\n        // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.\r\n        if (params.type === 'PATCH' && window.ActiveXObject &&\r\n            !(window.external && window.external.msActiveXFilteringEnabled)) {\r\n            params.xhr = function() {\r\n                return new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n            };\r\n        }\r\n\r\n        // Make the request, allowing the user to override any Ajax options.\r\n        var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\r\n        model.trigger('request', model, xhr, options);\r\n        return xhr;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.sync.[function].[arg2]","key":"context","newType":null,"isAny":true,"isClass":false,"containerType":"// Seen as: options\ninterface interface_283 {\n    attrs: any;\n    beforeSend: (xhr: void) => any;\n    context: any;\n    data: any;\n    emulateHTTP: any;\n    emulateJSON: any;\n    error: (xhr: void, textStatus: void, errorThrown: void) => void;\n    errorThrown: any;\n    textStatus: any;\n    url: any;\n    xhr: boolean | JQueryXHR;\n}\n\n","containerDescription":"object"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.sync.[function]","newFunction":"function(method, model, options) {\r\n        var type = methodMap[method];\r\n\r\n        // Default options, unless specified.\r\n        _.defaults(options || (options = {}), {\r\n            emulateHTTP: Backbone.emulateHTTP,\r\n            emulateJSON: Backbone.emulateJSON\r\n        });\r\n\r\n        // Default JSON-request options.\r\n        var params = {type: type, dataType: 'json'};\r\n\r\n        // Ensure that we have a URL.\r\n        if (!options.url) {\r\n            params.url = _.result(model, 'url') || urlError();\r\n        }\r\n\r\n        // Ensure that we have the appropriate request data.\r\n        if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\r\n            params.contentType = 'application/json';\r\n            params.data = JSON.stringify(options.attrs || model.toJSON(options));\r\n        }\r\n\r\n        // For older servers, emulate JSON by encoding the request into an HTML-form.\r\n        if (options.emulateJSON) {\r\n            params.contentType = 'application/x-www-form-urlencoded';\r\n            params.data = params.data ? {model: params.data} : {};\r\n        }\r\n\r\n        // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n        // And an `X-HTTP-Method-Override` header.\r\n        if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\r\n            params.type = 'POST';\r\n            if (options.emulateJSON) params.data._method = type;\r\n            var beforeSend = options.beforeSend;\r\n            options.beforeSend = function(xhr) {\r\n                xhr.setRequestHeader('X-HTTP-Method-Override', type);\r\n                if (beforeSend) return beforeSend.apply(this, arguments);\r\n            };\r\n        }\r\n\r\n        // Don't process data on a non-GET request.\r\n        if (params.type !== 'GET' && !options.emulateJSON) {\r\n            params.processData = false;\r\n        }\r\n\r\n        // Pass along `textStatus` and `errorThrown` from jQuery.\r\n        var error = options.error;\r\n        options.error = function(xhr, textStatus, errorThrown) {\r\n            options.textStatus = textStatus;\r\n            options.errorThrown = errorThrown;\r\n            if (error) error.call(options.context, xhr, textStatus, errorThrown);\r\n        };\r\n\r\n        // Make the request, allowing the user to override any Ajax options.\r\n        var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\r\n        model.trigger('request', model, xhr, options);\r\n        return xhr;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.sync.[function]","oldFunction":"function(method, model, options) {\r\n        var type = methodMap[method];\r\n\r\n        // Default options, unless specified.\r\n        _.defaults(options || (options = {}), {\r\n            emulateHTTP: Backbone.emulateHTTP,\r\n            emulateJSON: Backbone.emulateJSON\r\n        });\r\n\r\n        // Default JSON-request options.\r\n        var params = {type: type, dataType: 'json'};\r\n\r\n        // Ensure that we have a URL.\r\n        if (!options.url) {\r\n            params.url = _.result(model, 'url') || urlError();\r\n        }\r\n\r\n        // Ensure that we have the appropriate request data.\r\n        if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\r\n            params.contentType = 'application/json';\r\n            params.data = JSON.stringify(options.attrs || model.toJSON(options));\r\n        }\r\n\r\n        // For older servers, emulate JSON by encoding the request into an HTML-form.\r\n        if (options.emulateJSON) {\r\n            params.contentType = 'application/x-www-form-urlencoded';\r\n            params.data = params.data ? {model: params.data} : {};\r\n        }\r\n\r\n        // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n        // And an `X-HTTP-Method-Override` header.\r\n        if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\r\n            params.type = 'POST';\r\n            if (options.emulateJSON) params.data._method = type;\r\n            var beforeSend = options.beforeSend;\r\n            options.beforeSend = function(xhr) {\r\n                xhr.setRequestHeader('X-HTTP-Method-Override', type);\r\n                if (beforeSend) return beforeSend.apply(this, arguments);\r\n            };\r\n        }\r\n\r\n        // Don't process data on a non-GET request.\r\n        if (params.type !== 'GET' && !options.emulateJSON) {\r\n            params.processData = false;\r\n        }\r\n\r\n        // If we're sending a `PATCH` request, and we're in an old Internet Explorer\r\n        // that still has ActiveX enabled by default, override jQuery to use that\r\n        // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.\r\n        if (params.type === 'PATCH' && window.ActiveXObject &&\r\n            !(window.external && window.external.msActiveXFilteringEnabled)) {\r\n            params.xhr = function() {\r\n                return new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n            };\r\n        }\r\n\r\n        // Make the request, allowing the user to override any Ajax options.\r\n        var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\r\n        model.trigger('request', model, xhr, options);\r\n        return xhr;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.sync.[function].[arg2]","key":"error","newType":"(xhr: void, textStatus: void, errorThrown: void) => void","isAny":false,"isClass":false,"containerType":"// Seen as: options\ninterface interface_283 {\n    attrs: any;\n    beforeSend: (xhr: void) => any;\n    context: any;\n    data: any;\n    emulateHTTP: any;\n    emulateJSON: any;\n    error: (xhr: void, textStatus: void, errorThrown: void) => void;\n    errorThrown: any;\n    textStatus: any;\n    url: any;\n    xhr: boolean | JQueryXHR;\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.stopListening.[function]","newFunction":"function(obj, name, callback) {\r\n        var listeningTo = this._listeningTo;\r\n        if (!listeningTo) return this;\r\n\r\n        var ids = obj ? [obj._listenId] : _.keys(listeningTo);\r\n\r\n        for (var i = 0; i < ids.length; i++) {\r\n            var listening = listeningTo[ids[i]];\r\n\r\n            // If listening doesn't exist, this object is not currently\r\n            // listening to obj. Break out early.\r\n            if (!listening) break;\r\n\r\n            listening.obj.off(name, callback, this);\r\n        }\r\n\r\n        return this;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.stopListening.[function]","oldFunction":"function(obj, name, callback) {\r\n            var listeners = this._listeners;\r\n            if (!listeners) return this;\r\n            var deleteListener = !name && !callback;\r\n            if (typeof name === 'object') callback = this;\r\n            if (obj) (listeners = {})[obj._listenerId] = obj;\r\n            for (var id in listeners) {\r\n                listeners[id].off(name, callback, this);\r\n                if (deleteListener) delete this._listeners[id];\r\n            }\r\n            return this;\r\n        }","oldJSDoc":null,"type":"removedProperty","typePath":"window.Backbone.stopListening.[function].[arg0]","key":"_listenerId","isClass":false,"containerType":"{\n    _listenId: string | number\n}\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.stopListening.[function]","newFunction":"function(obj, name, callback) {\r\n        var listeningTo = this._listeningTo;\r\n        if (!listeningTo) return this;\r\n\r\n        var ids = obj ? [obj._listenId] : _.keys(listeningTo);\r\n\r\n        for (var i = 0; i < ids.length; i++) {\r\n            var listening = listeningTo[ids[i]];\r\n\r\n            // If listening doesn't exist, this object is not currently\r\n            // listening to obj. Break out early.\r\n            if (!listening) break;\r\n\r\n            listening.obj.off(name, callback, this);\r\n        }\r\n\r\n        return this;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.stopListening.[function]","oldFunction":"function(obj, name, callback) {\r\n            var listeners = this._listeners;\r\n            if (!listeners) return this;\r\n            var deleteListener = !name && !callback;\r\n            if (typeof name === 'object') callback = this;\r\n            if (obj) (listeners = {})[obj._listenerId] = obj;\r\n            for (var id in listeners) {\r\n                listeners[id].off(name, callback, this);\r\n                if (deleteListener) delete this._listeners[id];\r\n            }\r\n            return this;\r\n        }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.stopListening.[function].[arg0]","key":"_listenId","newType":"string | number","isAny":false,"isClass":false,"containerType":"{\n    _listenId: string | number\n}\n","containerDescription":"object"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.ajax.[function]","newFunction":"function() {\r\n        return Backbone.$.ajax.apply(Backbone.$, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.ajax.[function]","oldFunction":"function() {\r\n        return Backbone.$.ajax.apply(Backbone.$, arguments);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.ajax.[function].[return]","newType":"boolean | JQueryXHR","oldType":"JQueryXHR","containerType":"() => boolean | JQueryXHR","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.once.[function]","newFunction":"function(name, callback, context) {\r\n        // Map the event into a `{event: once}` object.\r\n        var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));\r\n        if (typeof name === 'string' && context == null) callback = void 0;\r\n        return this.on(events, callback, context);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.once.[function]","oldFunction":"function(name, callback, context) {\r\n            if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;\r\n            var self = this;\r\n            var once = _.once(function() {\r\n                self.off(name, once);\r\n                callback.apply(this, arguments);\r\n            });\r\n            once._callback = callback;\r\n            return this.on(name, once, context);\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.once.[function].[return]","newType":"Backbone.Model | interface_281","oldType":"Backbone.Model","containerType":"(name: string | interface_231, callback: any, context: any) => Backbone.Model | interface_281","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.listenTo.[function]","newFunction":"function(obj, name, callback) {\r\n        if (!obj) return this;\r\n        var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\r\n        var listeningTo = this._listeningTo || (this._listeningTo = {});\r\n        var listening = listeningTo[id];\r\n\r\n        // This object is not listening to any other events on `obj` yet.\r\n        // Setup the necessary references to track the listening callbacks.\r\n        if (!listening) {\r\n            var thisId = this._listenId || (this._listenId = _.uniqueId('l'));\r\n            listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};\r\n        }\r\n\r\n        // Bind callbacks on obj, and keep track of them on listening.\r\n        internalOn(obj, name, callback, this, listening);\r\n        return this;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.listenTo.[function]","oldFunction":"function(obj, name, callback) {\r\n            var listeners = this._listeners || (this._listeners = {});\r\n            var id = obj._listenerId || (obj._listenerId = _.uniqueId('l'));\r\n            listeners[id] = obj;\r\n            if (typeof name === 'object') callback = this;\r\n            obj[implementation](name, callback, this);\r\n            return this;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.listenTo.[function].[arg1]","newType":"string | interface_214","oldType":"any","containerType":"(obj: {_events: any, _listenId: string, _listeners: any}, name: string | interface_214, callback: any) => Backbone.Model","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.off.[function]","newFunction":"function(name, callback, context) {\r\n        if (!this._events) return this;\r\n        this._events = eventsApi(offApi, this._events, name, callback, {\r\n            context: context,\r\n            listeners: this._listeners\r\n        });\r\n        return this;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.off.[function]","oldFunction":"function(name, callback, context) {\r\n            var retain, ev, events, names, i, l, j, k;\r\n            if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;\r\n            if (!name && !callback && !context) {\r\n                this._events = {};\r\n                return this;\r\n            }\r\n\r\n            names = name ? [name] : _.keys(this._events);\r\n            for (i = 0, l = names.length; i < l; i++) {\r\n                name = names[i];\r\n                if (events = this._events[name]) {\r\n                    this._events[name] = retain = [];\r\n                    if (callback || context) {\r\n                        for (j = 0, k = events.length; j < k; j++) {\r\n                            ev = events[j];\r\n                            if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||\r\n                                (context && context !== ev.context)) {\r\n                                retain.push(ev);\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!retain.length) delete this._events[name];\r\n                }\r\n            }\r\n\r\n            return this;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.off.[function].[arg0]","newType":"string | interface_231","oldType":"string","containerType":"(name: string | interface_231, callback: any, context: any) => Backbone.Model","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.listenToOnce.[function]","newFunction":"function(obj, name, callback) {\r\n        // Map the event into a `{event: once}` object.\r\n        var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));\r\n        return this.listenTo(obj, events);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.listenToOnce.[function]","oldFunction":"function(obj, name, callback) {\r\n            var listeners = this._listeners || (this._listeners = {});\r\n            var id = obj._listenerId || (obj._listenerId = _.uniqueId('l'));\r\n            listeners[id] = obj;\r\n            if (typeof name === 'object') callback = this;\r\n            obj[implementation](name, callback, this);\r\n            return this;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.listenToOnce.[function].[arg0]","newType":"{\n    _events: any, \n    _listenId: any, \n    _listeners: any\n}\n","oldType":"// Seen as: obj\ninterface interface_481 {\n    _listenerId: string;\n}\n\n","containerType":"(obj: {_events: any, _listenId: any, _listeners: any}, name: string | interface_231, callback: any) => Backbone.Model","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.on.[function].[arg1]","newFunction":"function(event, model, collection, options) {\r\n            if (model) {\r\n                if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n                if (event === 'destroy') this.remove(model, options);\r\n                if (event === 'change') {\r\n                    var prevId = this.modelId(model.previousAttributes());\r\n                    var id = this.modelId(model.attributes);\r\n                    if (prevId !== id) {\r\n                        if (prevId != null) delete this._byId[prevId];\r\n                        if (id != null) this._byId[id] = model;\r\n                    }\r\n                }\r\n            }\r\n            this.trigger.apply(this, arguments);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.on.[function]","oldFunction":"function(name, callback, context) {\r\n            if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;\r\n            this._events || (this._events = {});\r\n            var events = this._events[name] || (this._events[name] = []);\r\n            events.push({callback: callback, context: context, ctx: context || this});\r\n            return this;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.on.[function].[arg1]","newType":"(event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void","oldType":"{\n    _callback: {apply: void}\n}\n","containerType":"(name: string | interface_180, callback: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void, context: Backbone.Collection) => Backbone.Model | interface_280","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.on.[function]","newFunction":"function(name, callback, context) {\r\n        return internalOn(this, name, callback, context);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.on.[function]","oldFunction":"function(name, callback, context) {\r\n            if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;\r\n            this._events || (this._events = {});\r\n            var events = this._events[name] || (this._events[name] = []);\r\n            events.push({callback: callback, context: context, ctx: context || this});\r\n            return this;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.on.[function].[return]","newType":"Backbone.Model | interface_280","oldType":"Backbone.Model","containerType":"(name: string | interface_180, callback: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void, context: Backbone.Collection) => Backbone.Model | interface_280","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.listenTo.[function]","newFunction":"function(obj, name, callback) {\r\n        if (!obj) return this;\r\n        var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\r\n        var listeningTo = this._listeningTo || (this._listeningTo = {});\r\n        var listening = listeningTo[id];\r\n\r\n        // This object is not listening to any other events on `obj` yet.\r\n        // Setup the necessary references to track the listening callbacks.\r\n        if (!listening) {\r\n            var thisId = this._listenId || (this._listenId = _.uniqueId('l'));\r\n            listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};\r\n        }\r\n\r\n        // Bind callbacks on obj, and keep track of them on listening.\r\n        internalOn(obj, name, callback, this, listening);\r\n        return this;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.listenTo.[function]","oldFunction":"function(obj, name, callback) {\r\n            var listeners = this._listeners || (this._listeners = {});\r\n            var id = obj._listenerId || (obj._listenerId = _.uniqueId('l'));\r\n            listeners[id] = obj;\r\n            if (typeof name === 'object') callback = this;\r\n            obj[implementation](name, callback, this);\r\n            return this;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.listenTo.[function].[arg0]","newType":"{\n    _events: any, \n    _listenId: string, \n    _listeners: any\n}\n","oldType":"// Seen as: obj\ninterface interface_452 {\n    _listenerId: string;\n}\n\n","containerType":"(obj: {_events: any, _listenId: string, _listeners: any}, name: string | interface_214, callback: any) => Backbone.Model","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.on.[function]","newFunction":"function(name, callback, context) {\r\n        return internalOn(this, name, callback, context);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.on.[function]","oldFunction":"function(name, callback, context) {\r\n            if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;\r\n            this._events || (this._events = {});\r\n            var events = this._events[name] || (this._events[name] = []);\r\n            events.push({callback: callback, context: context, ctx: context || this});\r\n            return this;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.on.[function].[arg0]","newType":"string | interface_180","oldType":"string","containerType":"(name: string | interface_180, callback: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void, context: Backbone.Collection) => Backbone.Model | interface_280","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.trigger.[function]","newFunction":"function(name) {\r\n        if (!this._events) return this;\r\n\r\n        var length = Math.max(0, arguments.length - 1);\r\n        var args = Array(length);\r\n        for (var i = 0; i < length; i++) args[i] = arguments[i + 1];\r\n\r\n        eventsApi(triggerApi, this._events, name, void 0, args);\r\n        return this;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.trigger.[function]","oldFunction":"function(name) {\r\n            if (!this._events) return this;\r\n            var args = slice.call(arguments, 1);\r\n            if (!eventsApi(this, 'trigger', name, args)) return this;\r\n            var events = this._events[name];\r\n            var allEvents = this._events.all;\r\n            if (events) triggerEvents(events, args);\r\n            if (allEvents) triggerEvents(allEvents, arguments);\r\n            return this;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.trigger.[function].[arg0]","newType":"string | interface_247","oldType":"string","containerType":"(name: string | interface_247) => Backbone.Model","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.listenToOnce.[function]","newFunction":"function(obj, name, callback) {\r\n        // Map the event into a `{event: once}` object.\r\n        var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));\r\n        return this.listenTo(obj, events);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.listenToOnce.[function]","oldFunction":"function(obj, name, callback) {\r\n            var listeners = this._listeners || (this._listeners = {});\r\n            var id = obj._listenerId || (obj._listenerId = _.uniqueId('l'));\r\n            listeners[id] = obj;\r\n            if (typeof name === 'object') callback = this;\r\n            obj[implementation](name, callback, this);\r\n            return this;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.listenToOnce.[function].[arg1]","newType":"string | interface_231","oldType":"any","containerType":"(obj: {_events: any, _listenId: any, _listeners: any}, name: string | interface_231, callback: any) => Backbone.Model","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[function].[arg1]","newFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[function].[arg1]","oldFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.url) this.url = options.url;\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","oldJSDoc":null,"type":"removedProperty","typePath":"window.Backbone.Collection.[constructor].[function].[arg1]","key":"url","isClass":false,"containerType":"// Seen as: options\ninterface interface_270 {\n    comparator: Function;\n    model: typeof Backbone.Model;\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[function]","newFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[function]","oldFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.url) this.url = options.url;\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[function].[arg0]","newType":"string | number | Array<any> | interface_269","oldType":"Array<any> | string","containerType":"class Collection {\n    constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n    static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n    _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n    _byId: any;\n    _isModel: (model: any) => boolean;\n    _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n    _prepareModel: (attrs: any, options: any) => any;\n    _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n    _removeReference: (model: interface_273, options: any) => void;\n    _reset: () => void;\n    add: (models: any, options: any) => any;\n    all: (iteratee: any, context: any) => any;\n    any: (iteratee: any, context: any) => any;\n    at: (index: number) => interface_228;\n    bind: typeof Backbone.bind;\n    chain: () => any;\n    clone: () => Backbone.Collection;\n    collect: (iteratee: any, context: any) => any;\n    contains: (iteratee: any, context: any) => any;\n    countBy: (iteratee: any, context: any) => any;\n    create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n    detect: (iteratee: any, context: any) => any;\n    difference: () => any;\n    drop: (iteratee: any, context: any) => any;\n    each: (iteratee: any, context: any) => any;\n    every: (iteratee: any, context: any) => any;\n    fetch: (options: any) => JQueryXHR;\n    filter: (iteratee: any, context: any) => any;\n    find: (iteratee: any, context: any) => any;\n    findIndex: (iteratee: any, context: any) => any;\n    findLastIndex: (iteratee: any, context: any) => any;\n    findWhere: (attrs: any) => any;\n    first: (iteratee: any, context: any) => any;\n    foldl: () => any;\n    foldr: () => any;\n    forEach: (iteratee: any, context: any) => any;\n    get: (obj: any) => string | number | interface_236;\n    groupBy: (iteratee: any, context: any) => any;\n    has: (obj: string | number | interface_268) => boolean;\n    head: (iteratee: any, context: any) => any;\n    include: (iteratee: any, context: any) => any;\n    includes: (iteratee: any, context: any) => any;\n    indexBy: (iteratee: any, context: any) => any;\n    indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n    initial: (iteratee: any, context: any) => any;\n    initialize: () => void;\n    inject: () => any;\n    invoke: () => any;\n    isEmpty: () => any;\n    last: (iteratee: any, context: any) => any;\n    lastIndexOf: (iteratee: any, context: any) => any;\n    length: number;\n    listenTo: typeof Backbone.listenTo;\n    listenToOnce: typeof Backbone.listenToOnce;\n    map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n    max: (iteratee: any, context: any) => any;\n    min: (iteratee: any, context: any) => any;\n    model: typeof Backbone.Model;\n    modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n    models: Array<any>;\n    off: typeof Backbone.off;\n    on: typeof Backbone.bind;\n    once: typeof Backbone.once;\n    parse: (resp: any, options: any) => any;\n    partition: (iteratee: any, context: any) => any;\n    pluck: (attr: string | number) => any;\n    pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    push: (model: string | number | interface_217, options: any) => any;\n    reduce: () => any;\n    reduceRight: () => any;\n    reject: (iteratee: any, context: any) => any;\n    remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n    reset: (models: any, options: any) => any;\n    rest: (iteratee: any, context: any) => any;\n    sample: (iteratee: any, context: any) => any;\n    select: (iteratee: any, context: any) => any;\n    set: (models: any, options: any) => any;\n    shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n    shuffle: () => any;\n    size: () => any;\n    slice: () => any;\n    some: (iteratee: any, context: any) => any;\n    sort: (options: {silent: boolean}) => Backbone.Collection;\n    sortBy: (iteratee: any, context: any) => Array<any>;\n    stopListening: typeof Backbone.stopListening;\n    sync: () => JQueryXHR;\n    tail: (iteratee: any, context: any) => any;\n    take: (iteratee: any, context: any) => any;\n    toArray: () => any;\n    toJSON: (options: any) => any;\n    trigger: typeof Backbone.trigger;\n    unbind: typeof Backbone.off;\n    unshift: (model: string | number | interface_217, options: any) => any;\n    where: (attrs: any, first: boolean) => any;\n    without: () => any;\n}\n","containerDescription":"class Backbone.Collection"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[function].[arg1]","newFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[function].[arg1]","oldFunction":"function(models, options) {\r\n        options || (options = {});\r\n        if (options.url) this.url = options.url;\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[function].[arg1].comparator","newType":"Function","oldType":"any","containerType":"// Seen as: options\ninterface interface_270 {\n    comparator: Function;\n    model: typeof Backbone.Model;\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.View.extend.[function]","newFunction":"function(protoProps, staticProps) {\r\n        var parent = this;\r\n        var child;\r\n\r\n        // The constructor function for the new subclass is either defined by you\r\n        // (the \"constructor\" property in your `extend` definition), or defaulted\r\n        // by us to simply call the parent constructor.\r\n        if (protoProps && _.has(protoProps, 'constructor')) {\r\n            child = protoProps.constructor;\r\n        } else {\r\n            child = function(){ return parent.apply(this, arguments); };\r\n        }\r\n\r\n        // Add static properties to the constructor function, if supplied.\r\n        _.extend(child, parent, staticProps);\r\n\r\n        // Set the prototype chain to inherit from `parent`, without calling\r\n        // `parent`'s constructor function and add the prototype properties.\r\n        child.prototype = _.create(parent.prototype, protoProps);\r\n        child.prototype.constructor = child;\r\n\r\n        // Set a convenience property in case the parent's prototype is needed\r\n        // later.\r\n        child.__super__ = parent.prototype;\r\n\r\n        return child;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.View.extend.[function]","oldFunction":"function(protoProps, staticProps) {\r\n        var parent = this;\r\n        var child;\r\n\r\n        // The constructor function for the new subclass is either defined by you\r\n        // (the \"constructor\" property in your `extend` definition), or defaulted\r\n        // by us to simply call the parent's constructor.\r\n        if (protoProps && _.has(protoProps, 'constructor')) {\r\n            child = protoProps.constructor;\r\n        } else {\r\n            child = function(){ return parent.apply(this, arguments); };\r\n        }\r\n\r\n        // Add static properties to the constructor function, if supplied.\r\n        _.extend(child, parent, staticProps);\r\n\r\n        // Set the prototype chain to inherit from `parent`, without calling\r\n        // `parent`'s constructor function.\r\n        var Surrogate = function(){ this.constructor = child; };\r\n        Surrogate.prototype = parent.prototype;\r\n        child.prototype = new Surrogate;\r\n\r\n        // Add prototype properties (instance properties) to the subclass,\r\n        // if supplied.\r\n        if (protoProps) _.extend(child.prototype, protoProps);\r\n\r\n        // Set a convenience property in case the parent's prototype is needed\r\n        // later.\r\n        child.__super__ = parent.prototype;\r\n\r\n        return child;\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.View.extend.[function].[arg0].constructor.prototype","newType":"{\n    constructor: any\n}\n","oldType":"any","containerType":"{\n    __super__: any, \n    prototype: {constructor: any}\n}\n","containerDescription":"object"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].set.[function]","newFunction":"function(models, options) {\r\n            if (models == null) return;\r\n\r\n            options = _.extend({}, setOptions, options);\r\n            if (options.parse && !this._isModel(models)) {\r\n                models = this.parse(models, options) || [];\r\n            }\r\n\r\n            var singular = !_.isArray(models);\r\n            models = singular ? [models] : models.slice();\r\n\r\n            var at = options.at;\r\n            if (at != null) at = +at;\r\n            if (at > this.length) at = this.length;\r\n            if (at < 0) at += this.length + 1;\r\n\r\n            var set = [];\r\n            var toAdd = [];\r\n            var toMerge = [];\r\n            var toRemove = [];\r\n            var modelMap = {};\r\n\r\n            var add = options.add;\r\n            var merge = options.merge;\r\n            var remove = options.remove;\r\n\r\n            var sort = false;\r\n            var sortable = this.comparator && at == null && options.sort !== false;\r\n            var sortAttr = _.isString(this.comparator) ? this.comparator : null;\r\n\r\n            // Turn bare objects into model references, and prevent invalid models\r\n            // from being added.\r\n            var model, i;\r\n            for (i = 0; i < models.length; i++) {\r\n                model = models[i];\r\n\r\n                // If a duplicate is found, prevent it from being added and\r\n                // optionally merge it into the existing model.\r\n                var existing = this.get(model);\r\n                if (existing) {\r\n                    if (merge && model !== existing) {\r\n                        var attrs = this._isModel(model) ? model.attributes : model;\r\n                        if (options.parse) attrs = existing.parse(attrs, options);\r\n                        existing.set(attrs, options);\r\n                        toMerge.push(existing);\r\n                        if (sortable && !sort) sort = existing.hasChanged(sortAttr);\r\n                    }\r\n                    if (!modelMap[existing.cid]) {\r\n                        modelMap[existing.cid] = true;\r\n                        set.push(existing);\r\n                    }\r\n                    models[i] = existing;\r\n\r\n                    // If this is a new, valid model, push it to the `toAdd` list.\r\n                } else if (add) {\r\n                    model = models[i] = this._prepareModel(model, options);\r\n                    if (model) {\r\n                        toAdd.push(model);\r\n                        this._addReference(model, options);\r\n                        modelMap[model.cid] = true;\r\n                        set.push(model);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Remove stale models.\r\n            if (remove) {\r\n                for (i = 0; i < this.length; i++) {\r\n                    model = this.models[i];\r\n                    if (!modelMap[model.cid]) toRemove.push(model);\r\n                }\r\n                if (toRemove.length) this._removeModels(toRemove, options);\r\n            }\r\n\r\n            // See if sorting is needed, update `length` and splice in new models.\r\n            var orderChanged = false;\r\n            var replace = !sortable && add && remove;\r\n            if (set.length && replace) {\r\n                orderChanged = this.length !== set.length || _.some(this.models, function(m, index) {\r\n                        return m !== set[index];\r\n                    });\r\n                this.models.length = 0;\r\n                splice(this.models, set, 0);\r\n                this.length = this.models.length;\r\n            } else if (toAdd.length) {\r\n                if (sortable) sort = true;\r\n                splice(this.models, toAdd, at == null ? this.length : at);\r\n                this.length = this.models.length;\r\n            }\r\n\r\n            // Silently sort the collection if appropriate.\r\n            if (sort) this.sort({silent: true});\r\n\r\n            // Unless silenced, it's time to fire all appropriate add/sort/update events.\r\n            if (!options.silent) {\r\n                for (i = 0; i < toAdd.length; i++) {\r\n                    if (at != null) options.index = at + i;\r\n                    model = toAdd[i];\r\n                    model.trigger('add', model, this, options);\r\n                }\r\n                if (sort || orderChanged) this.trigger('sort', this, options);\r\n                if (toAdd.length || toRemove.length || toMerge.length) {\r\n                    options.changes = {\r\n                        added: toAdd,\r\n                        removed: toRemove,\r\n                        merged: toMerge\r\n                    };\r\n                    this.trigger('update', this, options);\r\n                }\r\n            }\r\n\r\n            // Return the added (or merged) model (or models).\r\n            return singular ? models[0] : models;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].set.[function]","oldFunction":"function(models, options) {\r\n            options = _.defaults(options || {}, setOptions);\r\n            if (options.parse) models = this.parse(models, options);\r\n            if (!_.isArray(models)) models = models ? [models] : [];\r\n            var i, l, model, attrs, existing, sort;\r\n            var at = options.at;\r\n            var sortable = this.comparator && (at == null) && options.sort !== false;\r\n            var sortAttr = _.isString(this.comparator) ? this.comparator : null;\r\n            var toAdd = [], toRemove = [], modelMap = {};\r\n\r\n            // Turn bare objects into model references, and prevent invalid models\r\n            // from being added.\r\n            for (i = 0, l = models.length; i < l; i++) {\r\n                if (!(model = this._prepareModel(models[i], options))) continue;\r\n\r\n                // If a duplicate is found, prevent it from being added and\r\n                // optionally merge it into the existing model.\r\n                if (existing = this.get(model)) {\r\n                    if (options.remove) modelMap[existing.cid] = true;\r\n                    if (options.merge) {\r\n                        existing.set(model.attributes, options);\r\n                        if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;\r\n                    }\r\n\r\n                    // This is a new model, push it to the `toAdd` list.\r\n                } else if (options.add) {\r\n                    toAdd.push(model);\r\n\r\n                    // Listen to added models' events, and index models for lookup by\r\n                    // `id` and by `cid`.\r\n                    model.on('all', this._onModelEvent, this);\r\n                    this._byId[model.cid] = model;\r\n                    if (model.id != null) this._byId[model.id] = model;\r\n                }\r\n            }\r\n\r\n            // Remove nonexistent models if appropriate.\r\n            if (options.remove) {\r\n                for (i = 0, l = this.length; i < l; ++i) {\r\n                    if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);\r\n                }\r\n                if (toRemove.length) this.remove(toRemove, options);\r\n            }\r\n\r\n            // See if sorting is needed, update `length` and splice in new models.\r\n            if (toAdd.length) {\r\n                if (sortable) sort = true;\r\n                this.length += toAdd.length;\r\n                if (at != null) {\r\n                    splice.apply(this.models, [at, 0].concat(toAdd));\r\n                } else {\r\n                    push.apply(this.models, toAdd);\r\n                }\r\n            }\r\n\r\n            // Silently sort the collection if appropriate.\r\n            if (sort) this.sort({silent: true});\r\n\r\n            if (options.silent) return this;\r\n\r\n            // Trigger `add` events.\r\n            for (i = 0, l = toAdd.length; i < l; i++) {\r\n                (model = toAdd[i]).trigger('add', model, this, options);\r\n            }\r\n\r\n            // Trigger `sort` if the collection was sorted.\r\n            if (sort) this.trigger('sort', this, options);\r\n            return this;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[return].set.[function].[return]","newType":"any","oldType":"Backbone.Collection","containerType":"(models: any, options: any) => any","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].push.[function]","newFunction":"function(model, options) {\r\n            return this.add(model, _.extend({at: this.length}, options));\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].push.[function]","oldFunction":"function(model, options) {\r\n            model = this._prepareModel(model, options);\r\n            this.add(model, _.extend({at: this.length}, options));\r\n            return model;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[return].push.[function].[arg0]","newType":"string | number | interface_217","oldType":"any","containerType":"(model: string | number | interface_217, options: any) => any","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Model.[constructor].[return].save.[function]","newFunction":"function(key, val, options) {\r\n            // Handle both `\"key\", value` and `{key: value}` -style arguments.\r\n            var attrs;\r\n            if (key == null || typeof key === 'object') {\r\n                attrs = key;\r\n                options = val;\r\n            } else {\r\n                (attrs = {})[key] = val;\r\n            }\r\n\r\n            options = _.extend({validate: true, parse: true}, options);\r\n            var wait = options.wait;\r\n\r\n            // If we're not waiting and attributes exist, save acts as\r\n            // `set(attr).save(null, opts)` with validation. Otherwise, check if\r\n            // the model will be valid when the attributes, if any, are set.\r\n            if (attrs && !wait) {\r\n                if (!this.set(attrs, options)) return false;\r\n            } else if (!this._validate(attrs, options)) {\r\n                return false;\r\n            }\r\n\r\n            // After a successful server-side save, the client is (optionally)\r\n            // updated with the server-side state.\r\n            var model = this;\r\n            var success = options.success;\r\n            var attributes = this.attributes;\r\n            options.success = function(resp) {\r\n                // Ensure attributes are restored during synchronous saves.\r\n                model.attributes = attributes;\r\n                var serverAttrs = options.parse ? model.parse(resp, options) : resp;\r\n                if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);\r\n                if (serverAttrs && !model.set(serverAttrs, options)) return false;\r\n                if (success) success.call(options.context, model, resp, options);\r\n                model.trigger('sync', model, resp, options);\r\n            };\r\n            wrapError(this, options);\r\n\r\n            // Set temporary attributes if `{wait: true}` to properly find new ids.\r\n            if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);\r\n\r\n            var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\r\n            if (method === 'patch' && !options.attrs) options.attrs = attrs;\r\n            var xhr = this.sync(method, this, options);\r\n\r\n            // Restore attributes.\r\n            this.attributes = attributes;\r\n\r\n            return xhr;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Model.[constructor].[return].save.[function]","oldFunction":"function(key, val, options) {\r\n            var attrs, method, xhr, attributes = this.attributes;\r\n\r\n            // Handle both `\"key\", value` and `{key: value}` -style arguments.\r\n            if (key == null || typeof key === 'object') {\r\n                attrs = key;\r\n                options = val;\r\n            } else {\r\n                (attrs = {})[key] = val;\r\n            }\r\n\r\n            // If we're not waiting and attributes exist, save acts as `set(attr).save(null, opts)`.\r\n            if (attrs && (!options || !options.wait) && !this.set(attrs, options)) return false;\r\n\r\n            options = _.extend({validate: true}, options);\r\n\r\n            // Do not persist invalid models.\r\n            if (!this._validate(attrs, options)) return false;\r\n\r\n            // Set temporary attributes if `{wait: true}`.\r\n            if (attrs && options.wait) {\r\n                this.attributes = _.extend({}, attributes, attrs);\r\n            }\r\n\r\n            // After a successful server-side save, the client is (optionally)\r\n            // updated with the server-side state.\r\n            if (options.parse === void 0) options.parse = true;\r\n            var model = this;\r\n            var success = options.success;\r\n            options.success = function(resp) {\r\n                // Ensure attributes are restored during synchronous saves.\r\n                model.attributes = attributes;\r\n                var serverAttrs = model.parse(resp, options);\r\n                if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);\r\n                if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {\r\n                    return false;\r\n                }\r\n                if (success) success(model, resp, options);\r\n                model.trigger('sync', model, resp, options);\r\n            };\r\n            wrapError(this, options);\r\n\r\n            method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\r\n            if (method === 'patch') options.attrs = attrs;\r\n            xhr = this.sync(method, this, options);\r\n\r\n            // Restore attributes.\r\n            if (attrs && options.wait) this.attributes = attributes;\r\n\r\n            return xhr;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Model.[constructor].[return].save.[function].[arg1]","newType":"boolean | interface_278","oldType":"// Seen as: options\ninterface interface_515 {\n    attrs: any;\n    error: (arg0: void, arg1: void, arg2: void) => void;\n    parse: any;\n    patch: any;\n    silent: any;\n    success: (arg0: void, arg1: void, arg2: void) => void;\n    unset: any;\n    validate: any;\n    wait: any;\n}\n\n","containerType":"(key: string | number | interface_261, val: boolean | interface_278, options: any) => boolean | JQueryXHR","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].pop.[function]","newFunction":"function(options) {\r\n            var model = this.at(this.length - 1);\r\n            return this.remove(model, options);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].pop.[function]","oldFunction":"function(options) {\r\n            var model = this.at(this.length - 1);\r\n            this.remove(model, options);\r\n            return model;\r\n        }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Collection.[constructor].[return].pop.[function].[arg0]","key":"changes","newType":null,"isAny":true,"isClass":false,"containerType":"{\n    changes: any, \n    index: any, \n    silent: any\n}\n","containerDescription":"object"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].unshift.[function]","newFunction":"function(model, options) {\r\n            return this.add(model, _.extend({at: 0}, options));\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].unshift.[function]","oldFunction":"function(model, options) {\r\n            model = this._prepareModel(model, options);\r\n            this.add(model, _.extend({at: 0}, options));\r\n            return model;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[return].unshift.[function].[return]","newType":"any","oldType":"boolean | {collection: Backbone.Collection, save: void} | Backbone.Model","containerType":"(model: string | number | interface_217, options: any) => any","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].pluck.[function]","newFunction":"function(attr) {\r\n            return this.map(attr + '');\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].pluck.[function]","oldFunction":"function(attr) {\r\n            return _.invoke(this.models, 'get', attr);\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[return].pluck.[function].[arg0]","newType":"string | number","oldType":"any","containerType":"(attr: string | number) => any","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Model.[constructor].[return].get.[function]","newFunction":"function(attr) {\r\n            return this.attributes[attr];\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Model.[constructor].[return].get.[function]","oldFunction":"function(attr) {\r\n            return this.attributes[attr];\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Model.[constructor].[return].get.[function].[arg0]","newType":"string","oldType":"string | number","containerType":"(attr: string) => string","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].create.[function]","newFunction":"function(model, options) {\r\n            options = options ? _.clone(options) : {};\r\n            var wait = options.wait;\r\n            model = this._prepareModel(model, options);\r\n            if (!model) return false;\r\n            if (!wait) this.add(model, options);\r\n            var collection = this;\r\n            var success = options.success;\r\n            options.success = function(m, resp, callbackOpts) {\r\n                if (wait) collection.add(m, callbackOpts);\r\n                if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\r\n            };\r\n            model.save(null, options);\r\n            return model;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].create.[function]","oldFunction":"function(model, options) {\r\n            options = options ? _.clone(options) : {};\r\n            if (!(model = this._prepareModel(model, options))) return false;\r\n            if (!options.wait) this.add(model, options);\r\n            var collection = this;\r\n            var success = options.success;\r\n            options.success = function(resp) {\r\n                if (options.wait) collection.add(model, options);\r\n                if (success) success(model, resp, options);\r\n            };\r\n            model.save(null, options);\r\n            return model;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[return].create.[function].[arg1]","newType":"boolean | interface_274","oldType":"// Seen as: arg1, options\ninterface interface_506 {\n    add: any;\n    at: number;\n    collection: any;\n    index: any;\n    merge: any;\n    parse: any;\n    remove: any;\n    silent: any;\n    sort: boolean;\n    success: (resp: void, arg1: void, arg2: void) => void;\n    unset: any;\n    validate: any;\n    wait: any;\n}\n\n","containerType":"(model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Model.[constructor].[return].sync.[function]","newFunction":"function() {\r\n            return Backbone.sync.apply(this, arguments);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Model.[constructor].[return].sync.[function]","oldFunction":"function() {\r\n            return Backbone.sync.apply(this, arguments);\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Model.[constructor].[return].sync.[function].[return]","newType":"boolean | JQueryXHR","oldType":"JQueryXHR","containerType":"() => boolean | JQueryXHR","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Model.[constructor].[return].destroy.[function]","newFunction":"function(options) {\r\n            options = options ? _.clone(options) : {};\r\n            var model = this;\r\n            var success = options.success;\r\n            var wait = options.wait;\r\n\r\n            var destroy = function() {\r\n                model.stopListening();\r\n                model.trigger('destroy', model, model.collection, options);\r\n            };\r\n\r\n            options.success = function(resp) {\r\n                if (wait) destroy();\r\n                if (success) success.call(options.context, model, resp, options);\r\n                if (!model.isNew()) model.trigger('sync', model, resp, options);\r\n            };\r\n\r\n            var xhr = false;\r\n            if (this.isNew()) {\r\n                _.defer(options.success);\r\n            } else {\r\n                wrapError(this, options);\r\n                xhr = this.sync('delete', this, options);\r\n            }\r\n            if (!wait) destroy();\r\n            return xhr;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Model.[constructor].[return].destroy.[function]","oldFunction":"function(options) {\r\n            options = options ? _.clone(options) : {};\r\n            var model = this;\r\n            var success = options.success;\r\n\r\n            var destroy = function() {\r\n                model.trigger('destroy', model, model.collection, options);\r\n            };\r\n\r\n            options.success = function(resp) {\r\n                if (options.wait || model.isNew()) destroy();\r\n                if (success) success(model, resp, options);\r\n                if (!model.isNew()) model.trigger('sync', model, resp, options);\r\n            };\r\n\r\n            if (this.isNew()) {\r\n                options.success();\r\n                return false;\r\n            }\r\n            wrapError(this, options);\r\n\r\n            var xhr = this.sync('delete', this, options);\r\n            if (!options.wait) destroy();\r\n            return xhr;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Model.[constructor].[return].destroy.[function].[arg0]","newType":"// Seen as: options\ninterface interface_276 {\n    context: any;\n    error: interface_275;\n    success: Function;\n    wait: any;\n}\n\n","oldType":"Backbone.Model | interface_493","containerType":"(options: interface_276) => boolean | JQueryXHR","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Model.[constructor].[return].fetch.[function]","newFunction":"function(options) {\r\n            options = _.extend({parse: true}, options);\r\n            var model = this;\r\n            var success = options.success;\r\n            options.success = function(resp) {\r\n                var serverAttrs = options.parse ? model.parse(resp, options) : resp;\r\n                if (!model.set(serverAttrs, options)) return false;\r\n                if (success) success.call(options.context, model, resp, options);\r\n                model.trigger('sync', model, resp, options);\r\n            };\r\n            wrapError(this, options);\r\n            return this.sync('read', this, options);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Model.[constructor].[return].fetch.[function]","oldFunction":"function(options) {\r\n            options = options ? _.clone(options) : {};\r\n            if (options.parse === void 0) options.parse = true;\r\n            var model = this;\r\n            var success = options.success;\r\n            options.success = function(resp) {\r\n                if (!model.set(model.parse(resp, options), options)) return false;\r\n                if (success) success(model, resp, options);\r\n                model.trigger('sync', model, resp, options);\r\n            };\r\n            wrapError(this, options);\r\n            return this.sync('read', this, options);\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Model.[constructor].[return].fetch.[function].[arg0]","newType":"any","oldType":"// Seen as: options\ninterface interface_514 {\n    error: (arg0: void, arg1: void, arg2: void) => void;\n    parse: boolean;\n    silent: any;\n    success: (resp: void, arg1: void, arg2: void) => boolean;\n    unset: any;\n    validate: any;\n}\n\n","containerType":"(options: any) => JQueryXHR","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].reset.[function]","newFunction":"function(models, options) {\r\n            options = options ? _.clone(options) : {};\r\n            for (var i = 0; i < this.models.length; i++) {\r\n                this._removeReference(this.models[i], options);\r\n            }\r\n            options.previousModels = this.models;\r\n            this._reset();\r\n            models = this.add(models, _.extend({silent: true}, options));\r\n            if (!options.silent) this.trigger('reset', this, options);\r\n            return models;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].reset.[function]","oldFunction":"function(models, options) {\r\n            options || (options = {});\r\n            for (var i = 0, l = this.models.length; i < l; i++) {\r\n                this._removeReference(this.models[i]);\r\n            }\r\n            options.previousModels = this.models;\r\n            this._reset();\r\n            this.add(models, _.extend({silent: true}, options));\r\n            if (!options.silent) this.trigger('reset', this, options);\r\n            return this;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[return].reset.[function].[arg0]","newType":"any","oldType":"Array<any> | string","containerType":"(models: any, options: any) => any","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].reset.[function]","newFunction":"function(models, options) {\r\n            options = options ? _.clone(options) : {};\r\n            for (var i = 0; i < this.models.length; i++) {\r\n                this._removeReference(this.models[i], options);\r\n            }\r\n            options.previousModels = this.models;\r\n            this._reset();\r\n            models = this.add(models, _.extend({silent: true}, options));\r\n            if (!options.silent) this.trigger('reset', this, options);\r\n            return models;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].reset.[function]","oldFunction":"function(models, options) {\r\n            options || (options = {});\r\n            for (var i = 0, l = this.models.length; i < l; i++) {\r\n                this._removeReference(this.models[i]);\r\n            }\r\n            options.previousModels = this.models;\r\n            this._reset();\r\n            this.add(models, _.extend({silent: true}, options));\r\n            if (!options.silent) this.trigger('reset', this, options);\r\n            return this;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[return].reset.[function].[return]","newType":"any","oldType":"Backbone.Collection","containerType":"(models: any, options: any) => any","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].remove.[function]","newFunction":"function(models, options) {\r\n            options = _.extend({}, options);\r\n            var singular = !_.isArray(models);\r\n            models = singular ? [models] : models.slice();\r\n            var removed = this._removeModels(models, options);\r\n            if (!options.silent && removed.length) {\r\n                options.changes = {added: [], merged: [], removed: removed};\r\n                this.trigger('update', this, options);\r\n            }\r\n            return singular ? removed[0] : removed;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].remove.[function]","oldFunction":"function(models, options) {\r\n            models = _.isArray(models) ? models.slice() : [models];\r\n            options || (options = {});\r\n            var i, l, index, model;\r\n            for (i = 0, l = models.length; i < l; i++) {\r\n                model = this.get(models[i]);\r\n                if (!model) continue;\r\n                delete this._byId[model.id];\r\n                delete this._byId[model.cid];\r\n                index = this.indexOf(model);\r\n                this.models.splice(index, 1);\r\n                this.length--;\r\n                if (!options.silent) {\r\n                    options.index = index;\r\n                    model.trigger('remove', model, this, options);\r\n                }\r\n                this._removeReference(model);\r\n            }\r\n            return this;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[return].remove.[function].[arg0]","newType":"Array<any> | {attributes: void, previousAttributes: void}","oldType":"Text | Object | JQueryPromiseCallback<any> | JQuery | string | Array<any> | {idAttribute: any, previous: void} | Element","containerType":"(models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Router.[constructor].[return].navigate.[function]","newFunction":"function(fragment, options) {\r\n            Backbone.history.navigate(fragment, options);\r\n            return this;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Router.[constructor].[return].navigate.[function]","oldFunction":"function(fragment, options) {\r\n            Backbone.history.navigate(fragment, options);\r\n            return this;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Router.[constructor].[return].navigate.[function].[arg0]","newType":"string","oldType":"string | number","containerType":"(fragment: string, options: boolean | {replace: any, trigger: any}) => Backbone.Router","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].get.[function]","newFunction":"function(obj) {\r\n            if (obj == null) return void 0;\r\n            return this._byId[obj] ||\r\n                this._byId[this.modelId(obj.attributes || obj)] ||\r\n                obj.cid && this._byId[obj.cid];\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].get.[function]","oldFunction":"function(obj) {\r\n            if (obj == null) return void 0;\r\n            return this._byId[obj.id != null ? obj.id : obj.cid || obj];\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[return].get.[function].[arg0]","newType":"any","oldType":"boolean | Backbone.Model | interface_509","containerType":"(obj: any) => string | number | interface_236","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return]._onModelEvent","newFunction":"function(event, model, collection, options) {\r\n            if (model) {\r\n                if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n                if (event === 'destroy') this.remove(model, options);\r\n                if (event === 'change') {\r\n                    var prevId = this.modelId(model.previousAttributes());\r\n                    var id = this.modelId(model.attributes);\r\n                    if (prevId !== id) {\r\n                        if (prevId != null) delete this._byId[prevId];\r\n                        if (id != null) this._byId[id] = model;\r\n                    }\r\n                }\r\n            }\r\n            this.trigger.apply(this, arguments);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return]._onModelEvent","oldFunction":"function(event, model, collection, options) {\r\n            if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n            if (event === 'destroy') this.remove(model, options);\r\n            if (model && event === 'change:' + model.idAttribute) {\r\n                delete this._byId[model.previous(model.idAttribute)];\r\n                if (model.id != null) this._byId[model.id] = model;\r\n            }\r\n            this.trigger.apply(this, arguments);\r\n        }","oldJSDoc":null,"type":"removedProperty","typePath":"window.Backbone.Collection.[constructor].[return]._onModelEvent.[function].[arg1]","key":"previous","isClass":false,"containerType":"// Seen as: model, models\ninterface interface_186 {\n    [index: number]: string | number | interface_268;\n    attributes: interface_196;\n    length: number;\n    previousAttributes: () => interface_194;\n    slice: () => Array<any>;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return]._onModelEvent","newFunction":"function(event, model, collection, options) {\r\n            if (model) {\r\n                if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n                if (event === 'destroy') this.remove(model, options);\r\n                if (event === 'change') {\r\n                    var prevId = this.modelId(model.previousAttributes());\r\n                    var id = this.modelId(model.attributes);\r\n                    if (prevId !== id) {\r\n                        if (prevId != null) delete this._byId[prevId];\r\n                        if (id != null) this._byId[id] = model;\r\n                    }\r\n                }\r\n            }\r\n            this.trigger.apply(this, arguments);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return]._onModelEvent","oldFunction":"function(event, model, collection, options) {\r\n            if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n            if (event === 'destroy') this.remove(model, options);\r\n            if (model && event === 'change:' + model.idAttribute) {\r\n                delete this._byId[model.previous(model.idAttribute)];\r\n                if (model.id != null) this._byId[model.id] = model;\r\n            }\r\n            this.trigger.apply(this, arguments);\r\n        }","oldJSDoc":null,"type":"removedProperty","typePath":"window.Backbone.Collection.[constructor].[return]._onModelEvent.[function].[arg1]","key":"idAttribute","isClass":false,"containerType":"// Seen as: model, models\ninterface interface_186 {\n    [index: number]: string | number | interface_268;\n    attributes: interface_196;\n    length: number;\n    previousAttributes: () => interface_194;\n    slice: () => Array<any>;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return]._onModelEvent","newFunction":"function(event, model, collection, options) {\r\n            if (model) {\r\n                if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n                if (event === 'destroy') this.remove(model, options);\r\n                if (event === 'change') {\r\n                    var prevId = this.modelId(model.previousAttributes());\r\n                    var id = this.modelId(model.attributes);\r\n                    if (prevId !== id) {\r\n                        if (prevId != null) delete this._byId[prevId];\r\n                        if (id != null) this._byId[id] = model;\r\n                    }\r\n                }\r\n            }\r\n            this.trigger.apply(this, arguments);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return]._onModelEvent","oldFunction":"function(event, model, collection, options) {\r\n            if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n            if (event === 'destroy') this.remove(model, options);\r\n            if (model && event === 'change:' + model.idAttribute) {\r\n                delete this._byId[model.previous(model.idAttribute)];\r\n                if (model.id != null) this._byId[model.id] = model;\r\n            }\r\n            this.trigger.apply(this, arguments);\r\n        }","oldJSDoc":null,"type":"removedProperty","typePath":"window.Backbone.Collection.[constructor].[return]._onModelEvent.[function].[arg1]","key":"id","isClass":false,"containerType":"// Seen as: model, models\ninterface interface_186 {\n    [index: number]: string | number | interface_268;\n    attributes: interface_196;\n    length: number;\n    previousAttributes: () => interface_194;\n    slice: () => Array<any>;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return]._onModelEvent","newFunction":"function(event, model, collection, options) {\r\n            if (model) {\r\n                if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n                if (event === 'destroy') this.remove(model, options);\r\n                if (event === 'change') {\r\n                    var prevId = this.modelId(model.previousAttributes());\r\n                    var id = this.modelId(model.attributes);\r\n                    if (prevId !== id) {\r\n                        if (prevId != null) delete this._byId[prevId];\r\n                        if (id != null) this._byId[id] = model;\r\n                    }\r\n                }\r\n            }\r\n            this.trigger.apply(this, arguments);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return]._onModelEvent","oldFunction":"function(event, model, collection, options) {\r\n            if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n            if (event === 'destroy') this.remove(model, options);\r\n            if (model && event === 'change:' + model.idAttribute) {\r\n                delete this._byId[model.previous(model.idAttribute)];\r\n                if (model.id != null) this._byId[model.id] = model;\r\n            }\r\n            this.trigger.apply(this, arguments);\r\n        }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Collection.[constructor].[return]._onModelEvent.[function].[arg1]","key":"previousAttributes","newType":"() => interface_194","isAny":false,"isClass":false,"containerType":"// Seen as: model, models\ninterface interface_186 {\n    [index: number]: string | number | interface_268;\n    attributes: interface_196;\n    length: number;\n    previousAttributes: () => interface_194;\n    slice: () => Array<any>;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return]._onModelEvent","newFunction":"function(event, model, collection, options) {\r\n            if (model) {\r\n                if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n                if (event === 'destroy') this.remove(model, options);\r\n                if (event === 'change') {\r\n                    var prevId = this.modelId(model.previousAttributes());\r\n                    var id = this.modelId(model.attributes);\r\n                    if (prevId !== id) {\r\n                        if (prevId != null) delete this._byId[prevId];\r\n                        if (id != null) this._byId[id] = model;\r\n                    }\r\n                }\r\n            }\r\n            this.trigger.apply(this, arguments);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return]._onModelEvent","oldFunction":"function(event, model, collection, options) {\r\n            if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n            if (event === 'destroy') this.remove(model, options);\r\n            if (model && event === 'change:' + model.idAttribute) {\r\n                delete this._byId[model.previous(model.idAttribute)];\r\n                if (model.id != null) this._byId[model.id] = model;\r\n            }\r\n            this.trigger.apply(this, arguments);\r\n        }","oldJSDoc":null,"type":"addedProperty","typePath":"window.Backbone.Collection.[constructor].[return]._onModelEvent.[function].[arg1]","key":"attributes","newType":"// Seen as: attrs\ninterface interface_196 {\n}\n\n","isAny":false,"isClass":false,"containerType":"// Seen as: model, models\ninterface interface_186 {\n    [index: number]: string | number | interface_268;\n    attributes: interface_196;\n    length: number;\n    previousAttributes: () => interface_194;\n    slice: () => Array<any>;\n}\n\n","containerDescription":"interface"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.History.[constructor].[return]._updateHash.[function]","newFunction":"function(location, fragment, replace) {\r\n            if (replace) {\r\n                var href = location.href.replace(/(javascript:|#).*$/, '');\r\n                location.replace(href + '#' + fragment);\r\n            } else {\r\n                // Some browsers require that `hash` contains a leading #.\r\n                location.hash = '#' + fragment;\r\n            }\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.History.[constructor].[return]._updateHash.[function]","oldFunction":"function(location, fragment, replace) {\r\n            if (replace) {\r\n                var href = location.href.replace(/(javascript:|#).*$/, '');\r\n                location.replace(href + '#' + fragment);\r\n            } else {\r\n                // Some browsers require that `hash` contains a leading #.\r\n                location.hash = '#' + fragment;\r\n            }\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.History.[constructor].[return]._updateHash.[function].[arg2]","newType":"boolean","oldType":"any","containerType":"(location: Location, fragment: string, replace: boolean) => void","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].get.[function]","newFunction":"function(obj) {\r\n            if (obj == null) return void 0;\r\n            return this._byId[obj] ||\r\n                this._byId[this.modelId(obj.attributes || obj)] ||\r\n                obj.cid && this._byId[obj.cid];\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].get.[function]","oldFunction":"function(obj) {\r\n            if (obj == null) return void 0;\r\n            return this._byId[obj.id != null ? obj.id : obj.cid || obj];\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[return].get.[function].[return]","newType":"string | number | interface_236","oldType":"// Seen as: existing, model\ninterface interface_510 {\n    cid: string | number | interface_508;\n    collection: Backbone.Collection;\n    hasChanged: (arg0: void) => any;\n    id: string | number | interface_508;\n    off: (arg0: void, arg1: void, arg2: void) => void;\n    set: (arg0: void, arg1: void) => void;\n    trigger: (arg0: void, arg1: void, arg2: void, arg3: void) => void;\n}\n\n","containerType":"(obj: any) => string | number | interface_236","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].pop.[function]","newFunction":"function(options) {\r\n            var model = this.at(this.length - 1);\r\n            return this.remove(model, options);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].pop.[function]","oldFunction":"function(options) {\r\n            var model = this.at(this.length - 1);\r\n            this.remove(model, options);\r\n            return model;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[return].pop.[function].[return]","newType":"Array<any>","oldType":"any","containerType":"(options: {changes: any, index: any, silent: any}) => Array<any>","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].sortBy.[function]","newFunction":"function(iteratee, context) {\r\n                return _[method](this[attribute], cb(iteratee, this), context);\r\n            }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].sortBy.[function]","oldFunction":"function(value, context) {\r\n            var iterator = _.isFunction(value) ? value : function(model) {\r\n                return model.get(value);\r\n            };\r\n            return _[method](this.models, iterator, context);\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[return].sortBy.[function].[arg0]","newType":"any","oldType":"(model: {get: (arg0: void) => any}) => void","containerType":"(iteratee: any, context: any) => Array<any>","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].remove.[function]","newFunction":"function(models, options) {\r\n            options = _.extend({}, options);\r\n            var singular = !_.isArray(models);\r\n            models = singular ? [models] : models.slice();\r\n            var removed = this._removeModels(models, options);\r\n            if (!options.silent && removed.length) {\r\n                options.changes = {added: [], merged: [], removed: removed};\r\n                this.trigger('update', this, options);\r\n            }\r\n            return singular ? removed[0] : removed;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].remove.[function]","oldFunction":"function(models, options) {\r\n            models = _.isArray(models) ? models.slice() : [models];\r\n            options || (options = {});\r\n            var i, l, index, model;\r\n            for (i = 0, l = models.length; i < l; i++) {\r\n                model = this.get(models[i]);\r\n                if (!model) continue;\r\n                delete this._byId[model.id];\r\n                delete this._byId[model.cid];\r\n                index = this.indexOf(model);\r\n                this.models.splice(index, 1);\r\n                this.length--;\r\n                if (!options.silent) {\r\n                    options.index = index;\r\n                    model.trigger('remove', model, this, options);\r\n                }\r\n                this._removeReference(model);\r\n            }\r\n            return this;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[return].remove.[function].[return]","newType":"Array<any>","oldType":"Backbone.Collection","containerType":"(models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].fetch.[function]","newFunction":"function(options) {\r\n            options = _.extend({parse: true}, options);\r\n            var success = options.success;\r\n            var collection = this;\r\n            options.success = function(resp) {\r\n                var method = options.reset ? 'reset' : 'set';\r\n                collection[method](resp, options);\r\n                if (success) success.call(options.context, collection, resp, options);\r\n                collection.trigger('sync', collection, resp, options);\r\n            };\r\n            wrapError(this, options);\r\n            return this.sync('read', this, options);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].fetch.[function]","oldFunction":"function(options) {\r\n            options = options ? _.clone(options) : {};\r\n            if (options.parse === void 0) options.parse = true;\r\n            var success = options.success;\r\n            var collection = this;\r\n            options.success = function(resp) {\r\n                var method = options.reset ? 'reset' : 'set';\r\n                collection[method](resp, options);\r\n                if (success) success(collection, resp, options);\r\n                collection.trigger('sync', collection, resp, options);\r\n            };\r\n            wrapError(this, options);\r\n            return this.sync('read', this, options);\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[return].fetch.[function].[arg0]","newType":"any","oldType":"// Seen as: options\ninterface interface_507 {\n    error: (arg0: void, arg1: void, arg2: void) => void;\n    parse: boolean;\n    reset: any;\n    success: (resp: void, arg1: void, arg2: void) => void;\n}\n\n","containerType":"(options: any) => JQueryXHR","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].shift.[function]","newFunction":"function(options) {\r\n            var model = this.at(0);\r\n            return this.remove(model, options);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].shift.[function]","oldFunction":"function(options) {\r\n            var model = this.at(0);\r\n            this.remove(model, options);\r\n            return model;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[return].shift.[function].[return]","newType":"Array<any>","oldType":"any","containerType":"(options: {changes: any, index: any, silent: any}) => Array<any>","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].at.[function]","newFunction":"function(index) {\r\n            if (index < 0) index += this.length;\r\n            return this.models[index];\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return].at.[function]","oldFunction":"function(index) {\r\n            return this.models[index];\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[return].at.[function].[return].[indexer]","newType":"string | number | interface_268","oldType":"// Seen as: obj\ninterface interface_508 {\n    cid: any;\n    id: string | number | interface_508;\n}\n\n","containerType":"// Seen as: models\ninterface interface_228 {\n    [index: number]: string | number | interface_268;\n    length: number;\n    slice: () => Array<any>;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return]._onModelEvent.[function]","newFunction":"function(event, model, collection, options) {\r\n            if (model) {\r\n                if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n                if (event === 'destroy') this.remove(model, options);\r\n                if (event === 'change') {\r\n                    var prevId = this.modelId(model.previousAttributes());\r\n                    var id = this.modelId(model.attributes);\r\n                    if (prevId !== id) {\r\n                        if (prevId != null) delete this._byId[prevId];\r\n                        if (id != null) this._byId[id] = model;\r\n                    }\r\n                }\r\n            }\r\n            this.trigger.apply(this, arguments);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.Backbone.Collection.[constructor].[return]._onModelEvent.[function]","oldFunction":"function(event, model, collection, options) {\r\n            if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n            if (event === 'destroy') this.remove(model, options);\r\n            if (model && event === 'change:' + model.idAttribute) {\r\n                delete this._byId[model.previous(model.idAttribute)];\r\n                if (model.id != null) this._byId[model.id] = model;\r\n            }\r\n            this.trigger.apply(this, arguments);\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.Backbone.Collection.[constructor].[return]._onModelEvent.[function].[arg1].slice.[function].[return].[indexer]","newType":"string | number | interface_188","oldType":"// Seen as: models, obj\ninterface interface_463 {\n    [index: number]: interface_508;\n    cid: any;\n    id: string | number | interface_508;\n    length: number;\n    slice: () => interface_463[];\n}\n\n","containerType":"Array<any>","containerDescription":"array-type"}],"newName":"Backbone.js","oldName":"Backbone.js","oldDeclaration":"declare module Backbone {\n    export var $: JQueryStatic;\n    export class Collection {\n        constructor (models: Array<any> | string, options: interface_504);\n        static extend: (protoProps: {constructor: {__super__: any, prototype: any}}, staticProps: any) => interface_484;\n        _byId: any;\n        _onModelEvent: (event: string, model: interface_466, collection: Backbone.Collection | Backbone.Model | interface_472, options: {index: any, silent: any}) => void;\n        _prepareModel: (attrs: any, options: any) => any;\n        _removeReference: (model: interface_505) => void;\n        _reset: () => void;\n        add: (models: any, options: any) => Backbone.Collection;\n        all: () => any;\n        any: () => any;\n        at: (index: number) => interface_461;\n        bind: typeof Backbone.bind;\n        chain: () => any;\n        clone: () => Backbone.Collection;\n        collect: () => any;\n        contains: () => any;\n        countBy: (value: (model: {get: (arg0: void) => any}) => void, context: any) => any;\n        create: (model: any, options: interface_506) => boolean | {collection: Backbone.Collection, save: void} | Backbone.Model;\n        detect: () => any;\n        drop: () => any;\n        each: () => any;\n        every: () => any;\n        fetch: (options: interface_507) => JQueryXHR;\n        filter: () => any;\n        find: () => any;\n        findWhere: (attrs: any) => Array<any>;\n        first: () => any;\n        foldl: () => any;\n        foldr: () => any;\n        forEach: () => any;\n        get: (obj: boolean | Backbone.Model | interface_509) => interface_510;\n        groupBy: (value: (model: {get: (arg0: void) => any}) => void, context: any) => any;\n        head: () => any;\n        include: () => any;\n        indexOf: () => number;\n        initial: () => any;\n        initialize: () => void;\n        inject: () => any;\n        invoke: () => any;\n        isEmpty: () => any;\n        last: () => any;\n        lastIndexOf: () => any;\n        length: number;\n        listenTo: typeof Backbone.listenTo;\n        listenToOnce: typeof Backbone.listenToOnce;\n        map: () => any;\n        max: () => any;\n        min: () => any;\n        model: typeof Backbone.Model;\n        models: Array<any>;\n        off: typeof Backbone.off;\n        on: typeof Backbone.bind;\n        once: typeof Backbone.once;\n        parse: (resp: any, options: any) => any;\n        pluck: (attr: any) => any;\n        pop: (options: {index: any, silent: any}) => any;\n        push: (model: any, options: interface_511) => boolean | {collection: Backbone.Collection, save: void} | Backbone.Model;\n        reduce: () => any;\n        reduceRight: () => any;\n        reject: () => any;\n        remove: (models: Text | Object | JQueryPromiseCallback<any> | JQuery | string | Array<any> | {idAttribute: any, previous: void} | Element, options: any) => Backbone.Collection;\n        reset: (models: Array<any> | string, options: any) => Backbone.Collection;\n        rest: () => any;\n        select: () => any;\n        set: (models: any, options: any) => Backbone.Collection;\n        shift: (options: {index: any, silent: any}) => any;\n        shuffle: () => any;\n        size: () => any;\n        slice: (begin: number, end: number) => string | Element | Text | Object | JQueryPromiseCallback<any> | JQuery | any[];\n        some: () => any;\n        sort: (options: {silent: boolean}) => Backbone.Collection;\n        sortBy: (value: (model: {get: (arg0: void) => any}) => void, context: Backbone.Collection) => Array<any>;\n        sortedIndex: (model: any, value: (model: {get: (arg0: void) => any}) => void, context: any) => number;\n        stopListening: typeof Backbone.stopListening;\n        sync: () => JQueryXHR;\n        tail: () => any;\n        take: () => any;\n        toArray: () => any;\n        toJSON: (options: any) => any;\n        trigger: typeof Backbone.trigger;\n        unbind: typeof Backbone.off;\n        unshift: (model: any, options: interface_511) => boolean | {collection: Backbone.Collection, save: void} | Backbone.Model;\n        where: (attrs: any, first: boolean) => Array<any>;\n        without: () => any;\n    }\n    export module Events {\n        export var bind: typeof Backbone.bind;\n        export var listenTo: typeof Backbone.listenTo;\n        export var listenToOnce: typeof Backbone.listenToOnce;\n        export var off: typeof Backbone.off;\n        export var on: typeof Backbone.bind;\n        export var once: typeof Backbone.once;\n        export var stopListening: typeof Backbone.stopListening;\n        export var trigger: typeof Backbone.trigger;\n        export var unbind: typeof Backbone.off;\n    }\n    export class History {\n        constructor ();\n        static extend: (protoProps: {constructor: {__super__: any, prototype: any}}, staticProps: any) => interface_484;\n        static started: boolean;\n        _updateHash: (location: Location, fragment: string, replace: any) => void;\n        bind: typeof Backbone.bind;\n        checkUrl: (e: any) => boolean;\n        getFragment: (fragment: string, forcePushState: boolean) => string;\n        getHash: (window: any) => string;\n        handlers: Array<any>;\n        history: History;\n        interval: number;\n        listenTo: typeof Backbone.listenTo;\n        listenToOnce: typeof Backbone.listenToOnce;\n        loadUrl: (fragmentOverride: string) => boolean;\n        location: Location;\n        navigate: (fragment: string, options: boolean | interface_513) => boolean;\n        off: typeof Backbone.off;\n        on: typeof Backbone.bind;\n        once: typeof Backbone.once;\n        route: (route: RegExp, callback: (fragment: void) => void) => void;\n        start: (options: any) => boolean;\n        stop: () => void;\n        stopListening: typeof Backbone.stopListening;\n        trigger: typeof Backbone.trigger;\n        unbind: typeof Backbone.off;\n    }\n    export class Model {\n        constructor (attributes: boolean | {collection: Backbone.Collection, save: void} | Backbone.Model, options: any);\n        static extend: (protoProps: {constructor: {__super__: any, prototype: any}}, staticProps: any) => interface_484;\n        _changing: boolean;\n        _pending: boolean;\n        _previousAttributes: any;\n        _validate: (attrs: any, options: any) => boolean;\n        attributes: any;\n        bind: typeof Backbone.bind;\n        changed: void;\n        changedAttributes: (diff: any) => boolean;\n        cid: string;\n        clear: (options: any) => boolean | Backbone.Model;\n        clone: () => Backbone.Model;\n        destroy: (options: Backbone.Model | interface_493) => boolean | JQueryXHR;\n        escape: (attr: string | number) => string;\n        fetch: (options: interface_514) => JQueryXHR;\n        get: (attr: string | number) => string;\n        has: (attr: string | number) => boolean;\n        hasChanged: (attr: string) => boolean;\n        idAttribute: string;\n        initialize: () => void;\n        invert: () => any;\n        isNew: () => boolean;\n        isValid: (options: any) => boolean;\n        keys: () => any;\n        listenTo: typeof Backbone.listenTo;\n        listenToOnce: typeof Backbone.listenToOnce;\n        off: typeof Backbone.off;\n        omit: () => any;\n        on: typeof Backbone.bind;\n        once: typeof Backbone.once;\n        pairs: () => any;\n        parse: (resp: any, options: any) => any;\n        pick: () => any;\n        previous: (attr: string | number) => any;\n        previousAttributes: () => any;\n        save: (key: string | interface_488, val: interface_515, options: any) => boolean | JQueryXHR;\n        set: (key: any, val: any, options: any) => boolean | Backbone.Model;\n        stopListening: typeof Backbone.stopListening;\n        sync: () => JQueryXHR;\n        toJSON: (options: any) => any;\n        trigger: typeof Backbone.trigger;\n        unbind: typeof Backbone.off;\n        unset: (attr: string | interface_491, options: any) => boolean | Backbone.Model;\n        url: () => any;\n        validationError: void;\n        values: () => any;\n    }\n    export class Router {\n        constructor (options: {routes: any});\n        static extend: (protoProps: {constructor: {__super__: any, prototype: any}}, staticProps: any) => interface_484;\n        _bindRoutes: () => void;\n        _extractParameters: (route: RegExp, fragment: any) => Element | Text | Object | JQueryPromiseCallback<any> | JQuery | string | any[];\n        _routeToRegExp: (route: RegExp | string | number) => string | number | RegExp;\n        bind: typeof Backbone.bind;\n        initialize: () => void;\n        listenTo: typeof Backbone.listenTo;\n        listenToOnce: typeof Backbone.listenToOnce;\n        navigate: (fragment: string | number, options: boolean | {replace: any, trigger: any}) => Backbone.Router;\n        off: typeof Backbone.off;\n        on: typeof Backbone.bind;\n        once: typeof Backbone.once;\n        route: (route: string | number | RegExp, name: {apply: (arg0: void, arg1: void) => any} | string, callback: string | {apply: (arg0: void, arg1: void) => any}) => Backbone.Router;\n        stopListening: typeof Backbone.stopListening;\n        trigger: typeof Backbone.trigger;\n        unbind: typeof Backbone.off;\n    }\n    export var VERSION: string;\n    export class View {\n        constructor (options: any);\n        static extend: (protoProps: {constructor: {__super__: any, prototype: any}}, staticProps: any) => interface_484;\n        $: (selector: any) => any;\n        $el: {\"0\": HTMLDivElement, length: number};\n        _configure: (options: any) => void;\n        _ensureElement: () => void;\n        bind: typeof Backbone.bind;\n        cid: string;\n        delegateEvents: (events: any) => Backbone.View;\n        el: HTMLDivElement;\n        initialize: () => void;\n        listenTo: typeof Backbone.listenTo;\n        listenToOnce: typeof Backbone.listenToOnce;\n        off: typeof Backbone.off;\n        on: typeof Backbone.bind;\n        once: typeof Backbone.once;\n        options: any;\n        remove: () => Backbone.View;\n        render: () => Backbone.View;\n        setElement: (element: any, delegate: boolean) => Backbone.View;\n        stopListening: typeof Backbone.stopListening;\n        tagName: string;\n        trigger: typeof Backbone.trigger;\n        unbind: typeof Backbone.off;\n        undelegateEvents: () => Backbone.View;\n    }\n    export function ajax(): JQueryXHR;\n    export function bind(name: string, callback: {_callback: {apply: void}}, context: any): Backbone.Model;\n    export var emulateHTTP: boolean;\n    export var emulateJSON: boolean;\n    export var history: Backbone.History;\n    export function listenTo(obj: interface_452, name: any, callback: Backbone.Model): Backbone.Model;\n    export function listenToOnce(obj: interface_481, name: any, callback: Backbone.Model): Backbone.Model;\n    export function noConflict(): any;\n    export function off(name: string, callback: interface_517, context: interface_516): Backbone.Model;\n    export var on: typeof Backbone.bind;\n    export function once(name: string, callback: {apply: (arg0: void, arg1: void) => void}, context: {apply: (arg0: void, arg1: void) => void}): Backbone.Model;\n    export function stopListening(obj: {_listenerId: string | number}, name: any, callback: Backbone.Model): Backbone.Model;\n    export function sync(method: string, model: interface_518, options: interface_519): JQueryXHR;\n    export function trigger(name: string): Backbone.Model;\n    export var unbind: typeof Backbone.off;\n}\n// Seen as: options\ninterface interface_504 {\n    comparator: any;\n    model: typeof Backbone.Model;\n    url: () => any;\n}\n\n// Seen as: child\ninterface interface_484 {\n    () : any;\n    __super__: any;\n}\n\n// Seen as: model, models\ninterface interface_466 {\n    [index: number]: interface_508;\n    id: string | number;\n    idAttribute: string | number;\n    length: number;\n    previous: (arg0: void) => string | number;\n    slice: () => interface_463[];\n}\n\n// Seen as: obj\ninterface interface_472 {\n    _byId: interface_473;\n    _events: interface_474;\n}\n\n// Seen as: model\ninterface interface_505 {\n    cid: void;\n    collection: Backbone.Collection;\n    id: void;\n    off: (arg0: void, arg1: void, arg2: void) => void;\n    trigger: void;\n}\n\n// Seen as: models\ninterface interface_461 {\n    [index: number]: interface_508;\n    length: number;\n    slice: () => interface_463[];\n}\n\n// Seen as: arg1, options\ninterface interface_506 {\n    add: any;\n    at: number;\n    collection: any;\n    index: any;\n    merge: any;\n    parse: any;\n    remove: any;\n    silent: any;\n    sort: boolean;\n    success: (resp: void, arg1: void, arg2: void) => void;\n    unset: any;\n    validate: any;\n    wait: any;\n}\n\n// Seen as: options\ninterface interface_507 {\n    error: (arg0: void, arg1: void, arg2: void) => void;\n    parse: boolean;\n    reset: any;\n    success: (resp: void, arg1: void, arg2: void) => void;\n}\n\n// Seen as: obj\ninterface interface_508 {\n    cid: any;\n    id: string | number | interface_508;\n}\n\n// Seen as: arg0, attrs, model, obj\ninterface interface_509 {\n    attributes: void;\n    cid: any;\n    collection: Backbone.Collection;\n    id: string | number | interface_508;\n    on: void;\n    save: void;\n    trigger: void;\n}\n\n// Seen as: existing, model\ninterface interface_510 {\n    cid: string | number | interface_508;\n    collection: Backbone.Collection;\n    hasChanged: (arg0: void) => any;\n    id: string | number | interface_508;\n    off: (arg0: void, arg1: void, arg2: void) => void;\n    set: (arg0: void, arg1: void) => void;\n    trigger: (arg0: void, arg1: void, arg2: void, arg3: void) => void;\n}\n\n// Seen as: arg1, options\ninterface interface_511 {\n    add: any;\n    at: number;\n    collection: any;\n    index: any;\n    merge: any;\n    parse: any;\n    remove: any;\n    silent: any;\n    sort: boolean;\n    unset: any;\n    validate: any;\n}\n\n// Seen as: options\ninterface interface_512 {\n    replace: any;\n    trigger: interface_512;\n}\n\n// Seen as: options\ninterface interface_513 {\n    replace: any;\n    trigger: {replace: any, trigger: interface_512};\n}\n\n// Seen as: model, obj, options\ninterface interface_493 {\n    _events: interface_474;\n    collection: any;\n    error: (arg0: void, arg1: void, arg2: void) => void;\n    id: any;\n    isNew: () => boolean;\n    success: (resp: void, arg1: void, arg2: void) => void;\n    sync: (arg0: void, arg1: void, arg2: void) => JQueryXHR;\n    trigger: (name: string, arg1: void, arg2: void, arg3: void) => Backbone.Model;\n    wait: any;\n}\n\n// Seen as: options\ninterface interface_514 {\n    error: (arg0: void, arg1: void, arg2: void) => void;\n    parse: boolean;\n    silent: any;\n    success: (resp: void, arg1: void, arg2: void) => boolean;\n    unset: any;\n    validate: any;\n}\n\n// Seen as: attrs\ninterface interface_488 {\n}\n\n// Seen as: options\ninterface interface_515 {\n    attrs: any;\n    error: (arg0: void, arg1: void, arg2: void) => void;\n    parse: any;\n    patch: any;\n    silent: any;\n    success: (arg0: void, arg1: void, arg2: void) => void;\n    unset: any;\n    validate: any;\n    wait: any;\n}\n\n// Seen as: attrs\ninterface interface_491 {\n}\n\n// Seen as: obj\ninterface interface_452 {\n    _listenerId: string;\n}\n\n// Seen as: obj\ninterface interface_481 {\n    _listenerId: string;\n}\n\n// Seen as: callback, context\ninterface interface_516 {\n    _callback: interface_516;\n}\n\n// Seen as: callback, context, once\ninterface interface_517 {\n    _callback: {_callback: interface_516, apply: void};\n}\n\n// Seen as: model\ninterface interface_518 {\n    toJSON: (arg0: void) => any;\n    trigger: (arg0: void, arg1: void, arg2: void, arg3: void) => void;\n}\n\n// Seen as: options\ninterface interface_519 {\n    attrs: any;\n    beforeSend: (xhr: void) => any;\n    data: any;\n    emulateHTTP: any;\n    emulateJSON: any;\n    url: any;\n    xhr: JQueryXHR;\n}\n\n// Seen as: models, obj\ninterface interface_463 {\n    [index: number]: interface_508;\n    cid: any;\n    id: string | number | interface_508;\n    length: number;\n    slice: () => interface_463[];\n}\n\ninterface interface_473 {\n}\n\ninterface interface_474 {\n    all: interface_479;\n}\n\n// Seen as: events\ninterface interface_479 {\n    [index: number]: {callback: interface_520, ctx: any};\n    length: number;\n}\n\ninterface interface_520 {\n    apply: (arg0: void, arg1: void) => void;\n    call: (arg0: void, arg1: void, arg2: void, arg3: void) => void;\n}\n\n","newDeclaration":"declare module Backbone {\n    export var $: JQueryStatic;\n    export class Collection {\n        constructor (models: string | number | Array<any> | interface_269, options: interface_270);\n        static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n        _addReference: (model: Backbone.Model | interface_272 | boolean, options: any) => void;\n        _byId: any;\n        _isModel: (model: any) => boolean;\n        _onModelEvent: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void;\n        _prepareModel: (attrs: any, options: any) => any;\n        _removeModels: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => interface_242[];\n        _removeReference: (model: interface_273, options: any) => void;\n        _reset: () => void;\n        add: (models: any, options: any) => any;\n        all: (iteratee: any, context: any) => any;\n        any: (iteratee: any, context: any) => any;\n        at: (index: number) => interface_228;\n        bind: typeof Backbone.bind;\n        chain: () => any;\n        clone: () => Backbone.Collection;\n        collect: (iteratee: any, context: any) => any;\n        contains: (iteratee: any, context: any) => any;\n        countBy: (iteratee: any, context: any) => any;\n        create: (model: any, options: boolean | interface_274) => Backbone.Model | interface_272 | boolean;\n        detect: (iteratee: any, context: any) => any;\n        difference: () => any;\n        drop: (iteratee: any, context: any) => any;\n        each: (iteratee: any, context: any) => any;\n        every: (iteratee: any, context: any) => any;\n        fetch: (options: any) => JQueryXHR;\n        filter: (iteratee: any, context: any) => any;\n        find: (iteratee: any, context: any) => any;\n        findIndex: (iteratee: any, context: any) => any;\n        findLastIndex: (iteratee: any, context: any) => any;\n        findWhere: (attrs: any) => any;\n        first: (iteratee: any, context: any) => any;\n        foldl: () => any;\n        foldr: () => any;\n        forEach: (iteratee: any, context: any) => any;\n        get: (obj: any) => string | number | interface_236;\n        groupBy: (iteratee: any, context: any) => any;\n        has: (obj: string | number | interface_268) => boolean;\n        head: (iteratee: any, context: any) => any;\n        include: (iteratee: any, context: any) => any;\n        includes: (iteratee: any, context: any) => any;\n        indexBy: (iteratee: any, context: any) => any;\n        indexOf: (iteratee: {attributes: void, cid: void, trigger: void}, context: any) => number;\n        initial: (iteratee: any, context: any) => any;\n        initialize: () => void;\n        inject: () => any;\n        invoke: () => any;\n        isEmpty: () => any;\n        last: (iteratee: any, context: any) => any;\n        lastIndexOf: (iteratee: any, context: any) => any;\n        length: number;\n        listenTo: typeof Backbone.listenTo;\n        listenToOnce: typeof Backbone.listenToOnce;\n        map: (iteratee: string | number | ((model: void) => any), context: any) => any;\n        max: (iteratee: any, context: any) => any;\n        min: (iteratee: any, context: any) => any;\n        model: typeof Backbone.Model;\n        modelId: (attrs: boolean | Backbone.Model | interface_174) => string | number | interface_268;\n        models: Array<any>;\n        off: typeof Backbone.off;\n        on: typeof Backbone.bind;\n        once: typeof Backbone.once;\n        parse: (resp: any, options: any) => any;\n        partition: (iteratee: any, context: any) => any;\n        pluck: (attr: string | number) => any;\n        pop: (options: {changes: any, index: any, silent: any}) => Array<any>;\n        push: (model: string | number | interface_217, options: any) => any;\n        reduce: () => any;\n        reduceRight: () => any;\n        reject: (iteratee: any, context: any) => any;\n        remove: (models: Array<any> | {attributes: void, previousAttributes: void}, options: any) => Array<any>;\n        reset: (models: any, options: any) => any;\n        rest: (iteratee: any, context: any) => any;\n        sample: (iteratee: any, context: any) => any;\n        select: (iteratee: any, context: any) => any;\n        set: (models: any, options: any) => any;\n        shift: (options: {changes: any, index: any, silent: any}) => Array<any>;\n        shuffle: () => any;\n        size: () => any;\n        slice: () => any;\n        some: (iteratee: any, context: any) => any;\n        sort: (options: {silent: boolean}) => Backbone.Collection;\n        sortBy: (iteratee: any, context: any) => Array<any>;\n        stopListening: typeof Backbone.stopListening;\n        sync: () => JQueryXHR;\n        tail: (iteratee: any, context: any) => any;\n        take: (iteratee: any, context: any) => any;\n        toArray: () => any;\n        toJSON: (options: any) => any;\n        trigger: typeof Backbone.trigger;\n        unbind: typeof Backbone.off;\n        unshift: (model: string | number | interface_217, options: any) => any;\n        where: (attrs: any, first: boolean) => any;\n        without: () => any;\n    }\n    export module Events {\n        export var bind: typeof Backbone.bind;\n        export var listenTo: typeof Backbone.listenTo;\n        export var listenToOnce: typeof Backbone.listenToOnce;\n        export var off: typeof Backbone.off;\n        export var on: typeof Backbone.bind;\n        export var once: typeof Backbone.once;\n        export var stopListening: typeof Backbone.stopListening;\n        export var trigger: typeof Backbone.trigger;\n        export var unbind: typeof Backbone.off;\n    }\n    export class History {\n        constructor ();\n        static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n        static started: boolean;\n        _updateHash: (location: Location, fragment: string, replace: boolean) => void;\n        atRoot: () => boolean;\n        bind: typeof Backbone.bind;\n        checkUrl: (e: any) => boolean;\n        decodeFragment: (fragment: string) => string;\n        getFragment: (fragment: string) => string;\n        getHash: (window: any) => string;\n        getPath: () => string | number;\n        getSearch: () => string;\n        handlers: Array<any>;\n        history: History;\n        interval: number;\n        listenTo: typeof Backbone.listenTo;\n        listenToOnce: typeof Backbone.listenToOnce;\n        loadUrl: (fragment: string) => boolean;\n        location: Location;\n        matchRoot: () => boolean;\n        navigate: (fragment: string, options: boolean | {replace: boolean, trigger: boolean}) => boolean;\n        off: typeof Backbone.off;\n        on: typeof Backbone.bind;\n        once: typeof Backbone.once;\n        route: (route: RegExp, callback: (fragment: void) => void) => void;\n        start: (options: any) => boolean;\n        stop: () => void;\n        stopListening: typeof Backbone.stopListening;\n        trigger: typeof Backbone.trigger;\n        unbind: typeof Backbone.off;\n    }\n    export class Model {\n        constructor (attributes: Backbone.Model | interface_272 | boolean, options: any);\n        static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n        _changing: boolean;\n        _pending: boolean;\n        _previousAttributes: any;\n        _validate: (attrs: any, options: any) => boolean;\n        attributes: any;\n        bind: typeof Backbone.bind;\n        chain: () => any;\n        changed: void;\n        changedAttributes: (diff: any) => boolean;\n        cid: string;\n        cidPrefix: string;\n        clear: (options: any) => Backbone.Model | boolean;\n        clone: () => Backbone.Model;\n        destroy: (options: interface_276) => boolean | JQueryXHR;\n        escape: (attr: string | number) => string;\n        fetch: (options: any) => JQueryXHR;\n        get: (attr: string) => string;\n        has: (attr: string) => boolean;\n        hasChanged: (attr: string) => boolean;\n        idAttribute: string;\n        initialize: () => void;\n        invert: () => any;\n        isEmpty: () => any;\n        isNew: () => boolean;\n        isValid: (options: any) => boolean;\n        keys: () => any;\n        listenTo: typeof Backbone.listenTo;\n        listenToOnce: typeof Backbone.listenToOnce;\n        matches: (attrs: Array<any> | Function | Element | Text | Object | JQueryPromiseCallback<any> | JQuery | string) => boolean;\n        off: typeof Backbone.off;\n        omit: () => any;\n        on: typeof Backbone.bind;\n        once: typeof Backbone.once;\n        pairs: () => any;\n        parse: (resp: any, options: any) => any;\n        pick: () => any;\n        previous: (attr: string | number) => any;\n        previousAttributes: () => any;\n        save: (key: string | number | interface_261, val: boolean | interface_278, options: any) => boolean | JQueryXHR;\n        set: (key: any, val: any, options: any) => Backbone.Model | boolean;\n        stopListening: typeof Backbone.stopListening;\n        sync: () => boolean | JQueryXHR;\n        toJSON: (options: any) => any;\n        trigger: typeof Backbone.trigger;\n        unbind: typeof Backbone.off;\n        unset: (attr: string | number | interface_257, options: any) => Backbone.Model | boolean;\n        url: () => any;\n        validationError: void;\n        values: () => any;\n    }\n    export class Router {\n        constructor (options: {routes: any});\n        static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n        _bindRoutes: () => void;\n        _extractParameters: (route: RegExp, fragment: any) => string | Element | Object | Text | JQueryPromiseCallback<any> | JQuery | any[];\n        _routeToRegExp: (route: RegExp | string | number) => string | number | RegExp;\n        bind: typeof Backbone.bind;\n        execute: (callback: string | {apply: (arg0: void, arg1: void) => void}, args: string | Element | Object | Text | JQueryPromiseCallback<any> | JQuery | any[], name: string) => boolean;\n        initialize: () => void;\n        listenTo: typeof Backbone.listenTo;\n        listenToOnce: typeof Backbone.listenToOnce;\n        navigate: (fragment: string, options: boolean | {replace: any, trigger: any}) => Backbone.Router;\n        off: typeof Backbone.off;\n        on: typeof Backbone.bind;\n        once: typeof Backbone.once;\n        route: (route: string | number | RegExp, name: {apply: (arg0: void, arg1: void) => void} | string, callback: string | {apply: (arg0: void, arg1: void) => void}) => Backbone.Router;\n        stopListening: typeof Backbone.stopListening;\n        trigger: typeof Backbone.trigger;\n        unbind: typeof Backbone.off;\n    }\n    export var VERSION: string;\n    export class View {\n        constructor (options: any);\n        static extend: (protoProps: interface_271, staticProps: any) => interface_252;\n        $: (selector: any) => any;\n        $el: interface_279;\n        _createElement: (tagName: any) => any;\n        _ensureElement: () => void;\n        _removeElement: () => void;\n        _setAttributes: (attributes: any) => void;\n        _setElement: (el: any) => void;\n        bind: typeof Backbone.bind;\n        cid: string;\n        delegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n        delegateEvents: (events: any) => Backbone.View;\n        el: HTMLDivElement;\n        initialize: () => void;\n        listenTo: typeof Backbone.listenTo;\n        listenToOnce: typeof Backbone.listenToOnce;\n        off: typeof Backbone.off;\n        on: typeof Backbone.bind;\n        once: typeof Backbone.once;\n        remove: () => Backbone.View;\n        render: () => Backbone.View;\n        setElement: (element: any) => Backbone.View;\n        stopListening: typeof Backbone.stopListening;\n        tagName: string;\n        trigger: typeof Backbone.trigger;\n        unbind: typeof Backbone.off;\n        undelegate: (eventName: string | number, selector: any, listener: any) => Backbone.View;\n        undelegateEvents: () => Backbone.View;\n    }\n    export function ajax(): boolean | JQueryXHR;\n    export function bind(name: string | interface_180, callback: (event: string, model: interface_186, collection: Backbone.Model | Backbone.Collection | interface_202, options: {changes: any, index: any, silent: any}) => void, context: Backbone.Collection): Backbone.Model | interface_280;\n    export var emulateHTTP: boolean;\n    export var emulateJSON: boolean;\n    export var history: Backbone.History;\n    export function listenTo(obj: {_events: any, _listenId: string, _listeners: any}, name: string | interface_214, callback: any): Backbone.Model;\n    export function listenToOnce(obj: {_events: any, _listenId: any, _listeners: any}, name: string | interface_231, callback: any): Backbone.Model;\n    export function noConflict(): any;\n    export function off(name: string | interface_231, callback: any, context: any): Backbone.Model;\n    export var on: typeof Backbone.bind;\n    export function once(name: string | interface_231, callback: any, context: any): Backbone.Model | interface_281;\n    export function stopListening(obj: {_listenId: string | number}, name: any, callback: any): Backbone.Model;\n    export function sync(method: string, model: interface_282, options: interface_283): boolean | JQueryXHR;\n    export function trigger(name: string | interface_247): Backbone.Model;\n    export var unbind: typeof Backbone.off;\n}\n// Seen as: arg0, attrs, existing, model, models, obj\ninterface interface_169 {\n    attributes: string | number | interface_171;\n    cid: string | number | interface_268;\n    collection: any;\n    hasChanged: (arg0: void) => boolean;\n    length: number;\n    on: (arg0: void, arg1: void, arg2: void) => void;\n    parse: (arg0: void, arg1: void) => string | number | interface_173;\n    save: (arg0: void, arg1: void) => void;\n    set: (arg0: void, arg1: void) => void;\n    slice: () => string | number | Array<any> | interface_284;\n    trigger: (arg0: void, arg1: void, arg2: void, arg3: void) => void;\n}\n\n// Seen as: obj\ninterface interface_268 {\n    attributes: any;\n    cid: string | number | interface_268;\n}\n\n// Seen as: arg0, attrs, existing, model, models, obj\ninterface interface_173 {\n    [index: number]: string | number | interface_162;\n    attributes: string | number | interface_169;\n    cid: string | number | interface_268;\n    collection: any;\n    hasChanged: (arg0: void) => boolean;\n    length: number;\n    on: (arg0: void, arg1: void, arg2: void) => void;\n    parse: (arg0: void, arg1: void) => string | number | interface_173;\n    save: (arg0: void, arg1: void) => void;\n    set: (arg0: void, arg1: void) => void;\n    slice: () => string | number | Array<any> | interface_284;\n    trigger: (arg0: void, arg1: void, arg2: void, arg3: void) => void;\n}\n\n// Seen as: arg0, attrs, existing, model, models, obj\ninterface interface_269 {\n    attributes: string | number | interface_169;\n    cid: string | number | interface_268;\n    collection: any;\n    hasChanged: (arg0: void) => boolean;\n    on: (arg0: void, arg1: void, arg2: void) => void;\n    parse: (arg0: void, arg1: void) => string | number | interface_173;\n    save: (arg0: void, arg1: void) => void;\n    set: (arg0: void, arg1: void) => void;\n    trigger: (arg0: void, arg1: void, arg2: void, arg3: void) => void;\n}\n\n// Seen as: options\ninterface interface_270 {\n    comparator: Function;\n    model: typeof Backbone.Model;\n}\n\n// Seen as: protoProps\ninterface interface_271 {\n    constructor: {__super__: any, prototype: {constructor: any}};\n}\n\n// Seen as: child\ninterface interface_252 {\n    () : any;\n    __super__: any;\n}\n\n// Seen as: arg0, attrs, model\ninterface interface_272 {\n    attributes: void;\n    cid: void;\n    collection: Backbone.Collection;\n    save: void;\n    trigger: void;\n}\n\n// Seen as: model, models\ninterface interface_186 {\n    [index: number]: string | number | interface_268;\n    attributes: interface_196;\n    length: number;\n    previousAttributes: () => interface_194;\n    slice: () => Array<any>;\n}\n\n// Seen as: instance\ninterface interface_202 {\n    _events: string | interface_213;\n    _isModel: (arg0: void) => any;\n}\n\n// Seen as: removed\ninterface interface_242 {\n    [index: number]: interface_240;\n    length: any;\n}\n\n// Seen as: attrs\ninterface interface_220 {\n}\n\n// Seen as: model\ninterface interface_273 {\n    attributes: interface_220;\n    cid: string | number;\n    collection: Backbone.Collection;\n    off: (arg0: void, arg1: void, arg2: void) => void;\n    trigger: void;\n}\n\n// Seen as: models\ninterface interface_228 {\n    [index: number]: string | number | interface_268;\n    length: number;\n    slice: () => Array<any>;\n}\n\n// Seen as: arg1, options\ninterface interface_274 {\n    add: any;\n    at: number;\n    changes: any;\n    collection: any;\n    index: any;\n    merge: any;\n    parse: any;\n    remove: any;\n    silent: any;\n    sort: boolean;\n    success: (m: void, resp: void, callbackOpts: void) => void;\n    unset: any;\n    validate: any;\n    wait: any;\n}\n\n// Seen as: arg0, attrs, existing, model, models, obj\ninterface interface_236 {\n    [index: number]: string | number | interface_162;\n    attributes: string | number | interface_169;\n    cid: string | number | interface_268;\n    collection: Backbone.Collection;\n    hasChanged: (arg0: void) => boolean;\n    length: number;\n    off: (arg0: void, arg1: void, arg2: void) => void;\n    on: (arg0: void, arg1: void, arg2: void) => void;\n    parse: (arg0: void, arg1: void) => string | number | interface_173;\n    save: (arg0: void, arg1: void) => void;\n    set: (arg0: void, arg1: void) => void;\n    slice: () => string | number | Array<any> | interface_284;\n    trigger: (arg0: void, arg1: void, arg2: void, arg3: void) => void;\n}\n\n// Seen as: arg0, attrs, model\ninterface interface_174 {\n    attributes: void;\n    cid: void;\n    collection: Backbone.Collection;\n    save: void;\n    trigger: void;\n}\n\n// Seen as: arg0, attrs, existing, model, models, obj\ninterface interface_217 {\n    [index: number]: string | number | interface_162;\n    attributes: string | number | interface_169;\n    cid: string | number | interface_268;\n    collection: any;\n    hasChanged: (arg0: void) => boolean;\n    length: number;\n    on: (arg0: void, arg1: void, arg2: void) => void;\n    parse: (arg0: void, arg1: void) => string | number | interface_173;\n    save: (arg0: void, arg1: void) => void;\n    set: (arg0: void, arg1: void) => void;\n    slice: () => string | number | Array<any> | interface_284;\n    trigger: (arg0: void, arg1: void, arg2: void, arg3: void) => void;\n}\n\n// Seen as: error\ninterface interface_275 {\n    call: (arg0: void, arg1: void, arg2: void, arg3: void) => void;\n}\n\n// Seen as: options\ninterface interface_276 {\n    context: any;\n    error: interface_275;\n    success: Function;\n    wait: any;\n}\n\n// Seen as: attrs\ninterface interface_261 {\n}\n\n// Seen as: success\ninterface interface_277 {\n    call: (arg0: void, arg1: void, arg2: void, arg3: void) => void;\n}\n\n// Seen as: options\ninterface interface_278 {\n    attrs: any;\n    context: any;\n    error: interface_275;\n    parse: any;\n    patch: any;\n    silent: any;\n    success: interface_277;\n    unset: any;\n    validate: any;\n    wait: any;\n}\n\n// Seen as: attrs\ninterface interface_257 {\n}\n\ninterface interface_279 {\n    \"0\": HTMLDivElement;\n    context: HTMLDivElement;\n    length: number;\n}\n\n// Seen as: arg0, arg1, events, map, name, objEvents\ninterface interface_180 {\n    all: void;\n}\n\n// Seen as: obj\ninterface interface_280 {\n    _events: {all: void};\n    _listenId: string;\n    _listeners: any;\n}\n\n// Seen as: arg0, arg1, events, map, name, objEvents\ninterface interface_214 {\n    all: void;\n}\n\n// Seen as: name\ninterface interface_231 {\n}\n\n// Seen as: obj\ninterface interface_281 {\n    _events: {all: void};\n    _listenId: string;\n    _listeners: any;\n}\n\n// Seen as: model\ninterface interface_282 {\n    toJSON: (arg0: void) => any;\n    trigger: (arg0: void, arg1: void, arg2: void, arg3: void) => void;\n}\n\n// Seen as: options\ninterface interface_283 {\n    attrs: any;\n    beforeSend: (xhr: void) => any;\n    context: any;\n    data: any;\n    emulateHTTP: any;\n    emulateJSON: any;\n    error: (xhr: void, textStatus: void, errorThrown: void) => void;\n    errorThrown: any;\n    textStatus: any;\n    url: any;\n    xhr: boolean | JQueryXHR;\n}\n\n// Seen as: name\ninterface interface_247 {\n}\n\n// Seen as: arg0, attrs, existing, model, models, obj\ninterface interface_171 {\n    attributes: string | number | interface_169;\n    cid: string | number | interface_268;\n    collection: any;\n    hasChanged: (arg0: void) => boolean;\n    length: number;\n    on: (arg0: void, arg1: void, arg2: void) => void;\n    parse: (arg0: void, arg1: void) => string | number | interface_173;\n    save: (arg0: void, arg1: void) => void;\n    set: (arg0: void, arg1: void) => void;\n    slice: () => string | number | Array<any> | interface_284;\n    trigger: (arg0: void, arg1: void, arg2: void, arg3: void) => void;\n}\n\n// Seen as: arg0, attrs, existing, model, models, obj\ninterface interface_284 {\n    attributes: string | number | interface_169;\n    cid: string | number | interface_268;\n    collection: any;\n    hasChanged: (arg0: void) => boolean;\n    on: (arg0: void, arg1: void, arg2: void) => void;\n    parse: (arg0: void, arg1: void) => string | number | interface_173;\n    save: (arg0: void, arg1: void) => void;\n    set: (arg0: void, arg1: void) => void;\n    trigger: (arg0: void, arg1: void, arg2: void, arg3: void) => void;\n}\n\n// Seen as: arg0, attrs, existing, model, models, obj\ninterface interface_162 {\n    [index: number]: string | number | interface_162;\n    attributes: string | number | interface_169;\n    cid: string | number | interface_268;\n    collection: any;\n    hasChanged: (arg0: void) => boolean;\n    length: number;\n    on: (arg0: void, arg1: void, arg2: void) => void;\n    parse: (arg0: void, arg1: void) => string | number | interface_173;\n    save: (arg0: void, arg1: void) => void;\n    set: (arg0: void, arg1: void) => void;\n    slice: () => string | number | Array<any> | interface_284;\n    trigger: (arg0: void, arg1: void, arg2: void, arg3: void) => void;\n}\n\n// Seen as: attrs\ninterface interface_196 {\n}\n\n// Seen as: attrs\ninterface interface_194 {\n}\n\n// Seen as: name\ninterface interface_213 {\n}\n\n// Seen as: removed\ninterface interface_240 {\n    [index: number]: interface_240;\n    length: any;\n}\n\n","newDecAvailable":false}