{"statements":[{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment","key":"deprecationHandler","newType":null,"isAny":true,"isClass":true,"containerType":"class _moment {\n    constructor ();\n    static ISO_8601: () => void;\n    static calendarFormat: (myMoment: moment, now: moment) => string;\n    static createFromInputFallback: () => any;\n    static defaultFormat: string;\n    static defaultFormatUtc: string;\n    static defineLocale: (name: string, config: interface_4251) => Locale;\n    static deprecationHandler: void;\n    static duration: interface_4197;\n    static fn: interface_4271;\n    static invalid: (flags: interface_4237) => interface_4241;\n    static isDate: (input: number | moment | interface_4268 | number[]) => boolean;\n    static isDuration: (obj: Duration | interface_4272 | string) => boolean;\n    static isMoment: (obj: number | moment | interface_4273 | number[]) => boolean;\n    static lang: () => string;\n    static langData: () => Locale;\n    static locale: (key?: string, values?: interface_4274) => string;\n    static localeData: (key?: string | Duration) => Locale | interface_4048;\n    static locales: () => Array<any>;\n    static max: () => interface_4268 | moment;\n    static min: () => interface_4268 | moment;\n    static momentProperties: Array<any>;\n    static months: (format: any, index: any) => Array<any>;\n    static monthsShort: (format: any, index: any) => Array<any>;\n    static normalizeUnits: (units: string) => any;\n    static now: () => string;\n    static parseTwoDigitYear: (input: {length: any}) => string | number;\n    static parseZone: () => any;\n    static relativeTimeRounding: (roundingFunction: (x: number) => number) => boolean | ((x: number) => number);\n    static relativeTimeThreshold: (threshold: string | number, limit: any) => boolean;\n    static suppressDeprecationWarnings: boolean;\n    static unix: (input: number) => interface_4268 | moment;\n    static updateLocale: (name: string, config: interface_4278) => any;\n    static updateOffset: () => void;\n    static utc: (input: moment | RegExp | string | string[] | interface_4279, format: any, locale: any, strict: any) => interface_4210;\n    static version: string;\n    static weekdays: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysMin: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysShort: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    _d: Date;\n    _i: Array<any>;\n    _isAMomentObject: boolean;\n    _isUTC: boolean;\n    _isValid: boolean;\n    _locale: Locale;\n    _offset: number;\n    _pf: interface_4280;\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n    calendar: (time: any, formats: interface_4189) => any;\n    clone: () => moment;\n    creationData: () => interface_4252;\n    date: (value: number) => moment;\n    dates: () => moment;\n    day: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    dayOfYear: (input: number) => string | number | moment;\n    days: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    daysInMonth: () => number;\n    diff: (input: moment | string | RegExp | string[] | interface_4254, units: string, asFloat: boolean) => number;\n    endOf: (units: string) => moment;\n    format: (inputString: string) => any;\n    from: (time: moment | RegExp | string | string[] | interface_4255, withoutSuffix: any) => any;\n    fromNow: (withoutSuffix: any) => any;\n    get: (units: string | number) => moment;\n    hasAlignedHourOffset: (input: moment | RegExp | string | string[] | interface_4256) => boolean;\n    hour: (value: number) => moment;\n    hours: (value: number) => moment;\n    invalidAt: () => any;\n    isAfter: (input: string | moment | RegExp | string[] | interface_4257, units: any) => boolean;\n    isBefore: (input: string | RegExp | moment | string[] | interface_4259, units: any) => boolean;\n    isBetween: (from: string | RegExp | moment | string[] | interface_4261, to: string | moment | RegExp | string[] | interface_4263, units: any, inclusivity: string | interface_4193) => boolean;\n    isDST: () => boolean;\n    isDSTShifted: () => boolean;\n    isLeapYear: () => boolean;\n    isLocal: () => boolean;\n    isSame: (input: moment | RegExp | string | string[] | interface_4264, units: string) => boolean;\n    isSameOrAfter: (input: moment | string | RegExp | string[] | interface_4265, units: any) => boolean;\n    isSameOrBefore: (input: RegExp | string | moment | string[] | interface_4267, units: any) => boolean;\n    isUTC: () => boolean;\n    isUtc: () => boolean;\n    isUtcOffset: () => boolean;\n    isValid: () => boolean;\n    isoWeek: (input: number) => moment | number;\n    isoWeekYear: (input: number) => any;\n    isoWeekday: (input: string) => moment | number;\n    isoWeeks: (input: number) => moment | number;\n    isoWeeksInYear: () => number;\n    lang: () => any;\n    local: (keepLocalTime: any) => moment;\n    locale: (key: Duration | string) => string | Duration;\n    localeData: () => string | Locale;\n    max: () => interface_4268 | moment;\n    millisecond: (value: number) => moment;\n    milliseconds: (value: number) => moment;\n    min: () => interface_4268 | moment;\n    minute: (value: number) => moment;\n    minutes: (value: number) => moment;\n    month: (value: string) => moment | string | RegExp | string[] | interface_4054;\n    months: () => moment;\n    parseZone: () => moment;\n    parsingFlags: () => interface_4187;\n    quarter: (input: number) => number | moment;\n    quarters: (input: number) => number | moment;\n    second: (value: number) => moment;\n    seconds: (value: number) => moment;\n    set: (units: string | number | interface_4191, value: any) => moment;\n    startOf: (units: string) => moment;\n    subtract: (val: string | interface_4179, period: string | interface_4179) => moment;\n    to: (time: string | moment | RegExp | string[] | interface_4269, withoutSuffix: any) => any;\n    toArray: () => moment[];\n    toDate: () => Date;\n    toISOString: () => any;\n    toJSON: () => any;\n    toNow: (withoutSuffix: any) => any;\n    toObject: () => interface_4270;\n    toString: () => any;\n    unix: () => number;\n    utc: (keepLocalTime: any) => number | moment;\n    utcOffset: (input: number, keepLocalTime: any) => moment | number;\n    valueOf: () => Object | string;\n    week: (input: number) => number | moment;\n    weekYear: (input: number) => any;\n    weekday: (input: number) => moment | number;\n    weeks: (input: number) => number | moment;\n    weeksInYear: () => number;\n    year: (value: any) => moment | number;\n    years: () => moment;\n    zone: () => number;\n    zoneAbbr: () => string;\n    zoneName: () => string;\n}\n","containerDescription":"class moment"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment","key":"defaultFormatUtc","newType":"string","isAny":false,"isClass":true,"containerType":"class _moment {\n    constructor ();\n    static ISO_8601: () => void;\n    static calendarFormat: (myMoment: moment, now: moment) => string;\n    static createFromInputFallback: () => any;\n    static defaultFormat: string;\n    static defaultFormatUtc: string;\n    static defineLocale: (name: string, config: interface_4251) => Locale;\n    static deprecationHandler: void;\n    static duration: interface_4197;\n    static fn: interface_4271;\n    static invalid: (flags: interface_4237) => interface_4241;\n    static isDate: (input: number | moment | interface_4268 | number[]) => boolean;\n    static isDuration: (obj: Duration | interface_4272 | string) => boolean;\n    static isMoment: (obj: number | moment | interface_4273 | number[]) => boolean;\n    static lang: () => string;\n    static langData: () => Locale;\n    static locale: (key?: string, values?: interface_4274) => string;\n    static localeData: (key?: string | Duration) => Locale | interface_4048;\n    static locales: () => Array<any>;\n    static max: () => interface_4268 | moment;\n    static min: () => interface_4268 | moment;\n    static momentProperties: Array<any>;\n    static months: (format: any, index: any) => Array<any>;\n    static monthsShort: (format: any, index: any) => Array<any>;\n    static normalizeUnits: (units: string) => any;\n    static now: () => string;\n    static parseTwoDigitYear: (input: {length: any}) => string | number;\n    static parseZone: () => any;\n    static relativeTimeRounding: (roundingFunction: (x: number) => number) => boolean | ((x: number) => number);\n    static relativeTimeThreshold: (threshold: string | number, limit: any) => boolean;\n    static suppressDeprecationWarnings: boolean;\n    static unix: (input: number) => interface_4268 | moment;\n    static updateLocale: (name: string, config: interface_4278) => any;\n    static updateOffset: () => void;\n    static utc: (input: moment | RegExp | string | string[] | interface_4279, format: any, locale: any, strict: any) => interface_4210;\n    static version: string;\n    static weekdays: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysMin: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysShort: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    _d: Date;\n    _i: Array<any>;\n    _isAMomentObject: boolean;\n    _isUTC: boolean;\n    _isValid: boolean;\n    _locale: Locale;\n    _offset: number;\n    _pf: interface_4280;\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n    calendar: (time: any, formats: interface_4189) => any;\n    clone: () => moment;\n    creationData: () => interface_4252;\n    date: (value: number) => moment;\n    dates: () => moment;\n    day: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    dayOfYear: (input: number) => string | number | moment;\n    days: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    daysInMonth: () => number;\n    diff: (input: moment | string | RegExp | string[] | interface_4254, units: string, asFloat: boolean) => number;\n    endOf: (units: string) => moment;\n    format: (inputString: string) => any;\n    from: (time: moment | RegExp | string | string[] | interface_4255, withoutSuffix: any) => any;\n    fromNow: (withoutSuffix: any) => any;\n    get: (units: string | number) => moment;\n    hasAlignedHourOffset: (input: moment | RegExp | string | string[] | interface_4256) => boolean;\n    hour: (value: number) => moment;\n    hours: (value: number) => moment;\n    invalidAt: () => any;\n    isAfter: (input: string | moment | RegExp | string[] | interface_4257, units: any) => boolean;\n    isBefore: (input: string | RegExp | moment | string[] | interface_4259, units: any) => boolean;\n    isBetween: (from: string | RegExp | moment | string[] | interface_4261, to: string | moment | RegExp | string[] | interface_4263, units: any, inclusivity: string | interface_4193) => boolean;\n    isDST: () => boolean;\n    isDSTShifted: () => boolean;\n    isLeapYear: () => boolean;\n    isLocal: () => boolean;\n    isSame: (input: moment | RegExp | string | string[] | interface_4264, units: string) => boolean;\n    isSameOrAfter: (input: moment | string | RegExp | string[] | interface_4265, units: any) => boolean;\n    isSameOrBefore: (input: RegExp | string | moment | string[] | interface_4267, units: any) => boolean;\n    isUTC: () => boolean;\n    isUtc: () => boolean;\n    isUtcOffset: () => boolean;\n    isValid: () => boolean;\n    isoWeek: (input: number) => moment | number;\n    isoWeekYear: (input: number) => any;\n    isoWeekday: (input: string) => moment | number;\n    isoWeeks: (input: number) => moment | number;\n    isoWeeksInYear: () => number;\n    lang: () => any;\n    local: (keepLocalTime: any) => moment;\n    locale: (key: Duration | string) => string | Duration;\n    localeData: () => string | Locale;\n    max: () => interface_4268 | moment;\n    millisecond: (value: number) => moment;\n    milliseconds: (value: number) => moment;\n    min: () => interface_4268 | moment;\n    minute: (value: number) => moment;\n    minutes: (value: number) => moment;\n    month: (value: string) => moment | string | RegExp | string[] | interface_4054;\n    months: () => moment;\n    parseZone: () => moment;\n    parsingFlags: () => interface_4187;\n    quarter: (input: number) => number | moment;\n    quarters: (input: number) => number | moment;\n    second: (value: number) => moment;\n    seconds: (value: number) => moment;\n    set: (units: string | number | interface_4191, value: any) => moment;\n    startOf: (units: string) => moment;\n    subtract: (val: string | interface_4179, period: string | interface_4179) => moment;\n    to: (time: string | moment | RegExp | string[] | interface_4269, withoutSuffix: any) => any;\n    toArray: () => moment[];\n    toDate: () => Date;\n    toISOString: () => any;\n    toJSON: () => any;\n    toNow: (withoutSuffix: any) => any;\n    toObject: () => interface_4270;\n    toString: () => any;\n    unix: () => number;\n    utc: (keepLocalTime: any) => number | moment;\n    utcOffset: (input: number, keepLocalTime: any) => moment | number;\n    valueOf: () => Object | string;\n    week: (input: number) => number | moment;\n    weekYear: (input: number) => any;\n    weekday: (input: number) => moment | number;\n    weeks: (input: number) => number | moment;\n    weeksInYear: () => number;\n    year: (value: any) => moment | number;\n    years: () => moment;\n    zone: () => number;\n    zoneAbbr: () => string;\n    zoneName: () => string;\n}\n","containerDescription":"class moment"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.relativeTimeRounding","newFunction":"function duration_humanize__getSetRelativeTimeRounding (roundingFunction) {\r\n        if (roundingFunction === undefined) {\r\n            return round;\r\n        }\r\n        if (typeof(roundingFunction) === 'function') {\r\n            round = roundingFunction;\r\n            return true;\r\n        }\r\n        return false;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment","key":"relativeTimeRounding","newType":"(roundingFunction: (x: number) => number) => boolean | ((x: number) => number)","isAny":false,"isClass":true,"containerType":"class _moment {\n    constructor ();\n    static ISO_8601: () => void;\n    static calendarFormat: (myMoment: moment, now: moment) => string;\n    static createFromInputFallback: () => any;\n    static defaultFormat: string;\n    static defaultFormatUtc: string;\n    static defineLocale: (name: string, config: interface_4251) => Locale;\n    static deprecationHandler: void;\n    static duration: interface_4197;\n    static fn: interface_4271;\n    static invalid: (flags: interface_4237) => interface_4241;\n    static isDate: (input: number | moment | interface_4268 | number[]) => boolean;\n    static isDuration: (obj: Duration | interface_4272 | string) => boolean;\n    static isMoment: (obj: number | moment | interface_4273 | number[]) => boolean;\n    static lang: () => string;\n    static langData: () => Locale;\n    static locale: (key?: string, values?: interface_4274) => string;\n    static localeData: (key?: string | Duration) => Locale | interface_4048;\n    static locales: () => Array<any>;\n    static max: () => interface_4268 | moment;\n    static min: () => interface_4268 | moment;\n    static momentProperties: Array<any>;\n    static months: (format: any, index: any) => Array<any>;\n    static monthsShort: (format: any, index: any) => Array<any>;\n    static normalizeUnits: (units: string) => any;\n    static now: () => string;\n    static parseTwoDigitYear: (input: {length: any}) => string | number;\n    static parseZone: () => any;\n    static relativeTimeRounding: (roundingFunction: (x: number) => number) => boolean | ((x: number) => number);\n    static relativeTimeThreshold: (threshold: string | number, limit: any) => boolean;\n    static suppressDeprecationWarnings: boolean;\n    static unix: (input: number) => interface_4268 | moment;\n    static updateLocale: (name: string, config: interface_4278) => any;\n    static updateOffset: () => void;\n    static utc: (input: moment | RegExp | string | string[] | interface_4279, format: any, locale: any, strict: any) => interface_4210;\n    static version: string;\n    static weekdays: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysMin: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysShort: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    _d: Date;\n    _i: Array<any>;\n    _isAMomentObject: boolean;\n    _isUTC: boolean;\n    _isValid: boolean;\n    _locale: Locale;\n    _offset: number;\n    _pf: interface_4280;\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n    calendar: (time: any, formats: interface_4189) => any;\n    clone: () => moment;\n    creationData: () => interface_4252;\n    date: (value: number) => moment;\n    dates: () => moment;\n    day: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    dayOfYear: (input: number) => string | number | moment;\n    days: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    daysInMonth: () => number;\n    diff: (input: moment | string | RegExp | string[] | interface_4254, units: string, asFloat: boolean) => number;\n    endOf: (units: string) => moment;\n    format: (inputString: string) => any;\n    from: (time: moment | RegExp | string | string[] | interface_4255, withoutSuffix: any) => any;\n    fromNow: (withoutSuffix: any) => any;\n    get: (units: string | number) => moment;\n    hasAlignedHourOffset: (input: moment | RegExp | string | string[] | interface_4256) => boolean;\n    hour: (value: number) => moment;\n    hours: (value: number) => moment;\n    invalidAt: () => any;\n    isAfter: (input: string | moment | RegExp | string[] | interface_4257, units: any) => boolean;\n    isBefore: (input: string | RegExp | moment | string[] | interface_4259, units: any) => boolean;\n    isBetween: (from: string | RegExp | moment | string[] | interface_4261, to: string | moment | RegExp | string[] | interface_4263, units: any, inclusivity: string | interface_4193) => boolean;\n    isDST: () => boolean;\n    isDSTShifted: () => boolean;\n    isLeapYear: () => boolean;\n    isLocal: () => boolean;\n    isSame: (input: moment | RegExp | string | string[] | interface_4264, units: string) => boolean;\n    isSameOrAfter: (input: moment | string | RegExp | string[] | interface_4265, units: any) => boolean;\n    isSameOrBefore: (input: RegExp | string | moment | string[] | interface_4267, units: any) => boolean;\n    isUTC: () => boolean;\n    isUtc: () => boolean;\n    isUtcOffset: () => boolean;\n    isValid: () => boolean;\n    isoWeek: (input: number) => moment | number;\n    isoWeekYear: (input: number) => any;\n    isoWeekday: (input: string) => moment | number;\n    isoWeeks: (input: number) => moment | number;\n    isoWeeksInYear: () => number;\n    lang: () => any;\n    local: (keepLocalTime: any) => moment;\n    locale: (key: Duration | string) => string | Duration;\n    localeData: () => string | Locale;\n    max: () => interface_4268 | moment;\n    millisecond: (value: number) => moment;\n    milliseconds: (value: number) => moment;\n    min: () => interface_4268 | moment;\n    minute: (value: number) => moment;\n    minutes: (value: number) => moment;\n    month: (value: string) => moment | string | RegExp | string[] | interface_4054;\n    months: () => moment;\n    parseZone: () => moment;\n    parsingFlags: () => interface_4187;\n    quarter: (input: number) => number | moment;\n    quarters: (input: number) => number | moment;\n    second: (value: number) => moment;\n    seconds: (value: number) => moment;\n    set: (units: string | number | interface_4191, value: any) => moment;\n    startOf: (units: string) => moment;\n    subtract: (val: string | interface_4179, period: string | interface_4179) => moment;\n    to: (time: string | moment | RegExp | string[] | interface_4269, withoutSuffix: any) => any;\n    toArray: () => moment[];\n    toDate: () => Date;\n    toISOString: () => any;\n    toJSON: () => any;\n    toNow: (withoutSuffix: any) => any;\n    toObject: () => interface_4270;\n    toString: () => any;\n    unix: () => number;\n    utc: (keepLocalTime: any) => number | moment;\n    utcOffset: (input: number, keepLocalTime: any) => moment | number;\n    valueOf: () => Object | string;\n    week: (input: number) => number | moment;\n    weekYear: (input: number) => any;\n    weekday: (input: number) => moment | number;\n    weeks: (input: number) => number | moment;\n    weeksInYear: () => number;\n    year: (value: any) => moment | number;\n    years: () => moment;\n    zone: () => number;\n    zoneAbbr: () => string;\n    zoneName: () => string;\n}\n","containerDescription":"class moment"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.calendarFormat","newFunction":"function getCalendarFormat(myMoment, now) {\r\n        var diff = myMoment.diff(now, 'days', true);\r\n        return diff < -6 ? 'sameElse' :\r\n            diff < -1 ? 'lastWeek' :\r\n                diff < 0 ? 'lastDay' :\r\n                    diff < 1 ? 'sameDay' :\r\n                        diff < 2 ? 'nextDay' :\r\n                            diff < 7 ? 'nextWeek' : 'sameElse';\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment","key":"calendarFormat","newType":"(myMoment: moment, now: moment) => string","isAny":false,"isClass":true,"containerType":"class _moment {\n    constructor ();\n    static ISO_8601: () => void;\n    static calendarFormat: (myMoment: moment, now: moment) => string;\n    static createFromInputFallback: () => any;\n    static defaultFormat: string;\n    static defaultFormatUtc: string;\n    static defineLocale: (name: string, config: interface_4251) => Locale;\n    static deprecationHandler: void;\n    static duration: interface_4197;\n    static fn: interface_4271;\n    static invalid: (flags: interface_4237) => interface_4241;\n    static isDate: (input: number | moment | interface_4268 | number[]) => boolean;\n    static isDuration: (obj: Duration | interface_4272 | string) => boolean;\n    static isMoment: (obj: number | moment | interface_4273 | number[]) => boolean;\n    static lang: () => string;\n    static langData: () => Locale;\n    static locale: (key?: string, values?: interface_4274) => string;\n    static localeData: (key?: string | Duration) => Locale | interface_4048;\n    static locales: () => Array<any>;\n    static max: () => interface_4268 | moment;\n    static min: () => interface_4268 | moment;\n    static momentProperties: Array<any>;\n    static months: (format: any, index: any) => Array<any>;\n    static monthsShort: (format: any, index: any) => Array<any>;\n    static normalizeUnits: (units: string) => any;\n    static now: () => string;\n    static parseTwoDigitYear: (input: {length: any}) => string | number;\n    static parseZone: () => any;\n    static relativeTimeRounding: (roundingFunction: (x: number) => number) => boolean | ((x: number) => number);\n    static relativeTimeThreshold: (threshold: string | number, limit: any) => boolean;\n    static suppressDeprecationWarnings: boolean;\n    static unix: (input: number) => interface_4268 | moment;\n    static updateLocale: (name: string, config: interface_4278) => any;\n    static updateOffset: () => void;\n    static utc: (input: moment | RegExp | string | string[] | interface_4279, format: any, locale: any, strict: any) => interface_4210;\n    static version: string;\n    static weekdays: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysMin: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysShort: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    _d: Date;\n    _i: Array<any>;\n    _isAMomentObject: boolean;\n    _isUTC: boolean;\n    _isValid: boolean;\n    _locale: Locale;\n    _offset: number;\n    _pf: interface_4280;\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n    calendar: (time: any, formats: interface_4189) => any;\n    clone: () => moment;\n    creationData: () => interface_4252;\n    date: (value: number) => moment;\n    dates: () => moment;\n    day: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    dayOfYear: (input: number) => string | number | moment;\n    days: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    daysInMonth: () => number;\n    diff: (input: moment | string | RegExp | string[] | interface_4254, units: string, asFloat: boolean) => number;\n    endOf: (units: string) => moment;\n    format: (inputString: string) => any;\n    from: (time: moment | RegExp | string | string[] | interface_4255, withoutSuffix: any) => any;\n    fromNow: (withoutSuffix: any) => any;\n    get: (units: string | number) => moment;\n    hasAlignedHourOffset: (input: moment | RegExp | string | string[] | interface_4256) => boolean;\n    hour: (value: number) => moment;\n    hours: (value: number) => moment;\n    invalidAt: () => any;\n    isAfter: (input: string | moment | RegExp | string[] | interface_4257, units: any) => boolean;\n    isBefore: (input: string | RegExp | moment | string[] | interface_4259, units: any) => boolean;\n    isBetween: (from: string | RegExp | moment | string[] | interface_4261, to: string | moment | RegExp | string[] | interface_4263, units: any, inclusivity: string | interface_4193) => boolean;\n    isDST: () => boolean;\n    isDSTShifted: () => boolean;\n    isLeapYear: () => boolean;\n    isLocal: () => boolean;\n    isSame: (input: moment | RegExp | string | string[] | interface_4264, units: string) => boolean;\n    isSameOrAfter: (input: moment | string | RegExp | string[] | interface_4265, units: any) => boolean;\n    isSameOrBefore: (input: RegExp | string | moment | string[] | interface_4267, units: any) => boolean;\n    isUTC: () => boolean;\n    isUtc: () => boolean;\n    isUtcOffset: () => boolean;\n    isValid: () => boolean;\n    isoWeek: (input: number) => moment | number;\n    isoWeekYear: (input: number) => any;\n    isoWeekday: (input: string) => moment | number;\n    isoWeeks: (input: number) => moment | number;\n    isoWeeksInYear: () => number;\n    lang: () => any;\n    local: (keepLocalTime: any) => moment;\n    locale: (key: Duration | string) => string | Duration;\n    localeData: () => string | Locale;\n    max: () => interface_4268 | moment;\n    millisecond: (value: number) => moment;\n    milliseconds: (value: number) => moment;\n    min: () => interface_4268 | moment;\n    minute: (value: number) => moment;\n    minutes: (value: number) => moment;\n    month: (value: string) => moment | string | RegExp | string[] | interface_4054;\n    months: () => moment;\n    parseZone: () => moment;\n    parsingFlags: () => interface_4187;\n    quarter: (input: number) => number | moment;\n    quarters: (input: number) => number | moment;\n    second: (value: number) => moment;\n    seconds: (value: number) => moment;\n    set: (units: string | number | interface_4191, value: any) => moment;\n    startOf: (units: string) => moment;\n    subtract: (val: string | interface_4179, period: string | interface_4179) => moment;\n    to: (time: string | moment | RegExp | string[] | interface_4269, withoutSuffix: any) => any;\n    toArray: () => moment[];\n    toDate: () => Date;\n    toISOString: () => any;\n    toJSON: () => any;\n    toNow: (withoutSuffix: any) => any;\n    toObject: () => interface_4270;\n    toString: () => any;\n    unix: () => number;\n    utc: (keepLocalTime: any) => number | moment;\n    utcOffset: (input: number, keepLocalTime: any) => moment | number;\n    valueOf: () => Object | string;\n    week: (input: number) => number | moment;\n    weekYear: (input: number) => any;\n    weekday: (input: number) => moment | number;\n    weeks: (input: number) => number | moment;\n    weeksInYear: () => number;\n    year: (value: any) => moment | number;\n    years: () => moment;\n    zone: () => number;\n    zoneAbbr: () => string;\n    zoneName: () => string;\n}\n","containerDescription":"class moment"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.locales","newFunction":"function locale_locales__listLocales() {\r\n        return keys(locales);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment","key":"locales","newType":"() => Array<any>","isAny":false,"isClass":true,"containerType":"class _moment {\n    constructor ();\n    static ISO_8601: () => void;\n    static calendarFormat: (myMoment: moment, now: moment) => string;\n    static createFromInputFallback: () => any;\n    static defaultFormat: string;\n    static defaultFormatUtc: string;\n    static defineLocale: (name: string, config: interface_4251) => Locale;\n    static deprecationHandler: void;\n    static duration: interface_4197;\n    static fn: interface_4271;\n    static invalid: (flags: interface_4237) => interface_4241;\n    static isDate: (input: number | moment | interface_4268 | number[]) => boolean;\n    static isDuration: (obj: Duration | interface_4272 | string) => boolean;\n    static isMoment: (obj: number | moment | interface_4273 | number[]) => boolean;\n    static lang: () => string;\n    static langData: () => Locale;\n    static locale: (key?: string, values?: interface_4274) => string;\n    static localeData: (key?: string | Duration) => Locale | interface_4048;\n    static locales: () => Array<any>;\n    static max: () => interface_4268 | moment;\n    static min: () => interface_4268 | moment;\n    static momentProperties: Array<any>;\n    static months: (format: any, index: any) => Array<any>;\n    static monthsShort: (format: any, index: any) => Array<any>;\n    static normalizeUnits: (units: string) => any;\n    static now: () => string;\n    static parseTwoDigitYear: (input: {length: any}) => string | number;\n    static parseZone: () => any;\n    static relativeTimeRounding: (roundingFunction: (x: number) => number) => boolean | ((x: number) => number);\n    static relativeTimeThreshold: (threshold: string | number, limit: any) => boolean;\n    static suppressDeprecationWarnings: boolean;\n    static unix: (input: number) => interface_4268 | moment;\n    static updateLocale: (name: string, config: interface_4278) => any;\n    static updateOffset: () => void;\n    static utc: (input: moment | RegExp | string | string[] | interface_4279, format: any, locale: any, strict: any) => interface_4210;\n    static version: string;\n    static weekdays: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysMin: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysShort: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    _d: Date;\n    _i: Array<any>;\n    _isAMomentObject: boolean;\n    _isUTC: boolean;\n    _isValid: boolean;\n    _locale: Locale;\n    _offset: number;\n    _pf: interface_4280;\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n    calendar: (time: any, formats: interface_4189) => any;\n    clone: () => moment;\n    creationData: () => interface_4252;\n    date: (value: number) => moment;\n    dates: () => moment;\n    day: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    dayOfYear: (input: number) => string | number | moment;\n    days: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    daysInMonth: () => number;\n    diff: (input: moment | string | RegExp | string[] | interface_4254, units: string, asFloat: boolean) => number;\n    endOf: (units: string) => moment;\n    format: (inputString: string) => any;\n    from: (time: moment | RegExp | string | string[] | interface_4255, withoutSuffix: any) => any;\n    fromNow: (withoutSuffix: any) => any;\n    get: (units: string | number) => moment;\n    hasAlignedHourOffset: (input: moment | RegExp | string | string[] | interface_4256) => boolean;\n    hour: (value: number) => moment;\n    hours: (value: number) => moment;\n    invalidAt: () => any;\n    isAfter: (input: string | moment | RegExp | string[] | interface_4257, units: any) => boolean;\n    isBefore: (input: string | RegExp | moment | string[] | interface_4259, units: any) => boolean;\n    isBetween: (from: string | RegExp | moment | string[] | interface_4261, to: string | moment | RegExp | string[] | interface_4263, units: any, inclusivity: string | interface_4193) => boolean;\n    isDST: () => boolean;\n    isDSTShifted: () => boolean;\n    isLeapYear: () => boolean;\n    isLocal: () => boolean;\n    isSame: (input: moment | RegExp | string | string[] | interface_4264, units: string) => boolean;\n    isSameOrAfter: (input: moment | string | RegExp | string[] | interface_4265, units: any) => boolean;\n    isSameOrBefore: (input: RegExp | string | moment | string[] | interface_4267, units: any) => boolean;\n    isUTC: () => boolean;\n    isUtc: () => boolean;\n    isUtcOffset: () => boolean;\n    isValid: () => boolean;\n    isoWeek: (input: number) => moment | number;\n    isoWeekYear: (input: number) => any;\n    isoWeekday: (input: string) => moment | number;\n    isoWeeks: (input: number) => moment | number;\n    isoWeeksInYear: () => number;\n    lang: () => any;\n    local: (keepLocalTime: any) => moment;\n    locale: (key: Duration | string) => string | Duration;\n    localeData: () => string | Locale;\n    max: () => interface_4268 | moment;\n    millisecond: (value: number) => moment;\n    milliseconds: (value: number) => moment;\n    min: () => interface_4268 | moment;\n    minute: (value: number) => moment;\n    minutes: (value: number) => moment;\n    month: (value: string) => moment | string | RegExp | string[] | interface_4054;\n    months: () => moment;\n    parseZone: () => moment;\n    parsingFlags: () => interface_4187;\n    quarter: (input: number) => number | moment;\n    quarters: (input: number) => number | moment;\n    second: (value: number) => moment;\n    seconds: (value: number) => moment;\n    set: (units: string | number | interface_4191, value: any) => moment;\n    startOf: (units: string) => moment;\n    subtract: (val: string | interface_4179, period: string | interface_4179) => moment;\n    to: (time: string | moment | RegExp | string[] | interface_4269, withoutSuffix: any) => any;\n    toArray: () => moment[];\n    toDate: () => Date;\n    toISOString: () => any;\n    toJSON: () => any;\n    toNow: (withoutSuffix: any) => any;\n    toObject: () => interface_4270;\n    toString: () => any;\n    unix: () => number;\n    utc: (keepLocalTime: any) => number | moment;\n    utcOffset: (input: number, keepLocalTime: any) => moment | number;\n    valueOf: () => Object | string;\n    week: (input: number) => number | moment;\n    weekYear: (input: number) => any;\n    weekday: (input: number) => moment | number;\n    weeks: (input: number) => number | moment;\n    weeksInYear: () => number;\n    year: (value: any) => moment | number;\n    years: () => moment;\n    zone: () => number;\n    zoneAbbr: () => string;\n    zoneName: () => string;\n}\n","containerDescription":"class moment"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.updateLocale","newFunction":"function updateLocale(name, config) {\r\n        if (config != null) {\r\n            var locale, parentConfig = baseConfig;\r\n            // MERGE\r\n            if (locales[name] != null) {\r\n                parentConfig = locales[name]._config;\r\n            }\r\n            config = mergeConfigs(parentConfig, config);\r\n            locale = new Locale(config);\r\n            locale.parentLocale = locales[name];\r\n            locales[name] = locale;\r\n\r\n            // backwards compat for now: also set the locale\r\n            locale_locales__getSetGlobalLocale(name);\r\n        } else {\r\n            // pass null for config to unupdate, useful for tests\r\n            if (locales[name] != null) {\r\n                if (locales[name].parentLocale != null) {\r\n                    locales[name] = locales[name].parentLocale;\r\n                } else if (locales[name] != null) {\r\n                    delete locales[name];\r\n                }\r\n            }\r\n        }\r\n        return locales[name];\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment","key":"updateLocale","newType":"(name: string, config: interface_4278) => any","isAny":false,"isClass":true,"containerType":"class _moment {\n    constructor ();\n    static ISO_8601: () => void;\n    static calendarFormat: (myMoment: moment, now: moment) => string;\n    static createFromInputFallback: () => any;\n    static defaultFormat: string;\n    static defaultFormatUtc: string;\n    static defineLocale: (name: string, config: interface_4251) => Locale;\n    static deprecationHandler: void;\n    static duration: interface_4197;\n    static fn: interface_4271;\n    static invalid: (flags: interface_4237) => interface_4241;\n    static isDate: (input: number | moment | interface_4268 | number[]) => boolean;\n    static isDuration: (obj: Duration | interface_4272 | string) => boolean;\n    static isMoment: (obj: number | moment | interface_4273 | number[]) => boolean;\n    static lang: () => string;\n    static langData: () => Locale;\n    static locale: (key?: string, values?: interface_4274) => string;\n    static localeData: (key?: string | Duration) => Locale | interface_4048;\n    static locales: () => Array<any>;\n    static max: () => interface_4268 | moment;\n    static min: () => interface_4268 | moment;\n    static momentProperties: Array<any>;\n    static months: (format: any, index: any) => Array<any>;\n    static monthsShort: (format: any, index: any) => Array<any>;\n    static normalizeUnits: (units: string) => any;\n    static now: () => string;\n    static parseTwoDigitYear: (input: {length: any}) => string | number;\n    static parseZone: () => any;\n    static relativeTimeRounding: (roundingFunction: (x: number) => number) => boolean | ((x: number) => number);\n    static relativeTimeThreshold: (threshold: string | number, limit: any) => boolean;\n    static suppressDeprecationWarnings: boolean;\n    static unix: (input: number) => interface_4268 | moment;\n    static updateLocale: (name: string, config: interface_4278) => any;\n    static updateOffset: () => void;\n    static utc: (input: moment | RegExp | string | string[] | interface_4279, format: any, locale: any, strict: any) => interface_4210;\n    static version: string;\n    static weekdays: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysMin: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysShort: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    _d: Date;\n    _i: Array<any>;\n    _isAMomentObject: boolean;\n    _isUTC: boolean;\n    _isValid: boolean;\n    _locale: Locale;\n    _offset: number;\n    _pf: interface_4280;\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n    calendar: (time: any, formats: interface_4189) => any;\n    clone: () => moment;\n    creationData: () => interface_4252;\n    date: (value: number) => moment;\n    dates: () => moment;\n    day: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    dayOfYear: (input: number) => string | number | moment;\n    days: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    daysInMonth: () => number;\n    diff: (input: moment | string | RegExp | string[] | interface_4254, units: string, asFloat: boolean) => number;\n    endOf: (units: string) => moment;\n    format: (inputString: string) => any;\n    from: (time: moment | RegExp | string | string[] | interface_4255, withoutSuffix: any) => any;\n    fromNow: (withoutSuffix: any) => any;\n    get: (units: string | number) => moment;\n    hasAlignedHourOffset: (input: moment | RegExp | string | string[] | interface_4256) => boolean;\n    hour: (value: number) => moment;\n    hours: (value: number) => moment;\n    invalidAt: () => any;\n    isAfter: (input: string | moment | RegExp | string[] | interface_4257, units: any) => boolean;\n    isBefore: (input: string | RegExp | moment | string[] | interface_4259, units: any) => boolean;\n    isBetween: (from: string | RegExp | moment | string[] | interface_4261, to: string | moment | RegExp | string[] | interface_4263, units: any, inclusivity: string | interface_4193) => boolean;\n    isDST: () => boolean;\n    isDSTShifted: () => boolean;\n    isLeapYear: () => boolean;\n    isLocal: () => boolean;\n    isSame: (input: moment | RegExp | string | string[] | interface_4264, units: string) => boolean;\n    isSameOrAfter: (input: moment | string | RegExp | string[] | interface_4265, units: any) => boolean;\n    isSameOrBefore: (input: RegExp | string | moment | string[] | interface_4267, units: any) => boolean;\n    isUTC: () => boolean;\n    isUtc: () => boolean;\n    isUtcOffset: () => boolean;\n    isValid: () => boolean;\n    isoWeek: (input: number) => moment | number;\n    isoWeekYear: (input: number) => any;\n    isoWeekday: (input: string) => moment | number;\n    isoWeeks: (input: number) => moment | number;\n    isoWeeksInYear: () => number;\n    lang: () => any;\n    local: (keepLocalTime: any) => moment;\n    locale: (key: Duration | string) => string | Duration;\n    localeData: () => string | Locale;\n    max: () => interface_4268 | moment;\n    millisecond: (value: number) => moment;\n    milliseconds: (value: number) => moment;\n    min: () => interface_4268 | moment;\n    minute: (value: number) => moment;\n    minutes: (value: number) => moment;\n    month: (value: string) => moment | string | RegExp | string[] | interface_4054;\n    months: () => moment;\n    parseZone: () => moment;\n    parsingFlags: () => interface_4187;\n    quarter: (input: number) => number | moment;\n    quarters: (input: number) => number | moment;\n    second: (value: number) => moment;\n    seconds: (value: number) => moment;\n    set: (units: string | number | interface_4191, value: any) => moment;\n    startOf: (units: string) => moment;\n    subtract: (val: string | interface_4179, period: string | interface_4179) => moment;\n    to: (time: string | moment | RegExp | string[] | interface_4269, withoutSuffix: any) => any;\n    toArray: () => moment[];\n    toDate: () => Date;\n    toISOString: () => any;\n    toJSON: () => any;\n    toNow: (withoutSuffix: any) => any;\n    toObject: () => interface_4270;\n    toString: () => any;\n    unix: () => number;\n    utc: (keepLocalTime: any) => number | moment;\n    utcOffset: (input: number, keepLocalTime: any) => moment | number;\n    valueOf: () => Object | string;\n    week: (input: number) => number | moment;\n    weekYear: (input: number) => any;\n    weekday: (input: number) => moment | number;\n    weeks: (input: number) => number | moment;\n    weeksInYear: () => number;\n    year: (value: any) => moment | number;\n    years: () => moment;\n    zone: () => number;\n    zoneAbbr: () => string;\n    zoneName: () => string;\n}\n","containerDescription":"class moment"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.weekdaysMin","newFunction":"function lists__listWeekdaysMin (localeSorted, format, index) {\r\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.weekdaysMin","oldFunction":"function lists__listWeekdaysMin (format, index) {\r\n        return list(format, index, 'weekdaysMin', 7, 'day');\r\n    }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.moment.weekdaysMin","isClass":true,"newType":"(localeSorted: string | number, format: string | number, index: string | number) => Array<any>","newTypeDescription":"function","oldType":"(format: any, index: any) => Array<any>","oldArgCount":2,"newArgCount":3,"containerType":"class _moment {\n    constructor ();\n    static ISO_8601: () => void;\n    static calendarFormat: (myMoment: moment, now: moment) => string;\n    static createFromInputFallback: () => any;\n    static defaultFormat: string;\n    static defaultFormatUtc: string;\n    static defineLocale: (name: string, config: interface_4251) => Locale;\n    static deprecationHandler: void;\n    static duration: interface_4197;\n    static fn: interface_4271;\n    static invalid: (flags: interface_4237) => interface_4241;\n    static isDate: (input: number | moment | interface_4268 | number[]) => boolean;\n    static isDuration: (obj: Duration | interface_4272 | string) => boolean;\n    static isMoment: (obj: number | moment | interface_4273 | number[]) => boolean;\n    static lang: () => string;\n    static langData: () => Locale;\n    static locale: (key?: string, values?: interface_4274) => string;\n    static localeData: (key?: string | Duration) => Locale | interface_4048;\n    static locales: () => Array<any>;\n    static max: () => interface_4268 | moment;\n    static min: () => interface_4268 | moment;\n    static momentProperties: Array<any>;\n    static months: (format: any, index: any) => Array<any>;\n    static monthsShort: (format: any, index: any) => Array<any>;\n    static normalizeUnits: (units: string) => any;\n    static now: () => string;\n    static parseTwoDigitYear: (input: {length: any}) => string | number;\n    static parseZone: () => any;\n    static relativeTimeRounding: (roundingFunction: (x: number) => number) => boolean | ((x: number) => number);\n    static relativeTimeThreshold: (threshold: string | number, limit: any) => boolean;\n    static suppressDeprecationWarnings: boolean;\n    static unix: (input: number) => interface_4268 | moment;\n    static updateLocale: (name: string, config: interface_4278) => any;\n    static updateOffset: () => void;\n    static utc: (input: moment | RegExp | string | string[] | interface_4279, format: any, locale: any, strict: any) => interface_4210;\n    static version: string;\n    static weekdays: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysMin: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysShort: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    _d: Date;\n    _i: Array<any>;\n    _isAMomentObject: boolean;\n    _isUTC: boolean;\n    _isValid: boolean;\n    _locale: Locale;\n    _offset: number;\n    _pf: interface_4280;\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n    calendar: (time: any, formats: interface_4189) => any;\n    clone: () => moment;\n    creationData: () => interface_4252;\n    date: (value: number) => moment;\n    dates: () => moment;\n    day: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    dayOfYear: (input: number) => string | number | moment;\n    days: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    daysInMonth: () => number;\n    diff: (input: moment | string | RegExp | string[] | interface_4254, units: string, asFloat: boolean) => number;\n    endOf: (units: string) => moment;\n    format: (inputString: string) => any;\n    from: (time: moment | RegExp | string | string[] | interface_4255, withoutSuffix: any) => any;\n    fromNow: (withoutSuffix: any) => any;\n    get: (units: string | number) => moment;\n    hasAlignedHourOffset: (input: moment | RegExp | string | string[] | interface_4256) => boolean;\n    hour: (value: number) => moment;\n    hours: (value: number) => moment;\n    invalidAt: () => any;\n    isAfter: (input: string | moment | RegExp | string[] | interface_4257, units: any) => boolean;\n    isBefore: (input: string | RegExp | moment | string[] | interface_4259, units: any) => boolean;\n    isBetween: (from: string | RegExp | moment | string[] | interface_4261, to: string | moment | RegExp | string[] | interface_4263, units: any, inclusivity: string | interface_4193) => boolean;\n    isDST: () => boolean;\n    isDSTShifted: () => boolean;\n    isLeapYear: () => boolean;\n    isLocal: () => boolean;\n    isSame: (input: moment | RegExp | string | string[] | interface_4264, units: string) => boolean;\n    isSameOrAfter: (input: moment | string | RegExp | string[] | interface_4265, units: any) => boolean;\n    isSameOrBefore: (input: RegExp | string | moment | string[] | interface_4267, units: any) => boolean;\n    isUTC: () => boolean;\n    isUtc: () => boolean;\n    isUtcOffset: () => boolean;\n    isValid: () => boolean;\n    isoWeek: (input: number) => moment | number;\n    isoWeekYear: (input: number) => any;\n    isoWeekday: (input: string) => moment | number;\n    isoWeeks: (input: number) => moment | number;\n    isoWeeksInYear: () => number;\n    lang: () => any;\n    local: (keepLocalTime: any) => moment;\n    locale: (key: Duration | string) => string | Duration;\n    localeData: () => string | Locale;\n    max: () => interface_4268 | moment;\n    millisecond: (value: number) => moment;\n    milliseconds: (value: number) => moment;\n    min: () => interface_4268 | moment;\n    minute: (value: number) => moment;\n    minutes: (value: number) => moment;\n    month: (value: string) => moment | string | RegExp | string[] | interface_4054;\n    months: () => moment;\n    parseZone: () => moment;\n    parsingFlags: () => interface_4187;\n    quarter: (input: number) => number | moment;\n    quarters: (input: number) => number | moment;\n    second: (value: number) => moment;\n    seconds: (value: number) => moment;\n    set: (units: string | number | interface_4191, value: any) => moment;\n    startOf: (units: string) => moment;\n    subtract: (val: string | interface_4179, period: string | interface_4179) => moment;\n    to: (time: string | moment | RegExp | string[] | interface_4269, withoutSuffix: any) => any;\n    toArray: () => moment[];\n    toDate: () => Date;\n    toISOString: () => any;\n    toJSON: () => any;\n    toNow: (withoutSuffix: any) => any;\n    toObject: () => interface_4270;\n    toString: () => any;\n    unix: () => number;\n    utc: (keepLocalTime: any) => number | moment;\n    utcOffset: (input: number, keepLocalTime: any) => moment | number;\n    valueOf: () => Object | string;\n    week: (input: number) => number | moment;\n    weekYear: (input: number) => any;\n    weekday: (input: number) => moment | number;\n    weeks: (input: number) => number | moment;\n    weeksInYear: () => number;\n    year: (value: any) => moment | number;\n    years: () => moment;\n    zone: () => number;\n    zoneAbbr: () => string;\n    zoneName: () => string;\n}\n","containerDescription":"class moment"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.weekdays","newFunction":"function lists__listWeekdays (localeSorted, format, index) {\r\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.weekdays","oldFunction":"function lists__listWeekdays (format, index) {\r\n        return list(format, index, 'weekdays', 7, 'day');\r\n    }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.moment.weekdays","isClass":true,"newType":"(localeSorted: string | number, format: string | number, index: string | number) => Array<any>","newTypeDescription":"function","oldType":"(format: any, index: any) => Array<any>","oldArgCount":2,"newArgCount":3,"containerType":"class _moment {\n    constructor ();\n    static ISO_8601: () => void;\n    static calendarFormat: (myMoment: moment, now: moment) => string;\n    static createFromInputFallback: () => any;\n    static defaultFormat: string;\n    static defaultFormatUtc: string;\n    static defineLocale: (name: string, config: interface_4251) => Locale;\n    static deprecationHandler: void;\n    static duration: interface_4197;\n    static fn: interface_4271;\n    static invalid: (flags: interface_4237) => interface_4241;\n    static isDate: (input: number | moment | interface_4268 | number[]) => boolean;\n    static isDuration: (obj: Duration | interface_4272 | string) => boolean;\n    static isMoment: (obj: number | moment | interface_4273 | number[]) => boolean;\n    static lang: () => string;\n    static langData: () => Locale;\n    static locale: (key?: string, values?: interface_4274) => string;\n    static localeData: (key?: string | Duration) => Locale | interface_4048;\n    static locales: () => Array<any>;\n    static max: () => interface_4268 | moment;\n    static min: () => interface_4268 | moment;\n    static momentProperties: Array<any>;\n    static months: (format: any, index: any) => Array<any>;\n    static monthsShort: (format: any, index: any) => Array<any>;\n    static normalizeUnits: (units: string) => any;\n    static now: () => string;\n    static parseTwoDigitYear: (input: {length: any}) => string | number;\n    static parseZone: () => any;\n    static relativeTimeRounding: (roundingFunction: (x: number) => number) => boolean | ((x: number) => number);\n    static relativeTimeThreshold: (threshold: string | number, limit: any) => boolean;\n    static suppressDeprecationWarnings: boolean;\n    static unix: (input: number) => interface_4268 | moment;\n    static updateLocale: (name: string, config: interface_4278) => any;\n    static updateOffset: () => void;\n    static utc: (input: moment | RegExp | string | string[] | interface_4279, format: any, locale: any, strict: any) => interface_4210;\n    static version: string;\n    static weekdays: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysMin: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysShort: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    _d: Date;\n    _i: Array<any>;\n    _isAMomentObject: boolean;\n    _isUTC: boolean;\n    _isValid: boolean;\n    _locale: Locale;\n    _offset: number;\n    _pf: interface_4280;\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n    calendar: (time: any, formats: interface_4189) => any;\n    clone: () => moment;\n    creationData: () => interface_4252;\n    date: (value: number) => moment;\n    dates: () => moment;\n    day: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    dayOfYear: (input: number) => string | number | moment;\n    days: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    daysInMonth: () => number;\n    diff: (input: moment | string | RegExp | string[] | interface_4254, units: string, asFloat: boolean) => number;\n    endOf: (units: string) => moment;\n    format: (inputString: string) => any;\n    from: (time: moment | RegExp | string | string[] | interface_4255, withoutSuffix: any) => any;\n    fromNow: (withoutSuffix: any) => any;\n    get: (units: string | number) => moment;\n    hasAlignedHourOffset: (input: moment | RegExp | string | string[] | interface_4256) => boolean;\n    hour: (value: number) => moment;\n    hours: (value: number) => moment;\n    invalidAt: () => any;\n    isAfter: (input: string | moment | RegExp | string[] | interface_4257, units: any) => boolean;\n    isBefore: (input: string | RegExp | moment | string[] | interface_4259, units: any) => boolean;\n    isBetween: (from: string | RegExp | moment | string[] | interface_4261, to: string | moment | RegExp | string[] | interface_4263, units: any, inclusivity: string | interface_4193) => boolean;\n    isDST: () => boolean;\n    isDSTShifted: () => boolean;\n    isLeapYear: () => boolean;\n    isLocal: () => boolean;\n    isSame: (input: moment | RegExp | string | string[] | interface_4264, units: string) => boolean;\n    isSameOrAfter: (input: moment | string | RegExp | string[] | interface_4265, units: any) => boolean;\n    isSameOrBefore: (input: RegExp | string | moment | string[] | interface_4267, units: any) => boolean;\n    isUTC: () => boolean;\n    isUtc: () => boolean;\n    isUtcOffset: () => boolean;\n    isValid: () => boolean;\n    isoWeek: (input: number) => moment | number;\n    isoWeekYear: (input: number) => any;\n    isoWeekday: (input: string) => moment | number;\n    isoWeeks: (input: number) => moment | number;\n    isoWeeksInYear: () => number;\n    lang: () => any;\n    local: (keepLocalTime: any) => moment;\n    locale: (key: Duration | string) => string | Duration;\n    localeData: () => string | Locale;\n    max: () => interface_4268 | moment;\n    millisecond: (value: number) => moment;\n    milliseconds: (value: number) => moment;\n    min: () => interface_4268 | moment;\n    minute: (value: number) => moment;\n    minutes: (value: number) => moment;\n    month: (value: string) => moment | string | RegExp | string[] | interface_4054;\n    months: () => moment;\n    parseZone: () => moment;\n    parsingFlags: () => interface_4187;\n    quarter: (input: number) => number | moment;\n    quarters: (input: number) => number | moment;\n    second: (value: number) => moment;\n    seconds: (value: number) => moment;\n    set: (units: string | number | interface_4191, value: any) => moment;\n    startOf: (units: string) => moment;\n    subtract: (val: string | interface_4179, period: string | interface_4179) => moment;\n    to: (time: string | moment | RegExp | string[] | interface_4269, withoutSuffix: any) => any;\n    toArray: () => moment[];\n    toDate: () => Date;\n    toISOString: () => any;\n    toJSON: () => any;\n    toNow: (withoutSuffix: any) => any;\n    toObject: () => interface_4270;\n    toString: () => any;\n    unix: () => number;\n    utc: (keepLocalTime: any) => number | moment;\n    utcOffset: (input: number, keepLocalTime: any) => moment | number;\n    valueOf: () => Object | string;\n    week: (input: number) => number | moment;\n    weekYear: (input: number) => any;\n    weekday: (input: number) => moment | number;\n    weeks: (input: number) => number | moment;\n    weeksInYear: () => number;\n    year: (value: any) => moment | number;\n    years: () => moment;\n    zone: () => number;\n    zoneAbbr: () => string;\n    zoneName: () => string;\n}\n","containerDescription":"class moment"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.weekdaysShort","newFunction":"function lists__listWeekdaysShort (localeSorted, format, index) {\r\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.weekdaysShort","oldFunction":"function lists__listWeekdaysShort (format, index) {\r\n        return list(format, index, 'weekdaysShort', 7, 'day');\r\n    }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.moment.weekdaysShort","isClass":true,"newType":"(localeSorted: string | number, format: string | number, index: string | number) => Array<any>","newTypeDescription":"function","oldType":"(format: any, index: any) => Array<any>","oldArgCount":2,"newArgCount":3,"containerType":"class _moment {\n    constructor ();\n    static ISO_8601: () => void;\n    static calendarFormat: (myMoment: moment, now: moment) => string;\n    static createFromInputFallback: () => any;\n    static defaultFormat: string;\n    static defaultFormatUtc: string;\n    static defineLocale: (name: string, config: interface_4251) => Locale;\n    static deprecationHandler: void;\n    static duration: interface_4197;\n    static fn: interface_4271;\n    static invalid: (flags: interface_4237) => interface_4241;\n    static isDate: (input: number | moment | interface_4268 | number[]) => boolean;\n    static isDuration: (obj: Duration | interface_4272 | string) => boolean;\n    static isMoment: (obj: number | moment | interface_4273 | number[]) => boolean;\n    static lang: () => string;\n    static langData: () => Locale;\n    static locale: (key?: string, values?: interface_4274) => string;\n    static localeData: (key?: string | Duration) => Locale | interface_4048;\n    static locales: () => Array<any>;\n    static max: () => interface_4268 | moment;\n    static min: () => interface_4268 | moment;\n    static momentProperties: Array<any>;\n    static months: (format: any, index: any) => Array<any>;\n    static monthsShort: (format: any, index: any) => Array<any>;\n    static normalizeUnits: (units: string) => any;\n    static now: () => string;\n    static parseTwoDigitYear: (input: {length: any}) => string | number;\n    static parseZone: () => any;\n    static relativeTimeRounding: (roundingFunction: (x: number) => number) => boolean | ((x: number) => number);\n    static relativeTimeThreshold: (threshold: string | number, limit: any) => boolean;\n    static suppressDeprecationWarnings: boolean;\n    static unix: (input: number) => interface_4268 | moment;\n    static updateLocale: (name: string, config: interface_4278) => any;\n    static updateOffset: () => void;\n    static utc: (input: moment | RegExp | string | string[] | interface_4279, format: any, locale: any, strict: any) => interface_4210;\n    static version: string;\n    static weekdays: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysMin: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysShort: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    _d: Date;\n    _i: Array<any>;\n    _isAMomentObject: boolean;\n    _isUTC: boolean;\n    _isValid: boolean;\n    _locale: Locale;\n    _offset: number;\n    _pf: interface_4280;\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n    calendar: (time: any, formats: interface_4189) => any;\n    clone: () => moment;\n    creationData: () => interface_4252;\n    date: (value: number) => moment;\n    dates: () => moment;\n    day: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    dayOfYear: (input: number) => string | number | moment;\n    days: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    daysInMonth: () => number;\n    diff: (input: moment | string | RegExp | string[] | interface_4254, units: string, asFloat: boolean) => number;\n    endOf: (units: string) => moment;\n    format: (inputString: string) => any;\n    from: (time: moment | RegExp | string | string[] | interface_4255, withoutSuffix: any) => any;\n    fromNow: (withoutSuffix: any) => any;\n    get: (units: string | number) => moment;\n    hasAlignedHourOffset: (input: moment | RegExp | string | string[] | interface_4256) => boolean;\n    hour: (value: number) => moment;\n    hours: (value: number) => moment;\n    invalidAt: () => any;\n    isAfter: (input: string | moment | RegExp | string[] | interface_4257, units: any) => boolean;\n    isBefore: (input: string | RegExp | moment | string[] | interface_4259, units: any) => boolean;\n    isBetween: (from: string | RegExp | moment | string[] | interface_4261, to: string | moment | RegExp | string[] | interface_4263, units: any, inclusivity: string | interface_4193) => boolean;\n    isDST: () => boolean;\n    isDSTShifted: () => boolean;\n    isLeapYear: () => boolean;\n    isLocal: () => boolean;\n    isSame: (input: moment | RegExp | string | string[] | interface_4264, units: string) => boolean;\n    isSameOrAfter: (input: moment | string | RegExp | string[] | interface_4265, units: any) => boolean;\n    isSameOrBefore: (input: RegExp | string | moment | string[] | interface_4267, units: any) => boolean;\n    isUTC: () => boolean;\n    isUtc: () => boolean;\n    isUtcOffset: () => boolean;\n    isValid: () => boolean;\n    isoWeek: (input: number) => moment | number;\n    isoWeekYear: (input: number) => any;\n    isoWeekday: (input: string) => moment | number;\n    isoWeeks: (input: number) => moment | number;\n    isoWeeksInYear: () => number;\n    lang: () => any;\n    local: (keepLocalTime: any) => moment;\n    locale: (key: Duration | string) => string | Duration;\n    localeData: () => string | Locale;\n    max: () => interface_4268 | moment;\n    millisecond: (value: number) => moment;\n    milliseconds: (value: number) => moment;\n    min: () => interface_4268 | moment;\n    minute: (value: number) => moment;\n    minutes: (value: number) => moment;\n    month: (value: string) => moment | string | RegExp | string[] | interface_4054;\n    months: () => moment;\n    parseZone: () => moment;\n    parsingFlags: () => interface_4187;\n    quarter: (input: number) => number | moment;\n    quarters: (input: number) => number | moment;\n    second: (value: number) => moment;\n    seconds: (value: number) => moment;\n    set: (units: string | number | interface_4191, value: any) => moment;\n    startOf: (units: string) => moment;\n    subtract: (val: string | interface_4179, period: string | interface_4179) => moment;\n    to: (time: string | moment | RegExp | string[] | interface_4269, withoutSuffix: any) => any;\n    toArray: () => moment[];\n    toDate: () => Date;\n    toISOString: () => any;\n    toJSON: () => any;\n    toNow: (withoutSuffix: any) => any;\n    toObject: () => interface_4270;\n    toString: () => any;\n    unix: () => number;\n    utc: (keepLocalTime: any) => number | moment;\n    utcOffset: (input: number, keepLocalTime: any) => moment | number;\n    valueOf: () => Object | string;\n    week: (input: number) => number | moment;\n    weekYear: (input: number) => any;\n    weekday: (input: number) => moment | number;\n    weeks: (input: number) => number | moment;\n    weeksInYear: () => number;\n    year: (value: any) => moment | number;\n    years: () => moment;\n    zone: () => number;\n    zoneAbbr: () => string;\n    zoneName: () => string;\n}\n","containerDescription":"class moment"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.isBetween","newFunction":"function isBetween (from, to, units, inclusivity) {\r\n        inclusivity = inclusivity || '()';\r\n        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&\r\n            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.isBetween","oldFunction":"function isBetween (from, to, units) {\r\n        return this.isAfter(from, units) && this.isBefore(to, units);\r\n    }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.moment.fn.isBetween","isClass":false,"newType":"(from: string | RegExp | moment | string[] | interface_4261, to: string | moment | RegExp | string[] | interface_4263, units: any, inclusivity: string | interface_4193) => boolean","newTypeDescription":"function","oldType":"(from: {_isAMomentObject: any, isValid: () => any}, to: {_isAMomentObject: any, isValid: () => any}, units: any) => boolean","oldArgCount":3,"newArgCount":4,"containerType":"interface interface_4271 {\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n    calendar: (time: any, formats: interface_4189) => any;\n    clone: () => moment;\n    constructor: typeof moment;\n    creationData: () => interface_4252;\n    date: (value: number) => moment;\n    dates: () => moment;\n    day: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    dayOfYear: (input: number) => string | number | moment;\n    days: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    daysInMonth: () => number;\n    diff: (input: moment | string | RegExp | string[] | interface_4254, units: string, asFloat: boolean) => number;\n    endOf: (units: string) => moment;\n    format: (inputString: string) => any;\n    from: (time: moment | RegExp | string | string[] | interface_4255, withoutSuffix: any) => any;\n    fromNow: (withoutSuffix: any) => any;\n    get: (units: string | number) => moment;\n    hasAlignedHourOffset: (input: moment | RegExp | string | string[] | interface_4256) => boolean;\n    hour: (value: number) => moment;\n    hours: (value: number) => moment;\n    invalidAt: () => any;\n    isAfter: (input: string | moment | RegExp | string[] | interface_4257, units: any) => boolean;\n    isBefore: (input: string | RegExp | moment | string[] | interface_4259, units: any) => boolean;\n    isBetween: (from: string | RegExp | moment | string[] | interface_4261, to: string | moment | RegExp | string[] | interface_4263, units: any, inclusivity: string | interface_4193) => boolean;\n    isDST: () => boolean;\n    isDSTShifted: () => boolean;\n    isLeapYear: () => boolean;\n    isLocal: () => boolean;\n    isSame: (input: moment | RegExp | string | string[] | interface_4264, units: string) => boolean;\n    isSameOrAfter: (input: moment | string | RegExp | string[] | interface_4265, units: any) => boolean;\n    isSameOrBefore: (input: RegExp | string | moment | string[] | interface_4267, units: any) => boolean;\n    isUTC: () => boolean;\n    isUtc: () => boolean;\n    isUtcOffset: () => boolean;\n    isValid: () => boolean;\n    isoWeek: (input: number) => moment | number;\n    isoWeekYear: (input: number) => any;\n    isoWeekday: (input: string) => moment | number;\n    isoWeeks: (input: number) => moment | number;\n    isoWeeksInYear: () => number;\n    lang: () => any;\n    local: (keepLocalTime: any) => moment;\n    locale: (key: Duration | string) => string | Duration;\n    localeData: () => string | Locale;\n    max: () => interface_4268 | moment;\n    millisecond: (value: number) => moment;\n    milliseconds: (value: number) => moment;\n    min: () => interface_4268 | moment;\n    minute: (value: number) => moment;\n    minutes: (value: number) => moment;\n    month: (value: string) => moment | string | RegExp | string[] | interface_4054;\n    months: () => moment;\n    parseZone: () => moment;\n    parsingFlags: () => interface_4187;\n    quarter: (input: number) => number | moment;\n    quarters: (input: number) => number | moment;\n    second: (value: number) => moment;\n    seconds: (value: number) => moment;\n    set: (units: string | number | interface_4191, value: any) => moment;\n    startOf: (units: string) => moment;\n    subtract: (val: string | interface_4179, period: string | interface_4179) => moment;\n    to: (time: string | moment | RegExp | string[] | interface_4269, withoutSuffix: any) => any;\n    toArray: () => moment[];\n    toDate: () => Date;\n    toISOString: () => any;\n    toJSON: () => any;\n    toNow: (withoutSuffix: any) => any;\n    toObject: () => interface_4270;\n    toString: () => any;\n    unix: () => number;\n    utc: (keepLocalTime: any) => number | moment;\n    utcOffset: (input: number, keepLocalTime: any) => moment | number;\n    valueOf: () => Object | string;\n    week: (input: number) => number | moment;\n    weekYear: (input: number) => any;\n    weekday: (input: number) => moment | number;\n    weeks: (input: number) => number | moment;\n    weeksInYear: () => number;\n    year: (value: any) => moment | number;\n    years: () => moment;\n    zone: () => number;\n    zoneAbbr: () => string;\n    zoneName: () => string;\n}\n\n","containerDescription":"object"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.get","newFunction":"function stringGet (units) {\r\n        units = normalizeUnits(units);\r\n        if (isFunction(this[units])) {\r\n            return this[units]();\r\n        }\r\n        return this;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.get","oldFunction":"function getSet (units, value) {\r\n        var unit;\r\n        if (typeof units === 'object') {\r\n            for (unit in units) {\r\n                this.set(unit, units[unit]);\r\n            }\r\n        } else {\r\n            units = normalizeUnits(units);\r\n            if (isFunction(this[units])) {\r\n                return this[units](value);\r\n            }\r\n        }\r\n        return this;\r\n    }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.moment.fn.get","isClass":false,"newType":"(units: string | number) => moment","newTypeDescription":"function","oldType":"(units: string | number, value: any) => moment","oldArgCount":2,"newArgCount":1,"containerType":"interface interface_4271 {\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n    calendar: (time: any, formats: interface_4189) => any;\n    clone: () => moment;\n    constructor: typeof moment;\n    creationData: () => interface_4252;\n    date: (value: number) => moment;\n    dates: () => moment;\n    day: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    dayOfYear: (input: number) => string | number | moment;\n    days: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    daysInMonth: () => number;\n    diff: (input: moment | string | RegExp | string[] | interface_4254, units: string, asFloat: boolean) => number;\n    endOf: (units: string) => moment;\n    format: (inputString: string) => any;\n    from: (time: moment | RegExp | string | string[] | interface_4255, withoutSuffix: any) => any;\n    fromNow: (withoutSuffix: any) => any;\n    get: (units: string | number) => moment;\n    hasAlignedHourOffset: (input: moment | RegExp | string | string[] | interface_4256) => boolean;\n    hour: (value: number) => moment;\n    hours: (value: number) => moment;\n    invalidAt: () => any;\n    isAfter: (input: string | moment | RegExp | string[] | interface_4257, units: any) => boolean;\n    isBefore: (input: string | RegExp | moment | string[] | interface_4259, units: any) => boolean;\n    isBetween: (from: string | RegExp | moment | string[] | interface_4261, to: string | moment | RegExp | string[] | interface_4263, units: any, inclusivity: string | interface_4193) => boolean;\n    isDST: () => boolean;\n    isDSTShifted: () => boolean;\n    isLeapYear: () => boolean;\n    isLocal: () => boolean;\n    isSame: (input: moment | RegExp | string | string[] | interface_4264, units: string) => boolean;\n    isSameOrAfter: (input: moment | string | RegExp | string[] | interface_4265, units: any) => boolean;\n    isSameOrBefore: (input: RegExp | string | moment | string[] | interface_4267, units: any) => boolean;\n    isUTC: () => boolean;\n    isUtc: () => boolean;\n    isUtcOffset: () => boolean;\n    isValid: () => boolean;\n    isoWeek: (input: number) => moment | number;\n    isoWeekYear: (input: number) => any;\n    isoWeekday: (input: string) => moment | number;\n    isoWeeks: (input: number) => moment | number;\n    isoWeeksInYear: () => number;\n    lang: () => any;\n    local: (keepLocalTime: any) => moment;\n    locale: (key: Duration | string) => string | Duration;\n    localeData: () => string | Locale;\n    max: () => interface_4268 | moment;\n    millisecond: (value: number) => moment;\n    milliseconds: (value: number) => moment;\n    min: () => interface_4268 | moment;\n    minute: (value: number) => moment;\n    minutes: (value: number) => moment;\n    month: (value: string) => moment | string | RegExp | string[] | interface_4054;\n    months: () => moment;\n    parseZone: () => moment;\n    parsingFlags: () => interface_4187;\n    quarter: (input: number) => number | moment;\n    quarters: (input: number) => number | moment;\n    second: (value: number) => moment;\n    seconds: (value: number) => moment;\n    set: (units: string | number | interface_4191, value: any) => moment;\n    startOf: (units: string) => moment;\n    subtract: (val: string | interface_4179, period: string | interface_4179) => moment;\n    to: (time: string | moment | RegExp | string[] | interface_4269, withoutSuffix: any) => any;\n    toArray: () => moment[];\n    toDate: () => Date;\n    toISOString: () => any;\n    toJSON: () => any;\n    toNow: (withoutSuffix: any) => any;\n    toObject: () => interface_4270;\n    toString: () => any;\n    unix: () => number;\n    utc: (keepLocalTime: any) => number | moment;\n    utcOffset: (input: number, keepLocalTime: any) => moment | number;\n    valueOf: () => Object | string;\n    week: (input: number) => number | moment;\n    weekYear: (input: number) => any;\n    weekday: (input: number) => moment | number;\n    weeks: (input: number) => number | moment;\n    weeksInYear: () => number;\n    year: (value: any) => moment | number;\n    years: () => moment;\n    zone: () => number;\n    zoneAbbr: () => string;\n    zoneName: () => string;\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._pf","key":"meridiem","newType":null,"isAny":true,"isClass":false,"containerType":"interface interface_4280 {\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    meridiem: any;\n    nullInput: boolean;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._pf","key":"parsedDateParts","newType":"Array<any>","isAny":false,"isClass":false,"containerType":"interface interface_4280 {\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    meridiem: any;\n    nullInput: boolean;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n","containerDescription":"object"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.localeData.[function]","newFunction":"function locale_locales__getLocale (key) {\r\n        var locale;\r\n\r\n        if (key && key._locale && key._locale._abbr) {\r\n            key = key._locale._abbr;\r\n        }\r\n\r\n        if (!key) {\r\n            return globalLocale;\r\n        }\r\n\r\n        if (!isArray(key)) {\r\n            //short-circuit everything else\r\n            locale = loadLocale(key);\r\n            if (locale) {\r\n                return locale;\r\n            }\r\n            key = [key];\r\n        }\r\n\r\n        return chooseLocale(key);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.localeData.[function]","oldFunction":"function locale_locales__getLocale (key) {\r\n        var locale;\r\n\r\n        if (key && key._locale && key._locale._abbr) {\r\n            key = key._locale._abbr;\r\n        }\r\n\r\n        if (!key) {\r\n            return globalLocale;\r\n        }\r\n\r\n        if (!isArray(key)) {\r\n            //short-circuit everything else\r\n            locale = loadLocale(key);\r\n            if (locale) {\r\n                return locale;\r\n            }\r\n            key = [key];\r\n        }\r\n\r\n        return chooseLocale(key);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.localeData.[function].[arg0]","newType":"string | Duration","oldType":"string","containerType":"(key?: string | Duration) => Locale | interface_4048","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc.[function]","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc.[function]","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.utc.[function].[arg0]","newType":"moment | RegExp | string | string[] | interface_4279","oldType":"number[]","containerType":"(input: moment | RegExp | string | string[] | interface_4279, format: any, locale: any, strict: any) => interface_4210","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"LL","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"dd","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"hh","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"meridiem","newType":null,"isAny":true,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"LT","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"meridiemParse","newType":"RegExp","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"lastDay","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"parsedDateParts","newType":"Array<any>","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"abbr","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"day","newType":"(arg0: void) => {day: () => string}","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"yy","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"MM","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"mm","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"months","newType":"string[]","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"LLLL","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"weekdays","newType":"string[]","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"past","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"sameElse","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"longDateFormat","newType":"interface interface_4283 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n}\n\n","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"lastWeek","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"weekdaysShort","newType":"string[]","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"ordinalParse","newType":"RegExp","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"weekdaysMin","newType":"string[]","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"nextDay","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"week","newType":"{\n    dow: number, \n    doy: number\n}\n","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"LTS","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"L","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"LLL","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"dow","newType":"number","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"M","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"doy","newType":"number","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"calendar","newType":"interface interface_4282 {\n    lastDay: string;\n    lastWeek: string;\n    nextDay: string;\n    nextWeek: string;\n    sameDay: string;\n    sameElse: string;\n}\n\n","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"nextWeek","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"d","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"h","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"invalidDate","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"m","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"relativeTime","newType":"interface interface_4284 {\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    future: string;\n    h: string;\n    hh: string;\n    m: string;\n    mm: string;\n    past: string;\n    s: string;\n    y: string;\n    yy: string;\n}\n\n","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"s","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"future","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"sameDay","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"monthsShort","newType":"string[]","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"y","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc.[function].[return].ordinal","newFunction":"function (number) {\r\n            var b = number % 10,\r\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\r\n                    (b === 1) ? 'st' :\r\n                        (b === 2) ? 'nd' :\r\n                            (b === 3) ? 'rd' : 'th';\r\n            return number + output;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.utc.[function].[return]","key":"ordinal","newType":"(number: number) => string | RegExp | string[] | interface_4067","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"LL","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"dd","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"hh","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"meridiem","newType":null,"isAny":true,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"LT","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"meridiemParse","newType":"RegExp","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"lastDay","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"parsedDateParts","newType":"Array<any>","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"abbr","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"yy","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"MM","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"mm","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"LLLL","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"months","newType":"string[]","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"past","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"weekdays","newType":"string[]","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"sameElse","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"longDateFormat","newType":"interface interface_4283 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n}\n\n","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"lastWeek","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"weekdaysShort","newType":"string[]","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"ordinalParse","newType":"RegExp","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"weekdaysMin","newType":"string[]","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"nextDay","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"week","newType":"{\n    dow: number, \n    doy: number\n}\n","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"LTS","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"L","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"LLL","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"dow","newType":"number","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"M","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"doy","newType":"number","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"nextWeek","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"calendar","newType":"interface interface_4282 {\n    lastDay: string;\n    lastWeek: string;\n    nextDay: string;\n    nextWeek: string;\n    sameDay: string;\n    sameElse: string;\n}\n\n","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"d","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"h","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"m","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"invalidDate","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"relativeTime","newType":"interface interface_4284 {\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    future: string;\n    h: string;\n    hh: string;\n    m: string;\n    mm: string;\n    past: string;\n    s: string;\n    y: string;\n    yy: string;\n}\n\n","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"s","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"future","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"sameDay","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"y","newType":"string","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"monthsShort","newType":"string[]","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid.[function].[return].ordinal","newFunction":"function (number) {\r\n            var b = number % 10,\r\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\r\n                    (b === 1) ? 'st' :\r\n                        (b === 2) ? 'nd' :\r\n                            (b === 3) ? 'rd' : 'th';\r\n            return number + output;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[return]","key":"ordinal","newType":"(number: number) => string | RegExp | string[] | interface_4067","isAny":false,"isClass":false,"containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"LL","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"dd","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"hh","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"LT","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"meridiem","newType":null,"isAny":true,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"meridiemParse","newType":"RegExp","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"lastDay","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"parsedDateParts","newType":"Array<any>","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"yy","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"MM","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"mm","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"LLLL","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"months","newType":"string[]","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"past","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"weekdays","newType":"string[]","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"sameElse","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"longDateFormat","newType":"interface interface_4304 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n}\n\n","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"lastWeek","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"weekdaysShort","newType":"string[]","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"ordinalParse","newType":"RegExp","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"weekdaysMin","newType":"string[]","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"nextDay","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"week","newType":"{\n    dow: number, \n    doy: number\n}\n","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"LTS","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"L","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"LLL","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"M","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"dow","newType":"number","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"doy","newType":"number","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"nextWeek","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"calendar","newType":"interface interface_4299 {\n    lastDay: string;\n    lastWeek: string;\n    nextDay: string;\n    nextWeek: string;\n    sameDay: string;\n    sameElse: string;\n}\n\n","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"d","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"h","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"m","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"invalidDate","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"relativeTime","newType":"interface interface_4305 {\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    future: string;\n    h: string;\n    hh: string;\n    m: string;\n    mm: string;\n    past: string;\n    s: string;\n    y: string;\n    yy: string;\n}\n\n","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"s","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"future","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"sameDay","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"y","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"monthsShort","newType":"string[]","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.invalid.[function].[arg0]","key":"ordinal","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid","newFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid","oldFunction":"function valid__createInvalid (flags) {\r\n        var m = create_utc__createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.invalid.[function].[return]._a","newType":"moment | RegExp | string | interface_4310 | string[]","oldType":"// Seen as: a, array1\ninterface interface_4085 {\n    [index: number]: number;\n    length: number;\n}\n\n","containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"dd","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"hh","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"LL","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"meridiem","newType":null,"isAny":true,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"LT","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"meridiemParse","newType":"RegExp","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"lastDay","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"parsedDateParts","newType":"Array<any>","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"abbr","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"yy","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"MM","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"mm","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"months","newType":"string[]","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"LLLL","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"weekdays","newType":"string[]","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"past","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"sameElse","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"longDateFormat","newType":"interface interface_4308 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n}\n\n","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"lastWeek","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"weekdaysShort","newType":"string[]","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"ordinalParse","newType":"RegExp","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"weekdaysMin","newType":"string[]","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"nextDay","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"week","newType":"{\n    dow: number, \n    doy: number\n}\n","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"LTS","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"L","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"M","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"LLL","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"dow","newType":"number","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"doy","newType":"number","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"calendar","newType":"interface interface_4307 {\n    lastDay: string;\n    lastWeek: string;\n    nextDay: string;\n    nextWeek: string;\n    sameDay: string;\n    sameElse: string;\n}\n\n","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"nextWeek","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"d","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"h","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"invalidDate","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"m","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"relativeTime","newType":"interface interface_4309 {\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    future: string;\n    h: string;\n    hh: string;\n    m: string;\n    mm: string;\n    past: string;\n    s: string;\n    y: string;\n    yy: string;\n}\n\n","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"s","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"future","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"sameDay","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"monthsShort","newType":"string[]","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags","newFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"y","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags.[function].[return].ordinal","newFunction":"function (number) {\r\n            var b = number % 10,\r\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\r\n                    (b === 1) ? 'st' :\r\n                        (b === 2) ? 'nd' :\r\n                            (b === 3) ? 'rd' : 'th';\r\n            return number + output;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags","oldFunction":"function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.fn.parsingFlags.[function].[return]","key":"ordinal","newType":"(number: number) => string | RegExp | string[] | interface_4067","isAny":false,"isClass":false,"containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.month.[function]","newFunction":"function getSetMonth (value) {\r\n        if (value != null) {\r\n            setMonth(this, value);\r\n            utils_hooks__hooks.updateOffset(this, true);\r\n            return this;\r\n        } else {\r\n            return get_set__get(this, 'Month');\r\n        }\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.month.[function]","oldFunction":"function getSetMonth (value) {\r\n        if (value != null) {\r\n            setMonth(this, value);\r\n            utils_hooks__hooks.updateOffset(this, true);\r\n            return this;\r\n        } else {\r\n            return get_set__get(this, 'Month');\r\n        }\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.month.[function].[arg0]","newType":"string","oldType":"number","containerType":"(value: string) => moment | string | RegExp | string[] | interface_4054","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.to.[function]","newFunction":"function to (time, withoutSuffix) {\r\n        if (this.isValid() &&\r\n            ((isMoment(time) && time.isValid()) ||\r\n            local__createLocal(time).isValid())) {\r\n            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\r\n        } else {\r\n            return this.localeData().invalidDate();\r\n        }\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.to.[function]","oldFunction":"function to (time, withoutSuffix) {\r\n        if (this.isValid() &&\r\n            ((isMoment(time) && time.isValid()) ||\r\n            local__createLocal(time).isValid())) {\r\n            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\r\n        } else {\r\n            return this.localeData().invalidDate();\r\n        }\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.to.[function].[arg0]","newType":"string | moment | RegExp | string[] | interface_4269","oldType":"moment | interface_4112","containerType":"(time: string | moment | RegExp | string[] | interface_4269, withoutSuffix: any) => any","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.isSameOrBefore.[function]","newFunction":"function isSameOrBefore (input, units) {\r\n        return this.isSame(input, units) || this.isBefore(input,units);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.isSameOrBefore.[function]","oldFunction":"function isSameOrBefore (input, units) {\r\n        return this.isSame(input, units) || this.isBefore(input,units);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.isSameOrBefore.[function].[arg0]","newType":"RegExp | string | moment | string[] | interface_4267","oldType":"{\n    _isAMomentObject: any, \n    isValid: () => any\n}\n","containerType":"(input: RegExp | string | moment | string[] | interface_4267, units: any) => boolean","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.isAfter.[function]","newFunction":"function isAfter (input, units) {\r\n        var localInput = isMoment(input) ? input : local__createLocal(input);\r\n        if (!(this.isValid() && localInput.isValid())) {\r\n            return false;\r\n        }\r\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\r\n        if (units === 'millisecond') {\r\n            return this.valueOf() > localInput.valueOf();\r\n        } else {\r\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\r\n        }\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.isAfter.[function]","oldFunction":"function isAfter (input, units) {\r\n        var localInput = isMoment(input) ? input : local__createLocal(input);\r\n        if (!(this.isValid() && localInput.isValid())) {\r\n            return false;\r\n        }\r\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\r\n        if (units === 'millisecond') {\r\n            return +this > +localInput;\r\n        } else {\r\n            return +localInput < +this.clone().startOf(units);\r\n        }\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.isAfter.[function].[arg0]","newType":"string | moment | RegExp | string[] | interface_4257","oldType":"{\n    _isAMomentObject: any, \n    isValid: () => any\n}\n","containerType":"(input: string | moment | RegExp | string[] | interface_4257, units: any) => boolean","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.isSame.[function]","newFunction":"function isSame (input, units) {\r\n        var localInput = isMoment(input) ? input : local__createLocal(input),\r\n            inputMs;\r\n        if (!(this.isValid() && localInput.isValid())) {\r\n            return false;\r\n        }\r\n        units = normalizeUnits(units || 'millisecond');\r\n        if (units === 'millisecond') {\r\n            return this.valueOf() === localInput.valueOf();\r\n        } else {\r\n            inputMs = localInput.valueOf();\r\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\r\n        }\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.isSame.[function]","oldFunction":"function isSame (input, units) {\r\n        var localInput = isMoment(input) ? input : local__createLocal(input),\r\n            inputMs;\r\n        if (!(this.isValid() && localInput.isValid())) {\r\n            return false;\r\n        }\r\n        units = normalizeUnits(units || 'millisecond');\r\n        if (units === 'millisecond') {\r\n            return +this === +localInput;\r\n        } else {\r\n            inputMs = +localInput;\r\n            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));\r\n        }\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.isSame.[function].[arg0]","newType":"moment | RegExp | string | string[] | interface_4264","oldType":"{\n    _isAMomentObject: any, \n    isValid: () => any\n}\n","containerType":"(input: moment | RegExp | string | string[] | interface_4264, units: string) => boolean","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.month.[function]","newFunction":"function getSetMonth (value) {\r\n        if (value != null) {\r\n            setMonth(this, value);\r\n            utils_hooks__hooks.updateOffset(this, true);\r\n            return this;\r\n        } else {\r\n            return get_set__get(this, 'Month');\r\n        }\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.month.[function]","oldFunction":"function getSetMonth (value) {\r\n        if (value != null) {\r\n            setMonth(this, value);\r\n            utils_hooks__hooks.updateOffset(this, true);\r\n            return this;\r\n        } else {\r\n            return get_set__get(this, 'Month');\r\n        }\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.month.[function].[return]","newType":"moment | string | RegExp | string[] | interface_4054","oldType":"moment | number","containerType":"(value: string) => moment | string | RegExp | string[] | interface_4054","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.days.[function]","newFunction":"function getSetDayOfWeek (input) {\r\n        if (!this.isValid()) {\r\n            return input != null ? this : NaN;\r\n        }\r\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\r\n        if (input != null) {\r\n            input = parseWeekday(input, this.localeData());\r\n            return this.add(input - day, 'd');\r\n        } else {\r\n            return day;\r\n        }\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.days.[function]","oldFunction":"function getSetDayOfWeek (input) {\r\n        if (!this.isValid()) {\r\n            return input != null ? this : NaN;\r\n        }\r\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\r\n        if (input != null) {\r\n            input = parseWeekday(input, this.localeData());\r\n            return this.add(input - day, 'd');\r\n        } else {\r\n            return day;\r\n        }\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.days.[function].[return]","newType":"string | RegExp | string[] | moment | interface_4098","oldType":"moment | number","containerType":"(input: string) => string | RegExp | string[] | moment | interface_4098","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.isBefore.[function]","newFunction":"function isBefore (input, units) {\r\n        var localInput = isMoment(input) ? input : local__createLocal(input);\r\n        if (!(this.isValid() && localInput.isValid())) {\r\n            return false;\r\n        }\r\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\r\n        if (units === 'millisecond') {\r\n            return this.valueOf() < localInput.valueOf();\r\n        } else {\r\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\r\n        }\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.isBefore.[function]","oldFunction":"function isBefore (input, units) {\r\n        var localInput = isMoment(input) ? input : local__createLocal(input);\r\n        if (!(this.isValid() && localInput.isValid())) {\r\n            return false;\r\n        }\r\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\r\n        if (units === 'millisecond') {\r\n            return +this < +localInput;\r\n        } else {\r\n            return +this.clone().endOf(units) < +localInput;\r\n        }\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.isBefore.[function].[arg0]","newType":"string | RegExp | moment | string[] | interface_4259","oldType":"moment | interface_4110","containerType":"(input: string | RegExp | moment | string[] | interface_4259, units: any) => boolean","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc","newFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc","oldFunction":"function create_utc__createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.utc.[function].[return]._a","newType":"moment | RegExp | string | interface_4315 | string[]","oldType":"// Seen as: a, array1\ninterface interface_4047 {\n    [index: number]: number;\n    length: number;\n}\n\n","containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.from.[function]","newFunction":"function from (time, withoutSuffix) {\r\n        if (this.isValid() &&\r\n            ((isMoment(time) && time.isValid()) ||\r\n            local__createLocal(time).isValid())) {\r\n            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\r\n        } else {\r\n            return this.localeData().invalidDate();\r\n        }\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.from.[function]","oldFunction":"function from (time, withoutSuffix) {\r\n        if (this.isValid() &&\r\n            ((isMoment(time) && time.isValid()) ||\r\n            local__createLocal(time).isValid())) {\r\n            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\r\n        } else {\r\n            return this.localeData().invalidDate();\r\n        }\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.from.[function].[arg0]","newType":"moment | RegExp | string | string[] | interface_4255","oldType":"interface_4109 | moment","containerType":"(time: moment | RegExp | string | string[] | interface_4255, withoutSuffix: any) => any","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.add.[function]","newFunction":"function (val, period) {\r\n            var dur, tmp;\r\n            //invert the arguments, but complain about it\r\n            if (period !== null && !isNaN(+period)) {\r\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\r\n                    'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\r\n                tmp = val; val = period; period = tmp;\r\n            }\r\n\r\n            val = typeof val === 'string' ? +val : val;\r\n            dur = create__createDuration(val, period);\r\n            add_subtract__addSubtract(this, dur, direction);\r\n            return this;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.add.[function]","oldFunction":"function (val, period) {\r\n            var dur, tmp;\r\n            //invert the arguments, but complain about it\r\n            if (period !== null && !isNaN(+period)) {\r\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');\r\n                tmp = val; val = period; period = tmp;\r\n            }\r\n\r\n            val = typeof val === 'string' ? +val : val;\r\n            dur = create__createDuration(val, period);\r\n            add_subtract__addSubtract(this, dur, direction);\r\n            return this;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.add.[function].[return]","newType":"moment | string | string[] | RegExp | interface_4172","oldType":"moment | number","containerType":"(val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.format.[function]","newFunction":"function format (inputString) {\r\n        if (!inputString) {\r\n            inputString = this.isUtc() ? utils_hooks__hooks.defaultFormatUtc : utils_hooks__hooks.defaultFormat;\r\n        }\r\n        var output = formatMoment(this, inputString);\r\n        return this.localeData().postformat(output);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.format.[function]","oldFunction":"function format (inputString) {\r\n        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);\r\n        return this.localeData().postformat(output);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.format.[function].[arg0]","newType":"string","oldType":"any","containerType":"(inputString: string) => any","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.diff.[function]","newFunction":"function diff (input, units, asFloat) {\r\n        var that,\r\n            zoneDelta,\r\n            delta, output;\r\n\r\n        if (!this.isValid()) {\r\n            return NaN;\r\n        }\r\n\r\n        that = cloneWithOffset(input, this);\r\n\r\n        if (!that.isValid()) {\r\n            return NaN;\r\n        }\r\n\r\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\r\n\r\n        units = normalizeUnits(units);\r\n\r\n        if (units === 'year' || units === 'month' || units === 'quarter') {\r\n            output = monthDiff(this, that);\r\n            if (units === 'quarter') {\r\n                output = output / 3;\r\n            } else if (units === 'year') {\r\n                output = output / 12;\r\n            }\r\n        } else {\r\n            delta = this - that;\r\n            output = units === 'second' ? delta / 1e3 : // 1000\r\n                units === 'minute' ? delta / 6e4 : // 1000 * 60\r\n                    units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60\r\n                        units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst\r\n                            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst\r\n                                delta;\r\n        }\r\n        return asFloat ? output : absFloor(output);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.diff.[function]","oldFunction":"function diff (input, units, asFloat) {\r\n        var that,\r\n            zoneDelta,\r\n            delta, output;\r\n\r\n        if (!this.isValid()) {\r\n            return NaN;\r\n        }\r\n\r\n        that = cloneWithOffset(input, this);\r\n\r\n        if (!that.isValid()) {\r\n            return NaN;\r\n        }\r\n\r\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\r\n\r\n        units = normalizeUnits(units);\r\n\r\n        if (units === 'year' || units === 'month' || units === 'quarter') {\r\n            output = monthDiff(this, that);\r\n            if (units === 'quarter') {\r\n                output = output / 3;\r\n            } else if (units === 'year') {\r\n                output = output / 12;\r\n            }\r\n        } else {\r\n            delta = this - that;\r\n            output = units === 'second' ? delta / 1e3 : // 1000\r\n                units === 'minute' ? delta / 6e4 : // 1000 * 60\r\n                    units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60\r\n                        units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst\r\n                            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst\r\n                                delta;\r\n        }\r\n        return asFloat ? output : absFloor(output);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.diff.[function].[arg0]","newType":"moment | string | RegExp | string[] | interface_4254","oldType":"{\n    _isAMomentObject: any\n}\n","containerType":"(input: moment | string | RegExp | string[] | interface_4254, units: string, asFloat: boolean) => number","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.isSameOrAfter.[function]","newFunction":"function isSameOrAfter (input, units) {\r\n        return this.isSame(input, units) || this.isAfter(input,units);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.isSameOrAfter.[function]","oldFunction":"function isSameOrAfter (input, units) {\r\n        return this.isSame(input, units) || this.isAfter(input,units);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.isSameOrAfter.[function].[arg0]","newType":"moment | string | RegExp | string[] | interface_4265","oldType":"{\n    _isAMomentObject: any, \n    isValid: () => any\n}\n","containerType":"(input: moment | string | RegExp | string[] | interface_4265, units: any) => boolean","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.locale.[function]","newFunction":"function locale (key) {\r\n        var newLocaleData;\r\n\r\n        if (key === undefined) {\r\n            return this._locale._abbr;\r\n        } else {\r\n            newLocaleData = locale_locales__getLocale(key);\r\n            if (newLocaleData != null) {\r\n                this._locale = newLocaleData;\r\n            }\r\n            return this;\r\n        }\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.locale.[function]","oldFunction":"function locale (key) {\r\n        var newLocaleData;\r\n\r\n        if (key === undefined) {\r\n            return this._locale._abbr;\r\n        } else {\r\n            newLocaleData = locale_locales__getLocale(key);\r\n            if (newLocaleData != null) {\r\n                this._locale = newLocaleData;\r\n            }\r\n            return this;\r\n        }\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.locale.[function].[arg0]","newType":"Duration | string","oldType":"string","containerType":"(key: Duration | string) => string | Duration","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.hasAlignedHourOffset.[function]","newFunction":"function hasAlignedHourOffset (input) {\r\n        if (!this.isValid()) {\r\n            return false;\r\n        }\r\n        input = input ? local__createLocal(input).utcOffset() : 0;\r\n\r\n        return (this.utcOffset() - input) % 60 === 0;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.hasAlignedHourOffset.[function]","oldFunction":"function hasAlignedHourOffset (input) {\r\n        if (!this.isValid()) {\r\n            return false;\r\n        }\r\n        input = input ? local__createLocal(input).utcOffset() : 0;\r\n\r\n        return (this.utcOffset() - input) % 60 === 0;\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.hasAlignedHourOffset.[function].[arg0]","newType":"moment | RegExp | string | string[] | interface_4256","oldType":"number","containerType":"(input: moment | RegExp | string | string[] | interface_4256) => boolean","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.set.[function]","newFunction":"function stringSet (units, value) {\r\n        if (typeof units === 'object') {\r\n            units = normalizeObjectUnits(units);\r\n            var prioritized = getPrioritizedUnits(units);\r\n            for (var i = 0; i < prioritized.length; i++) {\r\n                this[prioritized[i].unit](units[prioritized[i].unit]);\r\n            }\r\n        } else {\r\n            units = normalizeUnits(units);\r\n            if (isFunction(this[units])) {\r\n                return this[units](value);\r\n            }\r\n        }\r\n        return this;\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.set.[function]","oldFunction":"function getSet (units, value) {\r\n        var unit;\r\n        if (typeof units === 'object') {\r\n            for (unit in units) {\r\n                this.set(unit, units[unit]);\r\n            }\r\n        } else {\r\n            units = normalizeUnits(units);\r\n            if (isFunction(this[units])) {\r\n                return this[units](value);\r\n            }\r\n        }\r\n        return this;\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.set.[function].[arg0]","newType":"string | number | interface_4191","oldType":"string | number","containerType":"(units: string | number | interface_4191, value: any) => moment","containerDescription":"function"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.valueOf.[function]","newFunction":"function to_type__valueOf () {\r\n        return this._d.valueOf() - ((this._offset || 0) * 60000);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.valueOf.[function]","oldFunction":"function to_type__valueOf () {\r\n        return +this._d - ((this._offset || 0) * 60000);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.valueOf.[function].[return]","newType":"Object | string","oldType":"number","containerType":"() => Object | string","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.calendar.[function]","newFunction":"function moment_calendar__calendar (time, formats) {\r\n        // We want to compare the start of today, vs this.\r\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\r\n        var now = time || local__createLocal(),\r\n            sod = cloneWithOffset(now, this).startOf('day'),\r\n            format = utils_hooks__hooks.calendarFormat(this, sod) || 'sameElse';\r\n\r\n        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\r\n\r\n        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.calendar.[function]","oldFunction":"function moment_calendar__calendar (time, formats) {\r\n        // We want to compare the start of today, vs this.\r\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\r\n        var now = time || local__createLocal(),\r\n            sod = cloneWithOffset(now, this).startOf('day'),\r\n            diff = this.diff(sod, 'days', true),\r\n            format = diff < -6 ? 'sameElse' :\r\n                diff < -1 ? 'lastWeek' :\r\n                    diff < 0 ? 'lastDay' :\r\n                        diff < 1 ? 'sameDay' :\r\n                            diff < 2 ? 'nextDay' :\r\n                                diff < 7 ? 'nextWeek' : 'sameElse';\r\n\r\n        var output = formats && (isFunction(formats[format]) ? formats[format]() : formats[format]);\r\n\r\n        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.calendar.[function].[arg1].[indexer]","newType":"string | string[] | RegExp | interface_4058","oldType":"RegExp | string | ((isStrict: string, locale: {_meridiemParse: any, _ordinalParse: any, _ordinalParseLenient: any, monthsRegex: (arg0: void) => any, monthsShortRegex: (arg0: void) => any}) => RegExp | moment | string | ((isStrict: string, locale: {_meridiemParse: any, _ordinalParse: any, _ordinalParseLenient: any, monthsRegex: (arg0: void) => any, monthsShortRegex: (arg0: void) => any}) => RegExp | moment | string | ((isStrict: string, locale: {_meridiemParse: any, _ordinalParse: any, _ordinalParseLenient: any, monthsRegex: (arg0: void) => any, monthsShortRegex: (arg0: void) => any}) => RegExp | moment | string | (any))))","containerType":"// Seen as: formats\ninterface interface_4189 {\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.duration.fn.add.[function]","newFunction":"function duration_add_subtract__add (input, value) {\r\n        return duration_add_subtract__addSubtract(this, input, value, 1);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.duration.fn.add.[function]","oldFunction":"function duration_add_subtract__add (input, value) {\r\n        return duration_add_subtract__addSubtract(this, input, value, 1);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.duration.fn.add.[function].[return]","newType":"Duration","oldType":"Duration | number","containerType":"(input: string | interface_4160, value: string | number) => Duration","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid.[function].[arg0].[function]","newFunction":"function getSetMonth (value) {\r\n        if (value != null) {\r\n            setMonth(this, value);\r\n            utils_hooks__hooks.updateOffset(this, true);\r\n            return this;\r\n        } else {\r\n            return get_set__get(this, 'Month');\r\n        }\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid.[function].[arg0].[function]","oldFunction":"function getSetMonth (value) {\r\n        if (value != null) {\r\n            setMonth(this, value);\r\n            utils_hooks__hooks.updateOffset(this, true);\r\n            return this;\r\n        } else {\r\n            return get_set__get(this, 'Month');\r\n        }\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.invalid.[function].[arg0].[function].[return]","newType":"any","oldType":"Locale | moment | string | interface_3928","containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid.[function].[arg0].[function]","newFunction":"function getSetMonth (value) {\r\n        if (value != null) {\r\n            setMonth(this, value);\r\n            utils_hooks__hooks.updateOffset(this, true);\r\n            return this;\r\n        } else {\r\n            return get_set__get(this, 'Month');\r\n        }\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid.[function].[arg0].[function]","oldFunction":"function getSetMonth (value) {\r\n        if (value != null) {\r\n            setMonth(this, value);\r\n            utils_hooks__hooks.updateOffset(this, true);\r\n            return this;\r\n        } else {\r\n            return get_set__get(this, 'Month');\r\n        }\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.invalid.[function].[arg0].[function].[arg0]","newType":"Duration | {_d: Date, _i: string | number, _useUTC: any} | string","oldType":"{_d: Date, _i: string | number, _useUTC: any} | string","containerType":"interface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.utc.[function].[return].[function]","newFunction":"function () {\r\n            if (utils_hooks__hooks.deprecationHandler != null) {\r\n                utils_hooks__hooks.deprecationHandler(null, msg);\r\n            }\r\n            if (firstTime) {\r\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\\n' + (new Error()).stack);\r\n                firstTime = false;\r\n            }\r\n            return fn.apply(this, arguments);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.utc.[function].[return].[function]","oldFunction":"function () {\r\n            if (firstTime) {\r\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\\n' + (new Error()).stack);\r\n                firstTime = false;\r\n            }\r\n            return fn.apply(this, arguments);\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.utc.[function].[return].[function].[return]","newType":"any","oldType":"Locale | interface_4111 | moment | string","containerType":"// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.invalid.[function].[return].[function]","newFunction":"function () {\r\n            if (utils_hooks__hooks.deprecationHandler != null) {\r\n                utils_hooks__hooks.deprecationHandler(null, msg);\r\n            }\r\n            if (firstTime) {\r\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\\n' + (new Error()).stack);\r\n                firstTime = false;\r\n            }\r\n            return fn.apply(this, arguments);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.invalid.[function].[return].[function]","oldFunction":"function () {\r\n            if (firstTime) {\r\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\\n' + (new Error()).stack);\r\n                firstTime = false;\r\n            }\r\n            return fn.apply(this, arguments);\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.invalid.[function].[return].[function].[return]","newType":"any","oldType":"interface_4111 | Locale | string | moment","containerType":"// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.fn.parsingFlags.[function].[return].[function]","newFunction":"function () {\r\n            if (utils_hooks__hooks.deprecationHandler != null) {\r\n                utils_hooks__hooks.deprecationHandler(null, msg);\r\n            }\r\n            if (firstTime) {\r\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\\n' + (new Error()).stack);\r\n                firstTime = false;\r\n            }\r\n            return fn.apply(this, arguments);\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.fn.parsingFlags.[function].[return].[function]","oldFunction":"function () {\r\n            if (firstTime) {\r\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\\n' + (new Error()).stack);\r\n                firstTime = false;\r\n            }\r\n            return fn.apply(this, arguments);\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.fn.parsingFlags.[function].[return].[function].[return]","newType":"any","oldType":"Locale | interface_4111 | moment | string","containerType":"interface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n","containerDescription":"interface"},{"isInOldDec":true,"isInOldDecContainer":true,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.locale.[function].[arg1].ordinal.[function]","newFunction":"function (number) {\r\n            var b = number % 10,\r\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\r\n                    (b === 1) ? 'st' :\r\n                        (b === 2) ? 'nd' :\r\n                            (b === 3) ? 'rd' : 'th';\r\n            return number + output;\r\n        }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.locale.[function].[arg1].ordinal.[function]","oldFunction":"function (number) {\r\n            var b = number % 10,\r\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\r\n                    (b === 1) ? 'st' :\r\n                        (b === 2) ? 'nd' :\r\n                            (b === 3) ? 'rd' : 'th';\r\n            return number + output;\r\n        }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.locale.[function].[arg1].ordinal.[function].[return]","newType":"string | RegExp | string[] | interface_4067","oldType":"string | number","containerType":"(number: number) => string | RegExp | string[] | interface_4067","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"changedArgCount","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor]","isClass":false,"newType":"(config: interface_4281) => void","newTypeDescription":"function","oldType":"() => void","oldArgCount":0,"newArgCount":1,"containerType":"Locale","containerDescription":"class Locale"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"removedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","key":"_monthsShortRegex","isClass":false,"containerType":"class Locale {\n    constructor (config: interface_4281);\n    _abbr: string;\n    _calendar: interface_4282;\n    _config: interface_4285;\n    _invalidDate: string;\n    _longDateFormat: interface_4283;\n    _meridiemParse: RegExp;\n    _months: string[];\n    _monthsShort: string[];\n    _ordinalParse: RegExp;\n    _ordinalParseLenient: RegExp;\n    _relativeTime: interface_4284;\n    _week: {dow: number, doy: number};\n    _weekdays: string[];\n    _weekdaysMin: string[];\n    _weekdaysShort: string[];\n    calendar: (key: string, mom: any, now: any) => {call: void};\n    firstDayOfWeek: () => number;\n    firstDayOfYear: () => number;\n    invalidDate: () => string;\n    isPM: (input: string | number) => boolean;\n    longDateFormat: (key: string | number) => any;\n    meridiem: (hours: number, minutes: any, isLower: any) => string;\n    months: (m: {month: () => string}, format: string) => string;\n    monthsParse: (monthName: {toLocaleLowerCase: () => any}, format: string, strict: any) => number;\n    monthsRegex: (isStrict: any) => RegExp;\n    monthsShort: (m: {month: () => string}, format: string) => string;\n    monthsShortRegex: (isStrict: any) => RegExp;\n    ordinal: (number: any) => any;\n    pastFuture: (diff: number, output: any) => any;\n    postformat: (string: any) => any;\n    preparse: (string: any) => any;\n    relativeTime: (number: ((substring: string, args: any) => string) | string, withoutSuffix: interface_4286, string: string | number, isFuture: any) => any;\n    set: (config: interface_4281) => void;\n    week: (mom: {dayOfYear: () => number, year: () => number}) => number;\n    weekdays: (m: {day: () => string}, format: string) => string;\n    weekdaysMin: (m: {day: () => string | number}) => string;\n    weekdaysMinRegex: (isStrict: any) => RegExp;\n    weekdaysParse: (weekdayName: {toLocaleLowerCase: () => any}, format: string, strict: any) => number;\n    weekdaysRegex: (isStrict: any) => RegExp;\n    weekdaysShort: (m: {day: () => string | number}) => string;\n    weekdaysShortRegex: (isStrict: any) => RegExp;\n}\n","containerDescription":"class Locale"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"removedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","key":"_monthsRegex","isClass":false,"containerType":"class Locale {\n    constructor (config: interface_4281);\n    _abbr: string;\n    _calendar: interface_4282;\n    _config: interface_4285;\n    _invalidDate: string;\n    _longDateFormat: interface_4283;\n    _meridiemParse: RegExp;\n    _months: string[];\n    _monthsShort: string[];\n    _ordinalParse: RegExp;\n    _ordinalParseLenient: RegExp;\n    _relativeTime: interface_4284;\n    _week: {dow: number, doy: number};\n    _weekdays: string[];\n    _weekdaysMin: string[];\n    _weekdaysShort: string[];\n    calendar: (key: string, mom: any, now: any) => {call: void};\n    firstDayOfWeek: () => number;\n    firstDayOfYear: () => number;\n    invalidDate: () => string;\n    isPM: (input: string | number) => boolean;\n    longDateFormat: (key: string | number) => any;\n    meridiem: (hours: number, minutes: any, isLower: any) => string;\n    months: (m: {month: () => string}, format: string) => string;\n    monthsParse: (monthName: {toLocaleLowerCase: () => any}, format: string, strict: any) => number;\n    monthsRegex: (isStrict: any) => RegExp;\n    monthsShort: (m: {month: () => string}, format: string) => string;\n    monthsShortRegex: (isStrict: any) => RegExp;\n    ordinal: (number: any) => any;\n    pastFuture: (diff: number, output: any) => any;\n    postformat: (string: any) => any;\n    preparse: (string: any) => any;\n    relativeTime: (number: ((substring: string, args: any) => string) | string, withoutSuffix: interface_4286, string: string | number, isFuture: any) => any;\n    set: (config: interface_4281) => void;\n    week: (mom: {dayOfYear: () => number, year: () => number}) => number;\n    weekdays: (m: {day: () => string}, format: string) => string;\n    weekdaysMin: (m: {day: () => string | number}) => string;\n    weekdaysMinRegex: (isStrict: any) => RegExp;\n    weekdaysParse: (weekdayName: {toLocaleLowerCase: () => any}, format: string, strict: any) => number;\n    weekdaysRegex: (isStrict: any) => RegExp;\n    weekdaysShort: (m: {day: () => string | number}) => string;\n    weekdaysShortRegex: (isStrict: any) => RegExp;\n}\n","containerDescription":"class Locale"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"removedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","key":"_ordinal","isClass":false,"containerType":"class Locale {\n    constructor (config: interface_4281);\n    _abbr: string;\n    _calendar: interface_4282;\n    _config: interface_4285;\n    _invalidDate: string;\n    _longDateFormat: interface_4283;\n    _meridiemParse: RegExp;\n    _months: string[];\n    _monthsShort: string[];\n    _ordinalParse: RegExp;\n    _ordinalParseLenient: RegExp;\n    _relativeTime: interface_4284;\n    _week: {dow: number, doy: number};\n    _weekdays: string[];\n    _weekdaysMin: string[];\n    _weekdaysShort: string[];\n    calendar: (key: string, mom: any, now: any) => {call: void};\n    firstDayOfWeek: () => number;\n    firstDayOfYear: () => number;\n    invalidDate: () => string;\n    isPM: (input: string | number) => boolean;\n    longDateFormat: (key: string | number) => any;\n    meridiem: (hours: number, minutes: any, isLower: any) => string;\n    months: (m: {month: () => string}, format: string) => string;\n    monthsParse: (monthName: {toLocaleLowerCase: () => any}, format: string, strict: any) => number;\n    monthsRegex: (isStrict: any) => RegExp;\n    monthsShort: (m: {month: () => string}, format: string) => string;\n    monthsShortRegex: (isStrict: any) => RegExp;\n    ordinal: (number: any) => any;\n    pastFuture: (diff: number, output: any) => any;\n    postformat: (string: any) => any;\n    preparse: (string: any) => any;\n    relativeTime: (number: ((substring: string, args: any) => string) | string, withoutSuffix: interface_4286, string: string | number, isFuture: any) => any;\n    set: (config: interface_4281) => void;\n    week: (mom: {dayOfYear: () => number, year: () => number}) => number;\n    weekdays: (m: {day: () => string}, format: string) => string;\n    weekdaysMin: (m: {day: () => string | number}) => string;\n    weekdaysMinRegex: (isStrict: any) => RegExp;\n    weekdaysParse: (weekdayName: {toLocaleLowerCase: () => any}, format: string, strict: any) => number;\n    weekdaysRegex: (isStrict: any) => RegExp;\n    weekdaysShort: (m: {day: () => string | number}) => string;\n    weekdaysShortRegex: (isStrict: any) => RegExp;\n}\n","containerDescription":"class Locale"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","key":"weekdaysRegex","newType":"(isStrict: any) => RegExp","isAny":false,"isClass":false,"containerType":"class Locale {\n    constructor (config: interface_4281);\n    _abbr: string;\n    _calendar: interface_4282;\n    _config: interface_4285;\n    _invalidDate: string;\n    _longDateFormat: interface_4283;\n    _meridiemParse: RegExp;\n    _months: string[];\n    _monthsShort: string[];\n    _ordinalParse: RegExp;\n    _ordinalParseLenient: RegExp;\n    _relativeTime: interface_4284;\n    _week: {dow: number, doy: number};\n    _weekdays: string[];\n    _weekdaysMin: string[];\n    _weekdaysShort: string[];\n    calendar: (key: string, mom: any, now: any) => {call: void};\n    firstDayOfWeek: () => number;\n    firstDayOfYear: () => number;\n    invalidDate: () => string;\n    isPM: (input: string | number) => boolean;\n    longDateFormat: (key: string | number) => any;\n    meridiem: (hours: number, minutes: any, isLower: any) => string;\n    months: (m: {month: () => string}, format: string) => string;\n    monthsParse: (monthName: {toLocaleLowerCase: () => any}, format: string, strict: any) => number;\n    monthsRegex: (isStrict: any) => RegExp;\n    monthsShort: (m: {month: () => string}, format: string) => string;\n    monthsShortRegex: (isStrict: any) => RegExp;\n    ordinal: (number: any) => any;\n    pastFuture: (diff: number, output: any) => any;\n    postformat: (string: any) => any;\n    preparse: (string: any) => any;\n    relativeTime: (number: ((substring: string, args: any) => string) | string, withoutSuffix: interface_4286, string: string | number, isFuture: any) => any;\n    set: (config: interface_4281) => void;\n    week: (mom: {dayOfYear: () => number, year: () => number}) => number;\n    weekdays: (m: {day: () => string}, format: string) => string;\n    weekdaysMin: (m: {day: () => string | number}) => string;\n    weekdaysMinRegex: (isStrict: any) => RegExp;\n    weekdaysParse: (weekdayName: {toLocaleLowerCase: () => any}, format: string, strict: any) => number;\n    weekdaysRegex: (isStrict: any) => RegExp;\n    weekdaysShort: (m: {day: () => string | number}) => string;\n    weekdaysShortRegex: (isStrict: any) => RegExp;\n}\n","containerDescription":"class Locale"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","key":"_config","newType":"interface interface_4285 {\n    abbr: string;\n    calendar: interface_4282;\n    invalidDate: string;\n    longDateFormat: interface_4283;\n    meridiemParse: RegExp;\n    months: string[];\n    monthsShort: string[];\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    relativeTime: interface_4284;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n}\n\n","isAny":false,"isClass":false,"containerType":"class Locale {\n    constructor (config: interface_4281);\n    _abbr: string;\n    _calendar: interface_4282;\n    _config: interface_4285;\n    _invalidDate: string;\n    _longDateFormat: interface_4283;\n    _meridiemParse: RegExp;\n    _months: string[];\n    _monthsShort: string[];\n    _ordinalParse: RegExp;\n    _ordinalParseLenient: RegExp;\n    _relativeTime: interface_4284;\n    _week: {dow: number, doy: number};\n    _weekdays: string[];\n    _weekdaysMin: string[];\n    _weekdaysShort: string[];\n    calendar: (key: string, mom: any, now: any) => {call: void};\n    firstDayOfWeek: () => number;\n    firstDayOfYear: () => number;\n    invalidDate: () => string;\n    isPM: (input: string | number) => boolean;\n    longDateFormat: (key: string | number) => any;\n    meridiem: (hours: number, minutes: any, isLower: any) => string;\n    months: (m: {month: () => string}, format: string) => string;\n    monthsParse: (monthName: {toLocaleLowerCase: () => any}, format: string, strict: any) => number;\n    monthsRegex: (isStrict: any) => RegExp;\n    monthsShort: (m: {month: () => string}, format: string) => string;\n    monthsShortRegex: (isStrict: any) => RegExp;\n    ordinal: (number: any) => any;\n    pastFuture: (diff: number, output: any) => any;\n    postformat: (string: any) => any;\n    preparse: (string: any) => any;\n    relativeTime: (number: ((substring: string, args: any) => string) | string, withoutSuffix: interface_4286, string: string | number, isFuture: any) => any;\n    set: (config: interface_4281) => void;\n    week: (mom: {dayOfYear: () => number, year: () => number}) => number;\n    weekdays: (m: {day: () => string}, format: string) => string;\n    weekdaysMin: (m: {day: () => string | number}) => string;\n    weekdaysMinRegex: (isStrict: any) => RegExp;\n    weekdaysParse: (weekdayName: {toLocaleLowerCase: () => any}, format: string, strict: any) => number;\n    weekdaysRegex: (isStrict: any) => RegExp;\n    weekdaysShort: (m: {day: () => string | number}) => string;\n    weekdaysShortRegex: (isStrict: any) => RegExp;\n}\n","containerDescription":"class Locale"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","key":"weekdaysShortRegex","newType":"(isStrict: any) => RegExp","isAny":false,"isClass":false,"containerType":"class Locale {\n    constructor (config: interface_4281);\n    _abbr: string;\n    _calendar: interface_4282;\n    _config: interface_4285;\n    _invalidDate: string;\n    _longDateFormat: interface_4283;\n    _meridiemParse: RegExp;\n    _months: string[];\n    _monthsShort: string[];\n    _ordinalParse: RegExp;\n    _ordinalParseLenient: RegExp;\n    _relativeTime: interface_4284;\n    _week: {dow: number, doy: number};\n    _weekdays: string[];\n    _weekdaysMin: string[];\n    _weekdaysShort: string[];\n    calendar: (key: string, mom: any, now: any) => {call: void};\n    firstDayOfWeek: () => number;\n    firstDayOfYear: () => number;\n    invalidDate: () => string;\n    isPM: (input: string | number) => boolean;\n    longDateFormat: (key: string | number) => any;\n    meridiem: (hours: number, minutes: any, isLower: any) => string;\n    months: (m: {month: () => string}, format: string) => string;\n    monthsParse: (monthName: {toLocaleLowerCase: () => any}, format: string, strict: any) => number;\n    monthsRegex: (isStrict: any) => RegExp;\n    monthsShort: (m: {month: () => string}, format: string) => string;\n    monthsShortRegex: (isStrict: any) => RegExp;\n    ordinal: (number: any) => any;\n    pastFuture: (diff: number, output: any) => any;\n    postformat: (string: any) => any;\n    preparse: (string: any) => any;\n    relativeTime: (number: ((substring: string, args: any) => string) | string, withoutSuffix: interface_4286, string: string | number, isFuture: any) => any;\n    set: (config: interface_4281) => void;\n    week: (mom: {dayOfYear: () => number, year: () => number}) => number;\n    weekdays: (m: {day: () => string}, format: string) => string;\n    weekdaysMin: (m: {day: () => string | number}) => string;\n    weekdaysMinRegex: (isStrict: any) => RegExp;\n    weekdaysParse: (weekdayName: {toLocaleLowerCase: () => any}, format: string, strict: any) => number;\n    weekdaysRegex: (isStrict: any) => RegExp;\n    weekdaysShort: (m: {day: () => string | number}) => string;\n    weekdaysShortRegex: (isStrict: any) => RegExp;\n}\n","containerDescription":"class Locale"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","key":"weekdaysMinRegex","newType":"(isStrict: any) => RegExp","isAny":false,"isClass":false,"containerType":"class Locale {\n    constructor (config: interface_4281);\n    _abbr: string;\n    _calendar: interface_4282;\n    _config: interface_4285;\n    _invalidDate: string;\n    _longDateFormat: interface_4283;\n    _meridiemParse: RegExp;\n    _months: string[];\n    _monthsShort: string[];\n    _ordinalParse: RegExp;\n    _ordinalParseLenient: RegExp;\n    _relativeTime: interface_4284;\n    _week: {dow: number, doy: number};\n    _weekdays: string[];\n    _weekdaysMin: string[];\n    _weekdaysShort: string[];\n    calendar: (key: string, mom: any, now: any) => {call: void};\n    firstDayOfWeek: () => number;\n    firstDayOfYear: () => number;\n    invalidDate: () => string;\n    isPM: (input: string | number) => boolean;\n    longDateFormat: (key: string | number) => any;\n    meridiem: (hours: number, minutes: any, isLower: any) => string;\n    months: (m: {month: () => string}, format: string) => string;\n    monthsParse: (monthName: {toLocaleLowerCase: () => any}, format: string, strict: any) => number;\n    monthsRegex: (isStrict: any) => RegExp;\n    monthsShort: (m: {month: () => string}, format: string) => string;\n    monthsShortRegex: (isStrict: any) => RegExp;\n    ordinal: (number: any) => any;\n    pastFuture: (diff: number, output: any) => any;\n    postformat: (string: any) => any;\n    preparse: (string: any) => any;\n    relativeTime: (number: ((substring: string, args: any) => string) | string, withoutSuffix: interface_4286, string: string | number, isFuture: any) => any;\n    set: (config: interface_4281) => void;\n    week: (mom: {dayOfYear: () => number, year: () => number}) => number;\n    weekdays: (m: {day: () => string}, format: string) => string;\n    weekdaysMin: (m: {day: () => string | number}) => string;\n    weekdaysMinRegex: (isStrict: any) => RegExp;\n    weekdaysParse: (weekdayName: {toLocaleLowerCase: () => any}, format: string, strict: any) => number;\n    weekdaysRegex: (isStrict: any) => RegExp;\n    weekdaysShort: (m: {day: () => string | number}) => string;\n    weekdaysShortRegex: (isStrict: any) => RegExp;\n}\n","containerDescription":"class Locale"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].weekdaysShort.[function].[arg0]","newType":"{\n    day: () => string | number\n}\n","oldType":"number | moment","containerType":"(m: {day: () => string | number}) => string","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].week.[function].[return]","newType":"number","oldType":"any","containerType":"(mom: {dayOfYear: () => number, year: () => number}) => number","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].weekdaysMin.[function].[arg0]","newType":"{\n    day: () => string | number\n}\n","oldType":"number | moment","containerType":"(m: {day: () => string | number}) => string","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime.[function].[arg1]","key":"weekdaysMinRegex","newType":"(arg0: void) => string | string[] | RegExp | interface_4146","isAny":false,"isClass":false,"containerType":"// Seen as: locale\ninterface interface_4286 {\n    _meridiemParse: string | string[] | RegExp | interface_4154;\n    _ordinalParse: string | string[] | RegExp | interface_4143;\n    _ordinalParseLenient: string | string[] | RegExp | interface_4143;\n    monthsRegex: (arg0: void) => string | string[] | RegExp | interface_4148;\n    monthsShortRegex: (arg0: void) => string | string[] | RegExp | interface_4131;\n    weekdaysMinRegex: (arg0: void) => string | string[] | RegExp | interface_4146;\n    weekdaysRegex: (arg0: void) => string | string[] | RegExp | interface_4150;\n    weekdaysShortRegex: (arg0: void) => string | string[] | RegExp | interface_4152;\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime.[function].[arg1]","key":"weekdaysRegex","newType":"(arg0: void) => string | string[] | RegExp | interface_4150","isAny":false,"isClass":false,"containerType":"// Seen as: locale\ninterface interface_4286 {\n    _meridiemParse: string | string[] | RegExp | interface_4154;\n    _ordinalParse: string | string[] | RegExp | interface_4143;\n    _ordinalParseLenient: string | string[] | RegExp | interface_4143;\n    monthsRegex: (arg0: void) => string | string[] | RegExp | interface_4148;\n    monthsShortRegex: (arg0: void) => string | string[] | RegExp | interface_4131;\n    weekdaysMinRegex: (arg0: void) => string | string[] | RegExp | interface_4146;\n    weekdaysRegex: (arg0: void) => string | string[] | RegExp | interface_4150;\n    weekdaysShortRegex: (arg0: void) => string | string[] | RegExp | interface_4152;\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime.[function].[arg1]","key":"weekdaysShortRegex","newType":"(arg0: void) => string | string[] | RegExp | interface_4152","isAny":false,"isClass":false,"containerType":"// Seen as: locale\ninterface interface_4286 {\n    _meridiemParse: string | string[] | RegExp | interface_4154;\n    _ordinalParse: string | string[] | RegExp | interface_4143;\n    _ordinalParseLenient: string | string[] | RegExp | interface_4143;\n    monthsRegex: (arg0: void) => string | string[] | RegExp | interface_4148;\n    monthsShortRegex: (arg0: void) => string | string[] | RegExp | interface_4131;\n    weekdaysMinRegex: (arg0: void) => string | string[] | RegExp | interface_4146;\n    weekdaysRegex: (arg0: void) => string | string[] | RegExp | interface_4150;\n    weekdaysShortRegex: (arg0: void) => string | string[] | RegExp | interface_4152;\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].weekdaysParse.[function].[arg0]","newType":"{\n    toLocaleLowerCase: () => any\n}\n","oldType":"number","containerType":"(weekdayName: {toLocaleLowerCase: () => any}, format: string, strict: any) => number","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set.[function].[arg0]","key":"calendar","newType":"interface interface_4275 {\n    lastDay: string;\n    lastWeek: string;\n    nextDay: string;\n    nextWeek: string;\n    sameDay: string;\n    sameElse: string;\n}\n\n","isAny":false,"isClass":false,"containerType":"interface interface_4281 {\n    abbr: string;\n    calendar: interface_4275;\n    invalidDate: string;\n    longDateFormat: interface_4276;\n    meridiemParse: RegExp;\n    months: string[];\n    monthsShort: string[];\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    relativeTime: interface_4277;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set.[function].[arg0]","key":"week","newType":"{\n    dow: number, \n    doy: number\n}\n","isAny":false,"isClass":false,"containerType":"interface interface_4281 {\n    abbr: string;\n    calendar: interface_4275;\n    invalidDate: string;\n    longDateFormat: interface_4276;\n    meridiemParse: RegExp;\n    months: string[];\n    monthsShort: string[];\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    relativeTime: interface_4277;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set.[function].[arg0]","key":"months","newType":"string[]","isAny":false,"isClass":false,"containerType":"interface interface_4281 {\n    abbr: string;\n    calendar: interface_4275;\n    invalidDate: string;\n    longDateFormat: interface_4276;\n    meridiemParse: RegExp;\n    months: string[];\n    monthsShort: string[];\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    relativeTime: interface_4277;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set.[function].[arg0]","key":"weekdays","newType":"string[]","isAny":false,"isClass":false,"containerType":"interface interface_4281 {\n    abbr: string;\n    calendar: interface_4275;\n    invalidDate: string;\n    longDateFormat: interface_4276;\n    meridiemParse: RegExp;\n    months: string[];\n    monthsShort: string[];\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    relativeTime: interface_4277;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set.[function].[arg0]","key":"invalidDate","newType":"string","isAny":false,"isClass":false,"containerType":"interface interface_4281 {\n    abbr: string;\n    calendar: interface_4275;\n    invalidDate: string;\n    longDateFormat: interface_4276;\n    meridiemParse: RegExp;\n    months: string[];\n    monthsShort: string[];\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    relativeTime: interface_4277;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set.[function].[arg0]","key":"longDateFormat","newType":"interface interface_4276 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n}\n\n","isAny":false,"isClass":false,"containerType":"interface interface_4281 {\n    abbr: string;\n    calendar: interface_4275;\n    invalidDate: string;\n    longDateFormat: interface_4276;\n    meridiemParse: RegExp;\n    months: string[];\n    monthsShort: string[];\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    relativeTime: interface_4277;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set.[function].[arg0]","key":"meridiemParse","newType":"RegExp","isAny":false,"isClass":false,"containerType":"interface interface_4281 {\n    abbr: string;\n    calendar: interface_4275;\n    invalidDate: string;\n    longDateFormat: interface_4276;\n    meridiemParse: RegExp;\n    months: string[];\n    monthsShort: string[];\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    relativeTime: interface_4277;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set.[function].[arg0]","key":"relativeTime","newType":"interface interface_4277 {\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    future: string;\n    h: string;\n    hh: string;\n    m: string;\n    mm: string;\n    past: string;\n    s: string;\n    y: string;\n    yy: string;\n}\n\n","isAny":false,"isClass":false,"containerType":"interface interface_4281 {\n    abbr: string;\n    calendar: interface_4275;\n    invalidDate: string;\n    longDateFormat: interface_4276;\n    meridiemParse: RegExp;\n    months: string[];\n    monthsShort: string[];\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    relativeTime: interface_4277;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set.[function].[arg0]","key":"monthsShort","newType":"string[]","isAny":false,"isClass":false,"containerType":"interface interface_4281 {\n    abbr: string;\n    calendar: interface_4275;\n    invalidDate: string;\n    longDateFormat: interface_4276;\n    meridiemParse: RegExp;\n    months: string[];\n    monthsShort: string[];\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    relativeTime: interface_4277;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set.[function].[arg0]","key":"weekdaysShort","newType":"string[]","isAny":false,"isClass":false,"containerType":"interface interface_4281 {\n    abbr: string;\n    calendar: interface_4275;\n    invalidDate: string;\n    longDateFormat: interface_4276;\n    meridiemParse: RegExp;\n    months: string[];\n    monthsShort: string[];\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    relativeTime: interface_4277;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"addedProperty","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].set.[function].[arg0]","key":"weekdaysMin","newType":"string[]","isAny":false,"isClass":false,"containerType":"interface interface_4281 {\n    abbr: string;\n    calendar: interface_4275;\n    invalidDate: string;\n    longDateFormat: interface_4276;\n    meridiemParse: RegExp;\n    months: string[];\n    monthsShort: string[];\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    relativeTime: interface_4277;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].monthsParse.[function].[arg0]","newType":"{\n    toLocaleLowerCase: () => any\n}\n","oldType":"any","containerType":"(monthName: {toLocaleLowerCase: () => any}, format: string, strict: any) => number","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].calendar.[function].[arg0]","newType":"string","oldType":"string | number","containerType":"(key: string, mom: any, now: any) => {call: void}","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].weekdays.[function].[arg0]","newType":"{\n    day: () => string\n}\n","oldType":"number | moment","containerType":"(m: {day: () => string}, format: string) => string","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime.[function].[arg1]._ordinalParseLenient","newType":"string | string[] | RegExp | interface_4143","oldType":"any","containerType":"// Seen as: locale\ninterface interface_4286 {\n    _meridiemParse: string | string[] | RegExp | interface_4154;\n    _ordinalParse: string | string[] | RegExp | interface_4143;\n    _ordinalParseLenient: string | string[] | RegExp | interface_4143;\n    monthsRegex: (arg0: void) => string | string[] | RegExp | interface_4148;\n    monthsShortRegex: (arg0: void) => string | string[] | RegExp | interface_4131;\n    weekdaysMinRegex: (arg0: void) => string | string[] | RegExp | interface_4146;\n    weekdaysRegex: (arg0: void) => string | string[] | RegExp | interface_4150;\n    weekdaysShortRegex: (arg0: void) => string | string[] | RegExp | interface_4152;\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime.[function].[arg1]._meridiemParse","newType":"string | string[] | RegExp | interface_4154","oldType":"any","containerType":"// Seen as: locale\ninterface interface_4286 {\n    _meridiemParse: string | string[] | RegExp | interface_4154;\n    _ordinalParse: string | string[] | RegExp | interface_4143;\n    _ordinalParseLenient: string | string[] | RegExp | interface_4143;\n    monthsRegex: (arg0: void) => string | string[] | RegExp | interface_4148;\n    monthsShortRegex: (arg0: void) => string | string[] | RegExp | interface_4131;\n    weekdaysMinRegex: (arg0: void) => string | string[] | RegExp | interface_4146;\n    weekdaysRegex: (arg0: void) => string | string[] | RegExp | interface_4150;\n    weekdaysShortRegex: (arg0: void) => string | string[] | RegExp | interface_4152;\n}\n\n","containerDescription":"object"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime.[function].[arg1]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime.[function].[arg1]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime.[function].[arg1].monthsRegex.[function].[return]","newType":"string | string[] | RegExp | interface_4148","oldType":"any","containerType":"(arg0: void) => string | string[] | RegExp | interface_4148","containerDescription":"function"},{"isInOldDec":false,"isInOldDecContainer":false,"isInNewDec":false,"isInNewDecContainer":false,"newInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime.[function].[arg1]","newFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","newJSDoc":null,"oldInclosingFunctionPath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime.[function].[arg1]","oldFunction":"function utils_hooks__hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }","oldJSDoc":null,"type":"changedType","typePath":"window.moment.[constructor].[return]._locale.[typeof].[constructor].[return].relativeTime.[function].[arg1].monthsShortRegex.[function].[return]","newType":"string | string[] | RegExp | interface_4131","oldType":"any","containerType":"(arg0: void) => string | string[] | RegExp | interface_4131","containerDescription":"function"}],"newName":"Moment.js","oldName":"Moment.js","oldDeclaration":"declare class moment {\n    constructor ();\n    static ISO_8601: () => void;\n    static createFromInputFallback: () => any;\n    static defaultFormat: string;\n    static defineLocale: (name: string, values: interface_4106) => Locale;\n    static duration: interface_3982;\n    static fn: interface_4115;\n    static invalid: (flags: interface_4074) => interface_4078;\n    static isDate: (input: moment | number | interface_4116 | number[]) => boolean;\n    static isDuration: (obj: Duration | interface_4117 | string) => boolean;\n    static isMoment: (obj: moment | number | interface_4118 | number[]) => boolean;\n    static lang: () => string;\n    static langData: () => Locale;\n    static locale: (key?: string, values?: interface_4119) => string;\n    static localeData: (key?: string) => Locale | interface_3897;\n    static max: () => interface_4111 | moment;\n    static min: () => interface_4111 | moment;\n    static momentProperties: Array<any>;\n    static months: (format: any, index: any) => Array<any>;\n    static monthsShort: (format: any, index: any) => Array<any>;\n    static normalizeUnits: (units: string) => any;\n    static now: () => string;\n    static parseTwoDigitYear: (input: {length: any}) => string | number;\n    static parseZone: () => any;\n    static relativeTimeThreshold: (threshold: string | number, limit: any) => boolean;\n    static suppressDeprecationWarnings: boolean;\n    static unix: (input: number) => interface_4111 | moment;\n    static updateOffset: () => void;\n    static utc: (input: number[], format: any, locale: any, strict: any) => interface_3998;\n    static version: string;\n    static weekdays: (format: any, index: any) => Array<any>;\n    static weekdaysMin: (format: any, index: any) => Array<any>;\n    static weekdaysShort: (format: any, index: any) => Array<any>;\n    _d: Date;\n    _i: Array<any>;\n    _isAMomentObject: boolean;\n    _isUTC: boolean;\n    _isValid: boolean;\n    _locale: Locale;\n    _offset: number;\n    _pf: interface_4120;\n    add: (val: string | interface_3883, period: string | interface_3883) => moment | number;\n    calendar: (time: any, formats: interface_3978) => any;\n    clone: () => moment;\n    creationData: () => interface_4108;\n    date: (value: number) => moment;\n    dates: () => moment;\n    day: (input: string) => moment | number;\n    dayOfYear: (input: number) => string | number | moment;\n    days: (input: string) => moment | number;\n    daysInMonth: () => number;\n    diff: (input: {_isAMomentObject: any}, units: string, asFloat: boolean) => number;\n    endOf: (units: string) => moment;\n    format: (inputString: any) => any;\n    from: (time: interface_4109 | moment, withoutSuffix: any) => any;\n    fromNow: (withoutSuffix: any) => any;\n    get: (units: string | number, value: any) => moment;\n    hasAlignedHourOffset: (input: number) => boolean;\n    hour: (value: number) => moment;\n    hours: (value: number) => moment;\n    invalidAt: () => number;\n    isAfter: (input: {_isAMomentObject: any, isValid: () => any}, units: any) => boolean;\n    isBefore: (input: moment | interface_4110, units: any) => boolean;\n    isBetween: (from: {_isAMomentObject: any, isValid: () => any}, to: {_isAMomentObject: any, isValid: () => any}, units: any) => boolean;\n    isDST: () => boolean;\n    isDSTShifted: () => boolean;\n    isLeapYear: () => boolean;\n    isLocal: () => boolean;\n    isSame: (input: {_isAMomentObject: any, isValid: () => any}, units: string) => boolean;\n    isSameOrAfter: (input: {_isAMomentObject: any, isValid: () => any}, units: any) => boolean;\n    isSameOrBefore: (input: {_isAMomentObject: any, isValid: () => any}, units: any) => boolean;\n    isUTC: () => boolean;\n    isUtc: () => boolean;\n    isUtcOffset: () => boolean;\n    isValid: () => boolean;\n    isoWeek: (input: number) => moment | number;\n    isoWeekYear: (input: number) => any;\n    isoWeekday: (input: string) => moment | number;\n    isoWeeks: (input: number) => moment | number;\n    isoWeeksInYear: () => number;\n    lang: () => any;\n    local: (keepLocalTime: any) => moment;\n    locale: (key: string) => string | Duration;\n    localeData: () => string | Locale;\n    max: () => interface_4111 | moment;\n    millisecond: (value: number) => moment;\n    milliseconds: (value: number) => moment;\n    min: () => interface_4111 | moment;\n    minute: (value: number) => moment;\n    minutes: (value: number) => moment;\n    month: (value: number) => moment | number;\n    months: () => moment;\n    parseZone: () => moment;\n    parsingFlags: () => interface_3976;\n    quarter: (input: number) => number | moment;\n    quarters: (input: number) => number | moment;\n    second: (value: number) => moment;\n    seconds: (value: number) => moment;\n    set: (units: string | number, value: any) => moment;\n    startOf: (units: string) => moment;\n    subtract: (val: string | interface_3924, period: string | interface_3924) => moment;\n    to: (time: moment | interface_4112, withoutSuffix: any) => any;\n    toArray: () => moment[];\n    toDate: () => Date;\n    toISOString: () => string;\n    toJSON: () => string;\n    toNow: (withoutSuffix: any) => any;\n    toObject: () => interface_4114;\n    toString: () => any;\n    unix: () => number;\n    utc: (keepLocalTime: any) => moment | number;\n    utcOffset: (input: number, keepLocalTime: any) => moment | number;\n    valueOf: () => number;\n    week: (input: number) => moment | number;\n    weekYear: (input: number) => any;\n    weekday: (input: number) => moment | number;\n    weeks: (input: number) => moment | number;\n    weeksInYear: () => number;\n    year: (value: any) => moment | number;\n    years: () => moment;\n    zone: () => number;\n    zoneAbbr: () => string;\n    zoneName: () => string;\n}\ninterface LocaleConstructor {\n    new () : Locale\n}\n\n// Seen as: \ninterface Locale {\n    _abbr: string;\n    _calendar: interface_4121;\n    _invalidDate: string;\n    _longDateFormat: interface_4122;\n    _meridiemParse: RegExp;\n    _months: string[];\n    _monthsRegex: RegExp;\n    _monthsShort: string[];\n    _monthsShortRegex: RegExp;\n    _ordinal: string;\n    _ordinalParse: RegExp;\n    _ordinalParseLenient: RegExp;\n    _relativeTime: interface_4123;\n    _week: {dow: number, doy: number};\n    _weekdays: string[];\n    _weekdaysMin: string[];\n    _weekdaysShort: string[];\n    calendar: (key: string | number, mom: any, now: any) => {call: void};\n    firstDayOfWeek: () => number;\n    firstDayOfYear: () => number;\n    invalidDate: () => string;\n    isPM: (input: string | number) => boolean;\n    longDateFormat: (key: string | number) => any;\n    meridiem: (hours: number, minutes: any, isLower: any) => string;\n    months: (m: {month: () => string}, format: string) => string;\n    monthsParse: (monthName: any, format: string, strict: any) => number;\n    monthsRegex: (isStrict: any) => RegExp;\n    monthsShort: (m: {month: () => string}, format: string) => string;\n    monthsShortRegex: (isStrict: any) => RegExp;\n    ordinal: (number: string | ((substring: string, args: any) => string)) => string;\n    pastFuture: (diff: number, output: any) => any;\n    postformat: (string: any) => any;\n    preparse: (string: any) => any;\n    relativeTime: (number: string | ((substring: string, args: any) => string), withoutSuffix: interface_4124, string: string | number, isFuture: any) => any;\n    set: (config: interface_4106) => void;\n    week: (mom: {dayOfYear: () => number, year: () => number}) => any;\n    weekdays: (m: number | moment, format: string) => string;\n    weekdaysMin: (m: number | moment) => string;\n    weekdaysParse: (weekdayName: number, format: string, strict: any) => number;\n    weekdaysShort: (m: number | moment) => string;\n}\n\ninterface DurationConstructor {\n    new (duration: Duration | string | interface_4127) : Duration\n}\n\n// Seen as: \ninterface Duration {\n    _bubble: () => Duration;\n    _data: interface_4128;\n    _days: number;\n    _locale: Locale;\n    _milliseconds: number;\n    _months: number;\n    abs: () => Duration;\n    add: (input: string | interface_3964, value: string | number) => Duration | number;\n    as: (units: string) => number;\n    asDays: () => number;\n    asHours: () => number;\n    asMilliseconds: () => number;\n    asMinutes: () => number;\n    asMonths: () => number;\n    asSeconds: () => number;\n    asWeeks: () => number;\n    asYears: () => number;\n    days: () => number;\n    get: (units: string | number) => any;\n    hours: () => any;\n    humanize: (withSuffix: any) => any;\n    lang: () => any;\n    locale: (key: string) => string | Duration;\n    localeData: () => string | Locale;\n    milliseconds: () => any;\n    minutes: () => any;\n    months: () => any;\n    seconds: () => any;\n    subtract: (input: string | interface_3968, value: string | number) => Duration;\n    toISOString: () => string;\n    toIsoString: () => string;\n    toJSON: () => string;\n    toString: () => string;\n    valueOf: () => string | number;\n    weeks: () => number;\n    years: () => any;\n}\n\ninterface interface_4106 {\n    abbr: string;\n    ordinal: (number: number) => string | number;\n    ordinalParse: RegExp;\n}\n\ninterface interface_3982 {\n    (input: Duration | string | interface_3983, key: string) : Duration;\n    fn: interface_4129;\n}\n\n// Seen as: duration, input\ninterface interface_3883 {\n    (config?: {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4130) : moment | Locale | string | interface_3901;\n    A: (isStrict: any, locale: {_meridiemParse: any}) => any;\n    D: (isStrict: any, localeData: any) => RegExp;\n    DD: (isStrict: any, localeData: any) => RegExp;\n    DDD: (isStrict: any, localeData: any) => RegExp;\n    DDDD: (isStrict: any, localeData: any) => RegExp;\n    Do: (isStrict: any, locale: {_ordinalParse: any, _ordinalParseLenient: any}) => any;\n    E: (isStrict: any, localeData: any) => RegExp;\n    G: (isStrict: any, localeData: any) => RegExp;\n    GG: (isStrict: any, localeData: any) => RegExp;\n    GGGG: (isStrict: any, localeData: any) => RegExp;\n    GGGGG: (isStrict: any, localeData: any) => RegExp;\n    H: (isStrict: any, localeData: any) => RegExp;\n    HH: (isStrict: any, localeData: any) => RegExp;\n    Hmm: (isStrict: any, localeData: any) => RegExp;\n    Hmmss: (isStrict: any, localeData: any) => RegExp;\n    M: (isStrict: any, localeData: any) => RegExp;\n    MM: (isStrict: any, localeData: any) => RegExp;\n    MMM: (isStrict: any, locale: {monthsShortRegex: (arg0: void) => any}) => any;\n    MMMM: (isStrict: any, locale: {monthsRegex: (arg0: void) => any}) => any;\n    Q: (isStrict: any, localeData: any) => RegExp;\n    S: (isStrict: any, localeData: any) => RegExp;\n    SS: (isStrict: any, localeData: any) => RegExp;\n    SSS: (isStrict: any, localeData: any) => RegExp;\n    SSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    W: (isStrict: any, localeData: any) => RegExp;\n    WW: (isStrict: any, localeData: any) => RegExp;\n    X: (isStrict: any, localeData: any) => RegExp;\n    Y: (isStrict: any, localeData: any) => RegExp;\n    YY: (isStrict: any, localeData: any) => RegExp;\n    YYYY: (isStrict: any, localeData: any) => RegExp;\n    YYYYY: (isStrict: any, localeData: any) => RegExp;\n    YYYYYY: (isStrict: any, localeData: any) => RegExp;\n    Z: (isStrict: any, localeData: any) => RegExp;\n    ZZ: (isStrict: any, localeData: any) => RegExp;\n    _days: any;\n    _locale: any;\n    _milliseconds: any;\n    _months: any;\n    a: (isStrict: any, locale: {_meridiemParse: any}) => any;\n    charsLeftOver: number;\n    d: number | ((isStrict: any, localeData: any) => RegExp);\n    dd: (isStrict: any, localeData: any) => RegExp;\n    ddd: (isStrict: any, localeData: any) => RegExp;\n    dddd: (isStrict: any, localeData: any) => RegExp;\n    e: (isStrict: any, localeData: any) => RegExp;\n    empty: boolean;\n    from: any;\n    g: (isStrict: any, localeData: any) => RegExp;\n    gg: (isStrict: any, localeData: any) => RegExp;\n    gggg: (isStrict: any, localeData: any) => RegExp;\n    ggggg: (isStrict: any, localeData: any) => RegExp;\n    h: (isStrict: any, localeData: any) => RegExp;\n    hh: (isStrict: any, localeData: any) => RegExp;\n    hmm: (isStrict: any, localeData: any) => RegExp;\n    hmmss: (isStrict: any, localeData: any) => RegExp;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    m: (isStrict: any, localeData: any) => RegExp;\n    milliseconds: any;\n    mm: (isStrict: any, localeData: any) => RegExp;\n    ms: any;\n    nullInput: boolean;\n    overflow: number;\n    s: (isStrict: any, localeData: any) => RegExp;\n    ss: (isStrict: any, localeData: any) => RegExp;\n    to: any;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    w: (isStrict: any, localeData: any) => RegExp;\n    ww: (isStrict: any, localeData: any) => RegExp;\n    x: (isStrict: any, localeData: any) => RegExp;\n}\n\n// Seen as: formats\ninterface interface_3978 {\n}\n\ninterface interface_4108 {\n    format: any;\n    input: Array<any>;\n    isUTC: boolean;\n    locale: Locale;\n    strict: any;\n}\n\n// Seen as: obj, res\ninterface interface_4109 {\n    _isAMomentObject: any;\n    _nextDay: any;\n    add: (val: string | interface_3883, period: string | interface_3883) => moment | number;\n}\n\n// Seen as: input, localInput, obj, res\ninterface interface_4110 {\n    _isAMomentObject: any;\n    _nextDay: any;\n    add: (val: string | interface_3883, period: string | interface_3883) => moment | number;\n    isValid: () => any;\n}\n\n// Seen as: res\ninterface interface_4111 {\n    _nextDay: any;\n    add: (val: string | interface_3883, period: string | interface_3883) => moment | number;\n}\n\ninterface interface_3976 {\n    () : Locale | interface_4111 | moment | string;\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    nullInput: boolean;\n    overflow: number;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n// Seen as: duration, input\ninterface interface_3924 {\n    (config?: {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4130) : Locale | moment | string | interface_3928;\n    A: (isStrict: any, locale: {_meridiemParse: any}) => any;\n    D: (isStrict: any, localeData: any) => RegExp;\n    DD: (isStrict: any, localeData: any) => RegExp;\n    DDD: (isStrict: any, localeData: any) => RegExp;\n    DDDD: (isStrict: any, localeData: any) => RegExp;\n    Do: (isStrict: any, locale: {_ordinalParse: any, _ordinalParseLenient: any}) => any;\n    E: (isStrict: any, localeData: any) => RegExp;\n    G: (isStrict: any, localeData: any) => RegExp;\n    GG: (isStrict: any, localeData: any) => RegExp;\n    GGGG: (isStrict: any, localeData: any) => RegExp;\n    GGGGG: (isStrict: any, localeData: any) => RegExp;\n    H: (isStrict: any, localeData: any) => RegExp;\n    HH: (isStrict: any, localeData: any) => RegExp;\n    Hmm: (isStrict: any, localeData: any) => RegExp;\n    Hmmss: (isStrict: any, localeData: any) => RegExp;\n    M: (isStrict: any, localeData: any) => RegExp;\n    MM: (isStrict: any, localeData: any) => RegExp;\n    MMM: (isStrict: any, locale: {monthsShortRegex: (arg0: void) => any}) => any;\n    MMMM: (isStrict: any, locale: {monthsRegex: (arg0: void) => any}) => any;\n    Q: (isStrict: any, localeData: any) => RegExp;\n    S: (isStrict: any, localeData: any) => RegExp;\n    SS: (isStrict: any, localeData: any) => RegExp;\n    SSS: (isStrict: any, localeData: any) => RegExp;\n    SSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    W: (isStrict: any, localeData: any) => RegExp;\n    WW: (isStrict: any, localeData: any) => RegExp;\n    X: (isStrict: any, localeData: any) => RegExp;\n    Y: (isStrict: any, localeData: any) => RegExp;\n    YY: (isStrict: any, localeData: any) => RegExp;\n    YYYY: (isStrict: any, localeData: any) => RegExp;\n    YYYYY: (isStrict: any, localeData: any) => RegExp;\n    YYYYYY: (isStrict: any, localeData: any) => RegExp;\n    Z: (isStrict: any, localeData: any) => RegExp;\n    ZZ: (isStrict: any, localeData: any) => RegExp;\n    _days: any;\n    _locale: any;\n    _milliseconds: any;\n    _months: any;\n    a: (isStrict: any, locale: {_meridiemParse: any}) => any;\n    charsLeftOver: number;\n    d: number | ((isStrict: any, localeData: any) => RegExp);\n    dd: (isStrict: any, localeData: any) => RegExp;\n    ddd: (isStrict: any, localeData: any) => RegExp;\n    dddd: (isStrict: any, localeData: any) => RegExp;\n    e: (isStrict: any, localeData: any) => RegExp;\n    empty: boolean;\n    from: any;\n    g: (isStrict: any, localeData: any) => RegExp;\n    gg: (isStrict: any, localeData: any) => RegExp;\n    gggg: (isStrict: any, localeData: any) => RegExp;\n    ggggg: (isStrict: any, localeData: any) => RegExp;\n    h: (isStrict: any, localeData: any) => RegExp;\n    hh: (isStrict: any, localeData: any) => RegExp;\n    hmm: (isStrict: any, localeData: any) => RegExp;\n    hmmss: (isStrict: any, localeData: any) => RegExp;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    m: (isStrict: any, localeData: any) => RegExp;\n    milliseconds: any;\n    mm: (isStrict: any, localeData: any) => RegExp;\n    ms: any;\n    nullInput: boolean;\n    overflow: number;\n    s: (isStrict: any, localeData: any) => RegExp;\n    ss: (isStrict: any, localeData: any) => RegExp;\n    to: any;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    w: (isStrict: any, localeData: any) => RegExp;\n    ww: (isStrict: any, localeData: any) => RegExp;\n    x: (isStrict: any, localeData: any) => RegExp;\n}\n\n// Seen as: res, time\ninterface interface_4112 {\n    _nextDay: any;\n    add: (val: string | interface_3883, period: string | interface_3883) => moment | number;\n    isValid: () => any;\n}\n\ninterface interface_4114 {\n    date: moment;\n    hours: moment;\n    milliseconds: moment;\n    minutes: moment;\n    months: moment;\n    seconds: moment;\n    years: moment;\n}\n\ninterface interface_4115 {\n    add: (val: string | interface_3883, period: string | interface_3883) => moment | number;\n    calendar: (time: any, formats: interface_3978) => any;\n    clone: () => moment;\n    constructor: typeof moment;\n    creationData: () => interface_4108;\n    date: (value: number) => moment;\n    dates: () => moment;\n    day: (input: string) => moment | number;\n    dayOfYear: (input: number) => string | number | moment;\n    days: (input: string) => moment | number;\n    daysInMonth: () => number;\n    diff: (input: {_isAMomentObject: any}, units: string, asFloat: boolean) => number;\n    endOf: (units: string) => moment;\n    format: (inputString: any) => any;\n    from: (time: interface_4109 | moment, withoutSuffix: any) => any;\n    fromNow: (withoutSuffix: any) => any;\n    get: (units: string | number, value: any) => moment;\n    hasAlignedHourOffset: (input: number) => boolean;\n    hour: (value: number) => moment;\n    hours: (value: number) => moment;\n    invalidAt: () => number;\n    isAfter: (input: {_isAMomentObject: any, isValid: () => any}, units: any) => boolean;\n    isBefore: (input: moment | interface_4110, units: any) => boolean;\n    isBetween: (from: {_isAMomentObject: any, isValid: () => any}, to: {_isAMomentObject: any, isValid: () => any}, units: any) => boolean;\n    isDST: () => boolean;\n    isDSTShifted: () => boolean;\n    isLeapYear: () => boolean;\n    isLocal: () => boolean;\n    isSame: (input: {_isAMomentObject: any, isValid: () => any}, units: string) => boolean;\n    isSameOrAfter: (input: {_isAMomentObject: any, isValid: () => any}, units: any) => boolean;\n    isSameOrBefore: (input: {_isAMomentObject: any, isValid: () => any}, units: any) => boolean;\n    isUTC: () => boolean;\n    isUtc: () => boolean;\n    isUtcOffset: () => boolean;\n    isValid: () => boolean;\n    isoWeek: (input: number) => moment | number;\n    isoWeekYear: (input: number) => any;\n    isoWeekday: (input: string) => moment | number;\n    isoWeeks: (input: number) => moment | number;\n    isoWeeksInYear: () => number;\n    lang: () => any;\n    local: (keepLocalTime: any) => moment;\n    locale: (key: string) => string | Duration;\n    localeData: () => string | Locale;\n    max: () => interface_4111 | moment;\n    millisecond: (value: number) => moment;\n    milliseconds: (value: number) => moment;\n    min: () => interface_4111 | moment;\n    minute: (value: number) => moment;\n    minutes: (value: number) => moment;\n    month: (value: number) => moment | number;\n    months: () => moment;\n    parseZone: () => moment;\n    parsingFlags: () => interface_3976;\n    quarter: (input: number) => number | moment;\n    quarters: (input: number) => number | moment;\n    second: (value: number) => moment;\n    seconds: (value: number) => moment;\n    set: (units: string | number, value: any) => moment;\n    startOf: (units: string) => moment;\n    subtract: (val: string | interface_3924, period: string | interface_3924) => moment;\n    to: (time: moment | interface_4112, withoutSuffix: any) => any;\n    toArray: () => moment[];\n    toDate: () => Date;\n    toISOString: () => string;\n    toJSON: () => string;\n    toNow: (withoutSuffix: any) => any;\n    toObject: () => interface_4114;\n    toString: () => any;\n    unix: () => number;\n    utc: (keepLocalTime: any) => moment | number;\n    utcOffset: (input: number, keepLocalTime: any) => moment | number;\n    valueOf: () => number;\n    week: (input: number) => moment | number;\n    weekYear: (input: number) => any;\n    weekday: (input: number) => moment | number;\n    weeks: (input: number) => moment | number;\n    weeksInYear: () => number;\n    year: (value: any) => moment | number;\n    years: () => moment;\n    zone: () => number;\n    zoneAbbr: () => string;\n    zoneName: () => string;\n}\n\ninterface interface_4074 {\n    (config?: {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4130) : Locale | moment | string | interface_3928;\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    nullInput: boolean;\n    overflow: number;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4078 {\n    () : interface_4111 | Locale | string | moment;\n    _a: interface_4085;\n    _d: interface_4132;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | number[] | interface_4133;\n    _isUTC: Locale | boolean | number[] | interface_4133;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Locale | number[] | interface_4135;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | number[] | interface_4133;\n    _pf: Locale | boolean | number[] | interface_4016;\n    _strict: Locale | boolean | number[] | interface_4133;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4136;\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    nullInput: boolean;\n    overflow: number;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n// Seen as: input, res\ninterface interface_4116 {\n    _nextDay: any;\n    add: (val: string | interface_3883, period: string | interface_3883) => moment | number;\n}\n\ninterface interface_4117 {\n    from: interface_4111 | moment;\n    to: interface_4111 | moment;\n}\n\n// Seen as: obj, res\ninterface interface_4118 {\n    _isAMomentObject: any;\n    _nextDay: any;\n    add: (val: string | interface_3883, period: string | interface_3883) => moment | number;\n}\n\ninterface interface_4119 {\n    abbr: string;\n    ordinal: (number: number) => string | number;\n    ordinalParse: RegExp;\n}\n\n// Seen as: locale\ninterface interface_3897 {\n}\n\n// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_3998 {\n    () : Locale | interface_4111 | moment | string;\n    _a: interface_4047;\n    _d: interface_4137;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | number[] | interface_4133;\n    _isUTC: Locale | boolean | number[] | interface_4138;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Locale | number[] | interface_4139;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | number[] | interface_4133;\n    _pf: Locale | boolean | number[] | interface_4016;\n    _strict: Locale | boolean | number[] | interface_4133;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4136;\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    month: () => string;\n    nullInput: boolean;\n    overflow: number;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4032;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\ninterface interface_4120 {\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    nullInput: boolean;\n    overflow: number;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\ninterface interface_4121 {\n    lastDay: string;\n    lastWeek: string;\n    nextDay: string;\n    nextWeek: string;\n    sameDay: string;\n    sameElse: string;\n}\n\ninterface interface_4122 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n}\n\ninterface interface_4123 {\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    future: string;\n    h: string;\n    hh: string;\n    m: string;\n    mm: string;\n    past: string;\n    s: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: locale\ninterface interface_4124 {\n    _meridiemParse: any;\n    _ordinalParse: any;\n    _ordinalParseLenient: any;\n    monthsRegex: (arg0: void) => any;\n    monthsShortRegex: (arg0: void) => any;\n}\n\ninterface interface_4126 {\n    from: interface_4111 | moment;\n    to: interface_4111 | moment;\n}\n\n// Seen as: duration, input\ninterface interface_4127 {\n    M: number;\n    _days: number;\n    _locale: Locale;\n    _milliseconds: number;\n    _months: number;\n    d: number;\n    from: interface_4111 | moment;\n    h: number;\n    m: number;\n    milliseconds: Duration | interface_4126 | string;\n    ms: number;\n    s: number;\n    to: interface_4111 | moment;\n    w: number;\n    y: number;\n}\n\ninterface interface_4128 {\n    days: number;\n    hours: number;\n    milliseconds: number;\n    minutes: number;\n    months: number;\n    seconds: number;\n    years: number;\n}\n\n// Seen as: duration, input\ninterface interface_3964 {\n    (config?: {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4130) : Locale | moment | string | interface_3965;\n    A: (isStrict: any, locale: {_meridiemParse: any}) => any;\n    D: (isStrict: any, localeData: any) => RegExp;\n    DD: (isStrict: any, localeData: any) => RegExp;\n    DDD: (isStrict: any, localeData: any) => RegExp;\n    DDDD: (isStrict: any, localeData: any) => RegExp;\n    Do: (isStrict: any, locale: {_ordinalParse: any, _ordinalParseLenient: any}) => any;\n    E: (isStrict: any, localeData: any) => RegExp;\n    G: (isStrict: any, localeData: any) => RegExp;\n    GG: (isStrict: any, localeData: any) => RegExp;\n    GGGG: (isStrict: any, localeData: any) => RegExp;\n    GGGGG: (isStrict: any, localeData: any) => RegExp;\n    H: (isStrict: any, localeData: any) => RegExp;\n    HH: (isStrict: any, localeData: any) => RegExp;\n    Hmm: (isStrict: any, localeData: any) => RegExp;\n    Hmmss: (isStrict: any, localeData: any) => RegExp;\n    M: (isStrict: any, localeData: any) => RegExp;\n    MM: (isStrict: any, localeData: any) => RegExp;\n    MMM: (isStrict: any, locale: {monthsShortRegex: (arg0: void) => any}) => any;\n    MMMM: (isStrict: any, locale: {monthsRegex: (arg0: void) => any}) => any;\n    Q: (isStrict: any, localeData: any) => RegExp;\n    S: (isStrict: any, localeData: any) => RegExp;\n    SS: (isStrict: any, localeData: any) => RegExp;\n    SSS: (isStrict: any, localeData: any) => RegExp;\n    SSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    W: (isStrict: any, localeData: any) => RegExp;\n    WW: (isStrict: any, localeData: any) => RegExp;\n    X: (isStrict: any, localeData: any) => RegExp;\n    Y: (isStrict: any, localeData: any) => RegExp;\n    YY: (isStrict: any, localeData: any) => RegExp;\n    YYYY: (isStrict: any, localeData: any) => RegExp;\n    YYYYY: (isStrict: any, localeData: any) => RegExp;\n    YYYYYY: (isStrict: any, localeData: any) => RegExp;\n    Z: (isStrict: any, localeData: any) => RegExp;\n    ZZ: (isStrict: any, localeData: any) => RegExp;\n    _days: any;\n    _locale: any;\n    _milliseconds: any;\n    _months: any;\n    a: (isStrict: any, locale: {_meridiemParse: any}) => any;\n    charsLeftOver: number;\n    d: number | ((isStrict: any, localeData: any) => RegExp);\n    dd: (isStrict: any, localeData: any) => RegExp;\n    ddd: (isStrict: any, localeData: any) => RegExp;\n    dddd: (isStrict: any, localeData: any) => RegExp;\n    e: (isStrict: any, localeData: any) => RegExp;\n    empty: boolean;\n    from: any;\n    g: (isStrict: any, localeData: any) => RegExp;\n    gg: (isStrict: any, localeData: any) => RegExp;\n    gggg: (isStrict: any, localeData: any) => RegExp;\n    ggggg: (isStrict: any, localeData: any) => RegExp;\n    h: (isStrict: any, localeData: any) => RegExp;\n    hh: (isStrict: any, localeData: any) => RegExp;\n    hmm: (isStrict: any, localeData: any) => RegExp;\n    hmmss: (isStrict: any, localeData: any) => RegExp;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    m: (isStrict: any, localeData: any) => RegExp;\n    milliseconds: any;\n    mm: (isStrict: any, localeData: any) => RegExp;\n    ms: any;\n    nullInput: boolean;\n    overflow: number;\n    s: (isStrict: any, localeData: any) => RegExp;\n    ss: (isStrict: any, localeData: any) => RegExp;\n    to: any;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    w: (isStrict: any, localeData: any) => RegExp;\n    ww: (isStrict: any, localeData: any) => RegExp;\n    x: (isStrict: any, localeData: any) => RegExp;\n}\n\n// Seen as: duration, input\ninterface interface_3968 {\n    (config?: {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4130) : Locale | moment | string | interface_3971;\n    A: (isStrict: any, locale: {_meridiemParse: any}) => any;\n    D: (isStrict: any, localeData: any) => RegExp;\n    DD: (isStrict: any, localeData: any) => RegExp;\n    DDD: (isStrict: any, localeData: any) => RegExp;\n    DDDD: (isStrict: any, localeData: any) => RegExp;\n    Do: (isStrict: any, locale: {_ordinalParse: any, _ordinalParseLenient: any}) => any;\n    E: (isStrict: any, localeData: any) => RegExp;\n    G: (isStrict: any, localeData: any) => RegExp;\n    GG: (isStrict: any, localeData: any) => RegExp;\n    GGGG: (isStrict: any, localeData: any) => RegExp;\n    GGGGG: (isStrict: any, localeData: any) => RegExp;\n    H: (isStrict: any, localeData: any) => RegExp;\n    HH: (isStrict: any, localeData: any) => RegExp;\n    Hmm: (isStrict: any, localeData: any) => RegExp;\n    Hmmss: (isStrict: any, localeData: any) => RegExp;\n    M: (isStrict: any, localeData: any) => RegExp;\n    MM: (isStrict: any, localeData: any) => RegExp;\n    MMM: (isStrict: any, locale: {monthsShortRegex: (arg0: void) => any}) => any;\n    MMMM: (isStrict: any, locale: {monthsRegex: (arg0: void) => any}) => any;\n    Q: (isStrict: any, localeData: any) => RegExp;\n    S: (isStrict: any, localeData: any) => RegExp;\n    SS: (isStrict: any, localeData: any) => RegExp;\n    SSS: (isStrict: any, localeData: any) => RegExp;\n    SSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    W: (isStrict: any, localeData: any) => RegExp;\n    WW: (isStrict: any, localeData: any) => RegExp;\n    X: (isStrict: any, localeData: any) => RegExp;\n    Y: (isStrict: any, localeData: any) => RegExp;\n    YY: (isStrict: any, localeData: any) => RegExp;\n    YYYY: (isStrict: any, localeData: any) => RegExp;\n    YYYYY: (isStrict: any, localeData: any) => RegExp;\n    YYYYYY: (isStrict: any, localeData: any) => RegExp;\n    Z: (isStrict: any, localeData: any) => RegExp;\n    ZZ: (isStrict: any, localeData: any) => RegExp;\n    _days: any;\n    _locale: any;\n    _milliseconds: any;\n    _months: any;\n    a: (isStrict: any, locale: {_meridiemParse: any}) => any;\n    charsLeftOver: number;\n    d: number | ((isStrict: any, localeData: any) => RegExp);\n    dd: (isStrict: any, localeData: any) => RegExp;\n    ddd: (isStrict: any, localeData: any) => RegExp;\n    dddd: (isStrict: any, localeData: any) => RegExp;\n    e: (isStrict: any, localeData: any) => RegExp;\n    empty: boolean;\n    from: any;\n    g: (isStrict: any, localeData: any) => RegExp;\n    gg: (isStrict: any, localeData: any) => RegExp;\n    gggg: (isStrict: any, localeData: any) => RegExp;\n    ggggg: (isStrict: any, localeData: any) => RegExp;\n    h: (isStrict: any, localeData: any) => RegExp;\n    hh: (isStrict: any, localeData: any) => RegExp;\n    hmm: (isStrict: any, localeData: any) => RegExp;\n    hmmss: (isStrict: any, localeData: any) => RegExp;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    m: (isStrict: any, localeData: any) => RegExp;\n    milliseconds: any;\n    mm: (isStrict: any, localeData: any) => RegExp;\n    ms: any;\n    nullInput: boolean;\n    overflow: number;\n    s: (isStrict: any, localeData: any) => RegExp;\n    ss: (isStrict: any, localeData: any) => RegExp;\n    to: any;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    w: (isStrict: any, localeData: any) => RegExp;\n    ww: (isStrict: any, localeData: any) => RegExp;\n    x: (isStrict: any, localeData: any) => RegExp;\n}\n\n// Seen as: duration, input\ninterface interface_3983 {\n    (config?: {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4130) : Locale | moment | string | interface_3986;\n    A: (isStrict: any, locale: {_meridiemParse: any}) => any;\n    D: (isStrict: any, localeData: any) => RegExp;\n    DD: (isStrict: any, localeData: any) => RegExp;\n    DDD: (isStrict: any, localeData: any) => RegExp;\n    DDDD: (isStrict: any, localeData: any) => RegExp;\n    Do: (isStrict: any, locale: {_ordinalParse: any, _ordinalParseLenient: any}) => any;\n    E: (isStrict: any, localeData: any) => RegExp;\n    G: (isStrict: any, localeData: any) => RegExp;\n    GG: (isStrict: any, localeData: any) => RegExp;\n    GGGG: (isStrict: any, localeData: any) => RegExp;\n    GGGGG: (isStrict: any, localeData: any) => RegExp;\n    H: (isStrict: any, localeData: any) => RegExp;\n    HH: (isStrict: any, localeData: any) => RegExp;\n    Hmm: (isStrict: any, localeData: any) => RegExp;\n    Hmmss: (isStrict: any, localeData: any) => RegExp;\n    M: (isStrict: any, localeData: any) => RegExp;\n    MM: (isStrict: any, localeData: any) => RegExp;\n    MMM: (isStrict: any, locale: {monthsShortRegex: (arg0: void) => any}) => any;\n    MMMM: (isStrict: any, locale: {monthsRegex: (arg0: void) => any}) => any;\n    Q: (isStrict: any, localeData: any) => RegExp;\n    S: (isStrict: any, localeData: any) => RegExp;\n    SS: (isStrict: any, localeData: any) => RegExp;\n    SSS: (isStrict: any, localeData: any) => RegExp;\n    SSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    W: (isStrict: any, localeData: any) => RegExp;\n    WW: (isStrict: any, localeData: any) => RegExp;\n    X: (isStrict: any, localeData: any) => RegExp;\n    Y: (isStrict: any, localeData: any) => RegExp;\n    YY: (isStrict: any, localeData: any) => RegExp;\n    YYYY: (isStrict: any, localeData: any) => RegExp;\n    YYYYY: (isStrict: any, localeData: any) => RegExp;\n    YYYYYY: (isStrict: any, localeData: any) => RegExp;\n    Z: (isStrict: any, localeData: any) => RegExp;\n    ZZ: (isStrict: any, localeData: any) => RegExp;\n    _days: any;\n    _locale: any;\n    _milliseconds: any;\n    _months: any;\n    a: (isStrict: any, locale: {_meridiemParse: any}) => any;\n    charsLeftOver: number;\n    d: number | ((isStrict: any, localeData: any) => RegExp);\n    dd: (isStrict: any, localeData: any) => RegExp;\n    ddd: (isStrict: any, localeData: any) => RegExp;\n    dddd: (isStrict: any, localeData: any) => RegExp;\n    e: (isStrict: any, localeData: any) => RegExp;\n    empty: boolean;\n    from: interface_4111 | moment;\n    g: (isStrict: any, localeData: any) => RegExp;\n    gg: (isStrict: any, localeData: any) => RegExp;\n    gggg: (isStrict: any, localeData: any) => RegExp;\n    ggggg: (isStrict: any, localeData: any) => RegExp;\n    h: (isStrict: any, localeData: any) => RegExp;\n    hh: (isStrict: any, localeData: any) => RegExp;\n    hmm: (isStrict: any, localeData: any) => RegExp;\n    hmmss: (isStrict: any, localeData: any) => RegExp;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    m: (isStrict: any, localeData: any) => RegExp;\n    milliseconds: any;\n    mm: (isStrict: any, localeData: any) => RegExp;\n    ms: any;\n    nullInput: boolean;\n    overflow: number;\n    s: (isStrict: any, localeData: any) => RegExp;\n    ss: (isStrict: any, localeData: any) => RegExp;\n    to: interface_4111 | moment;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    w: (isStrict: any, localeData: any) => RegExp;\n    ww: (isStrict: any, localeData: any) => RegExp;\n    x: (isStrict: any, localeData: any) => RegExp;\n}\n\ninterface interface_4129 {\n    _bubble: () => Duration;\n    abs: () => Duration;\n    add: (input: string | interface_3964, value: string | number) => Duration | number;\n    as: (units: string) => number;\n    asDays: () => number;\n    asHours: () => number;\n    asMilliseconds: () => number;\n    asMinutes: () => number;\n    asMonths: () => number;\n    asSeconds: () => number;\n    asWeeks: () => number;\n    asYears: () => number;\n    constructor: DurationConstructor;\n    days: () => number;\n    get: (units: string | number) => any;\n    hours: () => any;\n    humanize: (withSuffix: any) => any;\n    lang: () => any;\n    locale: (key: string) => string | Duration;\n    localeData: () => string | Locale;\n    milliseconds: () => any;\n    minutes: () => any;\n    months: () => any;\n    seconds: () => any;\n    subtract: (input: string | interface_3968, value: string | number) => Duration;\n    toISOString: () => string;\n    toIsoString: () => string;\n    toJSON: () => string;\n    toString: () => string;\n    valueOf: () => string | number;\n    weeks: () => number;\n    years: () => any;\n}\n\ninterface interface_4130 {\n    abbr: string;\n    ordinal: (number: number) => string | number;\n    ordinalParse: RegExp;\n}\n\n// Seen as: locale, other, res\ninterface interface_3901 {\n    _nextDay: any;\n    add: (val: string | interface_3883, period: string | interface_3883) => moment | number;\n    isValid: void;\n}\n\n// Seen as: locale, res\ninterface interface_3928 {\n    _nextDay: any;\n    add: (val: string | interface_3883, period: string | interface_3883) => moment | number;\n}\n\n// Seen as: a, array1\ninterface interface_4085 {\n    [index: number]: number;\n    length: number;\n}\n\ninterface interface_4132 {\n    getTime: () => string;\n    getUTCMinutes: () => number;\n    setUTCMinutes: (arg0: void) => void;\n}\n\ninterface interface_4133 {\n    abbr: string;\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    nullInput: boolean;\n    ordinal: (number: number) => string | number;\n    ordinalParse: RegExp;\n    overflow: number;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n// Seen as: locale\ninterface interface_4135 {\n    _week: {dow: number, doy: number};\n    abbr: string;\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    isPM: (arg0: void) => any;\n    iso: boolean;\n    meridiemHour: (arg0: void, arg1: void) => number;\n    nullInput: boolean;\n    ordinal: (number: number) => string | number;\n    ordinalParse: RegExp;\n    overflow: number;\n    preparse: (string: any) => any;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n// Seen as: flags\ninterface interface_4016 {\n    (config?: {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4130) : Locale | moment | string | interface_4021;\n    _overflowDayOfYear: any;\n    _overflowWeekday: any;\n    _overflowWeeks: any;\n    abbr: string;\n    bigHour: boolean;\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    invalidWeekday: any;\n    iso: boolean;\n    nullInput: boolean;\n    ordinal: (number: number) => string | number;\n    ordinalParse: RegExp;\n    overflow: number;\n    score: any;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n// Seen as: w\ninterface interface_4136 {\n    E: number;\n    GG: number;\n    W: number;\n    d: number;\n    e: number;\n    gg: number;\n    w: number;\n}\n\n// Seen as: a, array1\ninterface interface_4047 {\n    [index: number]: number;\n    length: number;\n}\n\ninterface interface_4137 {\n    getTime: () => string;\n    getUTCMinutes: () => number;\n    setUTCMinutes: (arg0: void) => void;\n}\n\ninterface interface_4138 {\n    abbr: string;\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    nullInput: boolean;\n    ordinal: (number: number) => string | number;\n    ordinalParse: RegExp;\n    overflow: number;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n// Seen as: locale\ninterface interface_4139 {\n    _week: {dow: number, doy: number};\n    abbr: string;\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    isPM: (arg0: void) => any;\n    iso: boolean;\n    meridiemHour: (arg0: void, arg1: void) => number;\n    nullInput: boolean;\n    ordinal: (number: number) => string | number;\n    ordinalParse: RegExp;\n    overflow: number;\n    preparse: (string: any) => any;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n// Seen as: array2\ninterface interface_4032 {\n    [index: number]: any;\n    length: number;\n}\n\n// Seen as: locale, res\ninterface interface_3965 {\n    _nextDay: any;\n    add: (val: string | interface_3883, period: string | interface_3883) => moment | number;\n}\n\n// Seen as: locale, res\ninterface interface_3971 {\n    _nextDay: any;\n    add: (val: string | interface_3883, period: string | interface_3883) => moment | number;\n}\n\n// Seen as: locale, res\ninterface interface_3986 {\n    _nextDay: any;\n    add: (val: string | interface_3883, period: string | interface_3883) => moment | number;\n}\n\n// Seen as: locale, res\ninterface interface_4021 {\n    _nextDay: any;\n    add: (val: string | interface_3883, period: string | interface_3883) => moment | number;\n}\n\n","newDeclaration":"declare class moment {\n    constructor ();\n    static ISO_8601: () => void;\n    static calendarFormat: (myMoment: moment, now: moment) => string;\n    static createFromInputFallback: () => any;\n    static defaultFormat: string;\n    static defaultFormatUtc: string;\n    static defineLocale: (name: string, config: interface_4251) => Locale;\n    static deprecationHandler: void;\n    static duration: interface_4197;\n    static fn: interface_4271;\n    static invalid: (flags: interface_4237) => interface_4241;\n    static isDate: (input: number | moment | interface_4268 | number[]) => boolean;\n    static isDuration: (obj: Duration | interface_4272 | string) => boolean;\n    static isMoment: (obj: number | moment | interface_4273 | number[]) => boolean;\n    static lang: () => string;\n    static langData: () => Locale;\n    static locale: (key?: string, values?: interface_4274) => string;\n    static localeData: (key?: string | Duration) => Locale | interface_4048;\n    static locales: () => Array<any>;\n    static max: () => interface_4268 | moment;\n    static min: () => interface_4268 | moment;\n    static momentProperties: Array<any>;\n    static months: (format: any, index: any) => Array<any>;\n    static monthsShort: (format: any, index: any) => Array<any>;\n    static normalizeUnits: (units: string) => any;\n    static now: () => string;\n    static parseTwoDigitYear: (input: {length: any}) => string | number;\n    static parseZone: () => any;\n    static relativeTimeRounding: (roundingFunction: (x: number) => number) => boolean | ((x: number) => number);\n    static relativeTimeThreshold: (threshold: string | number, limit: any) => boolean;\n    static suppressDeprecationWarnings: boolean;\n    static unix: (input: number) => interface_4268 | moment;\n    static updateLocale: (name: string, config: interface_4278) => any;\n    static updateOffset: () => void;\n    static utc: (input: moment | RegExp | string | string[] | interface_4279, format: any, locale: any, strict: any) => interface_4210;\n    static version: string;\n    static weekdays: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysMin: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    static weekdaysShort: (localeSorted: string | number, format: string | number, index: string | number) => Array<any>;\n    _d: Date;\n    _i: Array<any>;\n    _isAMomentObject: boolean;\n    _isUTC: boolean;\n    _isValid: boolean;\n    _locale: Locale;\n    _offset: number;\n    _pf: interface_4280;\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n    calendar: (time: any, formats: interface_4189) => any;\n    clone: () => moment;\n    creationData: () => interface_4252;\n    date: (value: number) => moment;\n    dates: () => moment;\n    day: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    dayOfYear: (input: number) => string | number | moment;\n    days: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    daysInMonth: () => number;\n    diff: (input: moment | string | RegExp | string[] | interface_4254, units: string, asFloat: boolean) => number;\n    endOf: (units: string) => moment;\n    format: (inputString: string) => any;\n    from: (time: moment | RegExp | string | string[] | interface_4255, withoutSuffix: any) => any;\n    fromNow: (withoutSuffix: any) => any;\n    get: (units: string | number) => moment;\n    hasAlignedHourOffset: (input: moment | RegExp | string | string[] | interface_4256) => boolean;\n    hour: (value: number) => moment;\n    hours: (value: number) => moment;\n    invalidAt: () => any;\n    isAfter: (input: string | moment | RegExp | string[] | interface_4257, units: any) => boolean;\n    isBefore: (input: string | RegExp | moment | string[] | interface_4259, units: any) => boolean;\n    isBetween: (from: string | RegExp | moment | string[] | interface_4261, to: string | moment | RegExp | string[] | interface_4263, units: any, inclusivity: string | interface_4193) => boolean;\n    isDST: () => boolean;\n    isDSTShifted: () => boolean;\n    isLeapYear: () => boolean;\n    isLocal: () => boolean;\n    isSame: (input: moment | RegExp | string | string[] | interface_4264, units: string) => boolean;\n    isSameOrAfter: (input: moment | string | RegExp | string[] | interface_4265, units: any) => boolean;\n    isSameOrBefore: (input: RegExp | string | moment | string[] | interface_4267, units: any) => boolean;\n    isUTC: () => boolean;\n    isUtc: () => boolean;\n    isUtcOffset: () => boolean;\n    isValid: () => boolean;\n    isoWeek: (input: number) => moment | number;\n    isoWeekYear: (input: number) => any;\n    isoWeekday: (input: string) => moment | number;\n    isoWeeks: (input: number) => moment | number;\n    isoWeeksInYear: () => number;\n    lang: () => any;\n    local: (keepLocalTime: any) => moment;\n    locale: (key: Duration | string) => string | Duration;\n    localeData: () => string | Locale;\n    max: () => interface_4268 | moment;\n    millisecond: (value: number) => moment;\n    milliseconds: (value: number) => moment;\n    min: () => interface_4268 | moment;\n    minute: (value: number) => moment;\n    minutes: (value: number) => moment;\n    month: (value: string) => moment | string | RegExp | string[] | interface_4054;\n    months: () => moment;\n    parseZone: () => moment;\n    parsingFlags: () => interface_4187;\n    quarter: (input: number) => number | moment;\n    quarters: (input: number) => number | moment;\n    second: (value: number) => moment;\n    seconds: (value: number) => moment;\n    set: (units: string | number | interface_4191, value: any) => moment;\n    startOf: (units: string) => moment;\n    subtract: (val: string | interface_4179, period: string | interface_4179) => moment;\n    to: (time: string | moment | RegExp | string[] | interface_4269, withoutSuffix: any) => any;\n    toArray: () => moment[];\n    toDate: () => Date;\n    toISOString: () => any;\n    toJSON: () => any;\n    toNow: (withoutSuffix: any) => any;\n    toObject: () => interface_4270;\n    toString: () => any;\n    unix: () => number;\n    utc: (keepLocalTime: any) => number | moment;\n    utcOffset: (input: number, keepLocalTime: any) => moment | number;\n    valueOf: () => Object | string;\n    week: (input: number) => number | moment;\n    weekYear: (input: number) => any;\n    weekday: (input: number) => moment | number;\n    weeks: (input: number) => number | moment;\n    weeksInYear: () => number;\n    year: (value: any) => moment | number;\n    years: () => moment;\n    zone: () => number;\n    zoneAbbr: () => string;\n    zoneName: () => string;\n}\ninterface LocaleConstructor {\n    new (config: interface_4281) : Locale\n}\n\n// Seen as: \ninterface Locale {\n    _abbr: string;\n    _calendar: interface_4282;\n    _config: interface_4285;\n    _invalidDate: string;\n    _longDateFormat: interface_4283;\n    _meridiemParse: RegExp;\n    _months: string[];\n    _monthsShort: string[];\n    _ordinalParse: RegExp;\n    _ordinalParseLenient: RegExp;\n    _relativeTime: interface_4284;\n    _week: {dow: number, doy: number};\n    _weekdays: string[];\n    _weekdaysMin: string[];\n    _weekdaysShort: string[];\n    calendar: (key: string, mom: any, now: any) => {call: void};\n    firstDayOfWeek: () => number;\n    firstDayOfYear: () => number;\n    invalidDate: () => string;\n    isPM: (input: string | number) => boolean;\n    longDateFormat: (key: string | number) => any;\n    meridiem: (hours: number, minutes: any, isLower: any) => string;\n    months: (m: {month: () => string}, format: string) => string;\n    monthsParse: (monthName: {toLocaleLowerCase: () => any}, format: string, strict: any) => number;\n    monthsRegex: (isStrict: any) => RegExp;\n    monthsShort: (m: {month: () => string}, format: string) => string;\n    monthsShortRegex: (isStrict: any) => RegExp;\n    ordinal: (number: any) => any;\n    pastFuture: (diff: number, output: any) => any;\n    postformat: (string: any) => any;\n    preparse: (string: any) => any;\n    relativeTime: (number: ((substring: string, args: any) => string) | string, withoutSuffix: interface_4286, string: string | number, isFuture: any) => any;\n    set: (config: interface_4281) => void;\n    week: (mom: {dayOfYear: () => number, year: () => number}) => number;\n    weekdays: (m: {day: () => string}, format: string) => string;\n    weekdaysMin: (m: {day: () => string | number}) => string;\n    weekdaysMinRegex: (isStrict: any) => RegExp;\n    weekdaysParse: (weekdayName: {toLocaleLowerCase: () => any}, format: string, strict: any) => number;\n    weekdaysRegex: (isStrict: any) => RegExp;\n    weekdaysShort: (m: {day: () => string | number}) => string;\n    weekdaysShortRegex: (isStrict: any) => RegExp;\n}\n\ninterface DurationConstructor {\n    new (duration: Duration | string | interface_4288) : Duration\n}\n\n// Seen as: \ninterface Duration {\n    _bubble: () => Duration;\n    _data: interface_4289;\n    _days: number;\n    _locale: Locale;\n    _milliseconds: number;\n    _months: number;\n    abs: () => Duration;\n    add: (input: string | interface_4160, value: string | number) => Duration;\n    as: (units: string) => number;\n    asDays: () => number;\n    asHours: () => number;\n    asMilliseconds: () => number;\n    asMinutes: () => number;\n    asMonths: () => number;\n    asSeconds: () => number;\n    asWeeks: () => number;\n    asYears: () => number;\n    days: () => number;\n    get: (units: string | number) => any;\n    hours: () => any;\n    humanize: (withSuffix: any) => any;\n    lang: () => any;\n    locale: (key: Duration | string) => string | Duration;\n    localeData: () => string | Locale;\n    milliseconds: () => any;\n    minutes: () => any;\n    months: () => any;\n    seconds: () => any;\n    subtract: (input: string | interface_4160, value: string | number) => Duration;\n    toISOString: () => string;\n    toIsoString: () => string;\n    toJSON: () => string;\n    toString: () => string;\n    valueOf: () => string | number;\n    weeks: () => number;\n    years: () => any;\n}\n\ninterface interface_4067 {\n    (isStrict: string, locale: interface_4290) : moment | string | RegExp | string[] | interface_4100;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4251 {\n    abbr: string;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n}\n\ninterface interface_4197 {\n    (input: Duration | string | interface_4198, key: string) : Duration;\n    fn: interface_4291;\n}\n\n// Seen as: duration, input\ninterface interface_4026 {\n    (config?: Duration | interface_4293 | string, keepLocalTime?: interface_4294) : any;\n    A: (isStrict: any, locale: interface_4295) => string | string[] | RegExp | interface_4081;\n    D: (isStrict: any, localeData: any) => RegExp;\n    DD: (isStrict: any, localeData: any) => RegExp;\n    DDD: (isStrict: any, localeData: any) => RegExp;\n    DDDD: (isStrict: any, localeData: any) => RegExp;\n    Do: (isStrict: any, locale: interface_4296) => string | string[] | RegExp | interface_4094;\n    E: (isStrict: any, localeData: any) => RegExp;\n    G: (isStrict: any, localeData: any) => RegExp;\n    GG: (isStrict: any, localeData: any) => RegExp;\n    GGGG: (isStrict: any, localeData: any) => RegExp;\n    GGGGG: (isStrict: any, localeData: any) => RegExp;\n    H: (isStrict: any, localeData: any) => RegExp;\n    HH: (isStrict: any, localeData: any) => RegExp;\n    Hmm: (isStrict: any, localeData: any) => RegExp;\n    Hmmss: (isStrict: any, localeData: any) => RegExp;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string | ((isStrict: any, localeData: any) => RegExp);\n    MM: string | ((isStrict: any, localeData: any) => RegExp);\n    MMM: (isStrict: any, locale: interface_4297) => string | string[] | RegExp | interface_4088;\n    MMMM: (isStrict: any, locale: interface_4298) => string | string[] | RegExp | interface_4083;\n    Q: (isStrict: any, localeData: any) => RegExp;\n    S: (isStrict: any, localeData: any) => RegExp;\n    SS: (isStrict: any, localeData: any) => RegExp;\n    SSS: (isStrict: any, localeData: any) => RegExp;\n    SSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    W: (isStrict: any, localeData: any) => RegExp;\n    WW: (isStrict: any, localeData: any) => RegExp;\n    X: (isStrict: any, localeData: any) => RegExp;\n    Y: (isStrict: any, localeData: any) => RegExp;\n    YY: (isStrict: any, localeData: any) => RegExp;\n    YYYY: (isStrict: any, localeData: any) => RegExp;\n    YYYYY: (isStrict: any, localeData: any) => RegExp;\n    YYYYYY: (isStrict: any, localeData: any) => RegExp;\n    Z: (isStrict: any, localeData: any) => RegExp;\n    ZZ: (isStrict: any, localeData: any) => RegExp;\n    _days: any;\n    _locale: any;\n    _milliseconds: any;\n    _months: any;\n    _monthsRegex: RegExp;\n    _monthsShortRegex: RegExp;\n    _weekdaysMinRegex: RegExp;\n    _weekdaysRegex: RegExp;\n    _weekdaysShortRegex: RegExp;\n    a: (isStrict: any, locale: interface_4295) => string | string[] | RegExp | interface_4081;\n    abbr: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: ((isStrict: any, localeData: any) => RegExp) | string;\n    dd: string | ((isStrict: any, locale: interface_4300) => string | string[] | RegExp | interface_4090);\n    ddd: (isStrict: any, locale: interface_4301) => string | string[] | RegExp | interface_4096;\n    dddd: (isStrict: any, locale: interface_4302) => string | string[] | RegExp | interface_4070;\n    dow: number;\n    doy: number;\n    e: (isStrict: any, localeData: any) => RegExp;\n    empty: boolean;\n    from: moment | string | RegExp | string[] | interface_4303;\n    future: string;\n    g: (isStrict: any, localeData: any) => RegExp;\n    gg: (isStrict: any, localeData: any) => RegExp;\n    gggg: (isStrict: any, localeData: any) => RegExp;\n    ggggg: (isStrict: any, localeData: any) => RegExp;\n    h: string | ((isStrict: any, localeData: any) => RegExp);\n    hh: string | ((isStrict: any, localeData: any) => RegExp);\n    hmm: (isStrict: any, localeData: any) => RegExp;\n    hmmss: (isStrict: any, localeData: any) => RegExp;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string | ((isStrict: any, localeData: any) => RegExp);\n    meridiem: any;\n    meridiemParse: RegExp;\n    milliseconds: any;\n    mm: string | ((isStrict: any, localeData: any) => RegExp);\n    months: string[];\n    monthsShort: string[];\n    ms: any;\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string | ((number: number) => string | RegExp | string[] | interface_4067);\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string | ((isStrict: any, localeData: any) => RegExp);\n    sameDay: string;\n    sameElse: string;\n    ss: (isStrict: any, localeData: any) => RegExp;\n    to: moment | string | RegExp | string[] | interface_4306;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    w: (isStrict: any, localeData: any) => RegExp;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    ww: (isStrict: any, localeData: any) => RegExp;\n    x: (isStrict: any, localeData: any) => RegExp;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4172 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: formats\ninterface interface_4189 {\n}\n\ninterface interface_4252 {\n    format: any;\n    input: Array<any>;\n    isUTC: boolean;\n    locale: Locale;\n    strict: any;\n}\n\ninterface interface_4098 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4176;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4253 {\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    meridiem: any;\n    nullInput: boolean;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n// Seen as: input\ninterface interface_4254 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _d: Date;\n    _isAMomentObject: boolean;\n    _isUTC: boolean;\n    _locale: Locale;\n    _pf: interface_4253;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: input, res\ninterface interface_4255 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _d: Date;\n    _isAMomentObject: boolean;\n    _isUTC: boolean;\n    _locale: Locale;\n    _nextDay: any;\n    _pf: interface_4253;\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: input\ninterface interface_4256 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: input, localInput\ninterface interface_4257 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    isValid: () => any;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4258 {\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    meridiem: any;\n    nullInput: boolean;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n// Seen as: input, m, res\ninterface interface_4259 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _d: Date;\n    _i: Array<any>;\n    _isAMomentObject: boolean;\n    _isUTC: boolean;\n    _isValid: boolean;\n    _locale: Locale;\n    _nextDay: any;\n    _offset: number;\n    _pf: interface_4258;\n    _strict: any;\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4260 {\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    meridiem: any;\n    nullInput: boolean;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n// Seen as: m\ninterface interface_4261 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _d: Date;\n    _isAMomentObject: boolean;\n    _isUTC: boolean;\n    _isValid: boolean;\n    _locale: Locale;\n    _offset: number;\n    _pf: interface_4260;\n    _strict: any;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4262 {\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    meridiem: any;\n    nullInput: boolean;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n// Seen as: input, localInput, m\ninterface interface_4263 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _d: Date;\n    _isAMomentObject: boolean;\n    _isUTC: boolean;\n    _isValid: boolean;\n    _locale: Locale;\n    _offset: number;\n    _pf: interface_4262;\n    _strict: any;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    isValid: () => any;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: inclusivity\ninterface interface_4193 {\n    [index: number]: string;\n}\n\n// Seen as: input\ninterface interface_4264 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: input, localInput\ninterface interface_4265 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    isValid: () => any;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4266 {\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    meridiem: any;\n    nullInput: boolean;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n// Seen as: input, m\ninterface interface_4267 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _d: Date;\n    _i: Array<any>;\n    _isAMomentObject: boolean;\n    _isUTC: boolean;\n    _isValid: boolean;\n    _locale: Locale;\n    _offset: number;\n    _pf: interface_4266;\n    _strict: any;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: res\ninterface interface_4268 {\n    _nextDay: any;\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n}\n\ninterface interface_4054 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4187 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    abbr: string;\n    calendar: interface_4307;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4308;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4309;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n// Seen as: units\ninterface interface_4191 {\n}\n\n// Seen as: duration, input\ninterface interface_4179 {\n    (config?: {_d: Date, _i: string | number, _useUTC: any} | Duration | string, keepLocalTime?: interface_4294) : any;\n    A: (isStrict: any, locale: interface_4295) => string | string[] | RegExp | interface_4081;\n    D: (isStrict: any, localeData: any) => RegExp;\n    DD: (isStrict: any, localeData: any) => RegExp;\n    DDD: (isStrict: any, localeData: any) => RegExp;\n    DDDD: (isStrict: any, localeData: any) => RegExp;\n    Do: (isStrict: any, locale: interface_4296) => string | string[] | RegExp | interface_4094;\n    E: (isStrict: any, localeData: any) => RegExp;\n    G: (isStrict: any, localeData: any) => RegExp;\n    GG: (isStrict: any, localeData: any) => RegExp;\n    GGGG: (isStrict: any, localeData: any) => RegExp;\n    GGGGG: (isStrict: any, localeData: any) => RegExp;\n    H: (isStrict: any, localeData: any) => RegExp;\n    HH: (isStrict: any, localeData: any) => RegExp;\n    Hmm: (isStrict: any, localeData: any) => RegExp;\n    Hmmss: (isStrict: any, localeData: any) => RegExp;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string | ((isStrict: any, localeData: any) => RegExp);\n    MM: string | ((isStrict: any, localeData: any) => RegExp);\n    MMM: (isStrict: any, locale: interface_4297) => string | string[] | RegExp | interface_4088;\n    MMMM: (isStrict: any, locale: interface_4298) => string | string[] | RegExp | interface_4083;\n    Q: (isStrict: any, localeData: any) => RegExp;\n    S: (isStrict: any, localeData: any) => RegExp;\n    SS: (isStrict: any, localeData: any) => RegExp;\n    SSS: (isStrict: any, localeData: any) => RegExp;\n    SSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    W: (isStrict: any, localeData: any) => RegExp;\n    WW: (isStrict: any, localeData: any) => RegExp;\n    X: (isStrict: any, localeData: any) => RegExp;\n    Y: (isStrict: any, localeData: any) => RegExp;\n    YY: (isStrict: any, localeData: any) => RegExp;\n    YYYY: (isStrict: any, localeData: any) => RegExp;\n    YYYYY: (isStrict: any, localeData: any) => RegExp;\n    YYYYYY: (isStrict: any, localeData: any) => RegExp;\n    Z: (isStrict: any, localeData: any) => RegExp;\n    ZZ: (isStrict: any, localeData: any) => RegExp;\n    _days: any;\n    _locale: any;\n    _milliseconds: any;\n    _months: any;\n    _monthsRegex: RegExp;\n    _monthsShortRegex: RegExp;\n    _weekdaysMinRegex: RegExp;\n    _weekdaysRegex: RegExp;\n    _weekdaysShortRegex: RegExp;\n    a: (isStrict: any, locale: interface_4295) => string | string[] | RegExp | interface_4081;\n    abbr: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: ((isStrict: any, localeData: any) => RegExp) | string;\n    dd: string | ((isStrict: any, locale: interface_4300) => string | string[] | RegExp | interface_4090);\n    ddd: (isStrict: any, locale: interface_4301) => string | string[] | RegExp | interface_4096;\n    dddd: (isStrict: any, locale: interface_4302) => string | string[] | RegExp | interface_4070;\n    dow: number;\n    doy: number;\n    e: (isStrict: any, localeData: any) => RegExp;\n    empty: boolean;\n    from: moment | string | RegExp | string[] | interface_4303;\n    future: string;\n    g: (isStrict: any, localeData: any) => RegExp;\n    gg: (isStrict: any, localeData: any) => RegExp;\n    gggg: (isStrict: any, localeData: any) => RegExp;\n    ggggg: (isStrict: any, localeData: any) => RegExp;\n    h: string | ((isStrict: any, localeData: any) => RegExp);\n    hh: string | ((isStrict: any, localeData: any) => RegExp);\n    hmm: (isStrict: any, localeData: any) => RegExp;\n    hmmss: (isStrict: any, localeData: any) => RegExp;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string | ((isStrict: any, localeData: any) => RegExp);\n    meridiem: any;\n    meridiemParse: RegExp;\n    milliseconds: any;\n    mm: string | ((isStrict: any, localeData: any) => RegExp);\n    months: string[];\n    monthsShort: string[];\n    ms: any;\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string | ((number: number) => string | RegExp | string[] | interface_4067);\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string | ((isStrict: any, localeData: any) => RegExp);\n    sameDay: string;\n    sameElse: string;\n    ss: (isStrict: any, localeData: any) => RegExp;\n    to: moment | string | RegExp | string[] | interface_4306;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    w: (isStrict: any, localeData: any) => RegExp;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    ww: (isStrict: any, localeData: any) => RegExp;\n    x: (isStrict: any, localeData: any) => RegExp;\n    y: string;\n    yy: string;\n}\n\n// Seen as: input, m, res\ninterface interface_4269 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _d: {getTime: () => number};\n    _isValid: any;\n    _nextDay: any;\n    _strict: any;\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4270 {\n    date: moment;\n    hours: moment;\n    milliseconds: moment;\n    minutes: moment;\n    months: moment;\n    seconds: moment;\n    years: moment;\n}\n\ninterface interface_4271 {\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n    calendar: (time: any, formats: interface_4189) => any;\n    clone: () => moment;\n    constructor: typeof moment;\n    creationData: () => interface_4252;\n    date: (value: number) => moment;\n    dates: () => moment;\n    day: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    dayOfYear: (input: number) => string | number | moment;\n    days: (input: string) => string | RegExp | string[] | moment | interface_4098;\n    daysInMonth: () => number;\n    diff: (input: moment | string | RegExp | string[] | interface_4254, units: string, asFloat: boolean) => number;\n    endOf: (units: string) => moment;\n    format: (inputString: string) => any;\n    from: (time: moment | RegExp | string | string[] | interface_4255, withoutSuffix: any) => any;\n    fromNow: (withoutSuffix: any) => any;\n    get: (units: string | number) => moment;\n    hasAlignedHourOffset: (input: moment | RegExp | string | string[] | interface_4256) => boolean;\n    hour: (value: number) => moment;\n    hours: (value: number) => moment;\n    invalidAt: () => any;\n    isAfter: (input: string | moment | RegExp | string[] | interface_4257, units: any) => boolean;\n    isBefore: (input: string | RegExp | moment | string[] | interface_4259, units: any) => boolean;\n    isBetween: (from: string | RegExp | moment | string[] | interface_4261, to: string | moment | RegExp | string[] | interface_4263, units: any, inclusivity: string | interface_4193) => boolean;\n    isDST: () => boolean;\n    isDSTShifted: () => boolean;\n    isLeapYear: () => boolean;\n    isLocal: () => boolean;\n    isSame: (input: moment | RegExp | string | string[] | interface_4264, units: string) => boolean;\n    isSameOrAfter: (input: moment | string | RegExp | string[] | interface_4265, units: any) => boolean;\n    isSameOrBefore: (input: RegExp | string | moment | string[] | interface_4267, units: any) => boolean;\n    isUTC: () => boolean;\n    isUtc: () => boolean;\n    isUtcOffset: () => boolean;\n    isValid: () => boolean;\n    isoWeek: (input: number) => moment | number;\n    isoWeekYear: (input: number) => any;\n    isoWeekday: (input: string) => moment | number;\n    isoWeeks: (input: number) => moment | number;\n    isoWeeksInYear: () => number;\n    lang: () => any;\n    local: (keepLocalTime: any) => moment;\n    locale: (key: Duration | string) => string | Duration;\n    localeData: () => string | Locale;\n    max: () => interface_4268 | moment;\n    millisecond: (value: number) => moment;\n    milliseconds: (value: number) => moment;\n    min: () => interface_4268 | moment;\n    minute: (value: number) => moment;\n    minutes: (value: number) => moment;\n    month: (value: string) => moment | string | RegExp | string[] | interface_4054;\n    months: () => moment;\n    parseZone: () => moment;\n    parsingFlags: () => interface_4187;\n    quarter: (input: number) => number | moment;\n    quarters: (input: number) => number | moment;\n    second: (value: number) => moment;\n    seconds: (value: number) => moment;\n    set: (units: string | number | interface_4191, value: any) => moment;\n    startOf: (units: string) => moment;\n    subtract: (val: string | interface_4179, period: string | interface_4179) => moment;\n    to: (time: string | moment | RegExp | string[] | interface_4269, withoutSuffix: any) => any;\n    toArray: () => moment[];\n    toDate: () => Date;\n    toISOString: () => any;\n    toJSON: () => any;\n    toNow: (withoutSuffix: any) => any;\n    toObject: () => interface_4270;\n    toString: () => any;\n    unix: () => number;\n    utc: (keepLocalTime: any) => number | moment;\n    utcOffset: (input: number, keepLocalTime: any) => moment | number;\n    valueOf: () => Object | string;\n    week: (input: number) => number | moment;\n    weekYear: (input: number) => any;\n    weekday: (input: number) => moment | number;\n    weeks: (input: number) => number | moment;\n    weeksInYear: () => number;\n    year: (value: any) => moment | number;\n    years: () => moment;\n    zone: () => number;\n    zoneAbbr: () => string;\n    zoneName: () => string;\n}\n\ninterface interface_4237 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n// Seen as: arg0, c, config, from, m, tempConfig, to\ninterface interface_4241 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4310 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4312;\n    _isValid: boolean;\n    _l: any;\n    _locale: Locale | boolean | Array<any> | interface_4313;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: boolean | Array<any> | Locale | interface_4243;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\ninterface interface_4272 {\n    from: interface_4268 | moment;\n    to: interface_4268 | moment;\n}\n\n// Seen as: input, obj, res\ninterface interface_4273 {\n    _isAMomentObject: any;\n    _nextDay: any;\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n}\n\ninterface interface_4274 {\n    abbr: string;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n}\n\n// Seen as: locale\ninterface interface_4048 {\n}\n\ninterface interface_4275 {\n    lastDay: string;\n    lastWeek: string;\n    nextDay: string;\n    nextWeek: string;\n    sameDay: string;\n    sameElse: string;\n}\n\ninterface interface_4276 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n}\n\ninterface interface_4277 {\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    future: string;\n    h: string;\n    hh: string;\n    m: string;\n    mm: string;\n    past: string;\n    s: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4278 {\n    abbr: string;\n    calendar: interface_4275;\n    invalidDate: string;\n    longDateFormat: interface_4276;\n    meridiemParse: RegExp;\n    months: string[];\n    monthsShort: string[];\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    relativeTime: interface_4277;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n}\n\n// Seen as: input\ninterface interface_4279 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: arg0, c, config, from, m, other, tempConfig, to\ninterface interface_4210 {\n    () : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _a: moment | RegExp | string | interface_4315 | string[];\n    _d: interface_4311;\n    _dayOfYear: number;\n    _f: any;\n    _i: any;\n    _isAMomentObject: Locale | boolean | Array<any> | interface_4312;\n    _isUTC: Locale | boolean | Array<any> | interface_4316;\n    _isValid: boolean;\n    _l: any;\n    _locale: boolean | Array<any> | Locale | interface_4317;\n    _meridiem: any;\n    _nextDay: any;\n    _offset: Locale | boolean | Array<any> | interface_4312;\n    _pf: Locale | boolean | Array<any> | interface_4220;\n    _strict: Locale | boolean | Array<any> | interface_4312;\n    _tzm: any;\n    _useUTC: any;\n    _w: interface_4314;\n    abbr: string;\n    calendar: interface_4282;\n    charsLeftOver: number;\n    d: string;\n    day: (arg0: void) => {day: () => string};\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4283;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    month: () => string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4284;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    set: (arg0: void, arg1: void) => any;\n    toArray: () => interface_4226;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\ninterface interface_4280 {\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    meridiem: any;\n    nullInput: boolean;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\ninterface interface_4281 {\n    abbr: string;\n    calendar: interface_4275;\n    invalidDate: string;\n    longDateFormat: interface_4276;\n    meridiemParse: RegExp;\n    months: string[];\n    monthsShort: string[];\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    relativeTime: interface_4277;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n}\n\ninterface interface_4282 {\n    lastDay: string;\n    lastWeek: string;\n    nextDay: string;\n    nextWeek: string;\n    sameDay: string;\n    sameElse: string;\n}\n\ninterface interface_4283 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n}\n\ninterface interface_4284 {\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    future: string;\n    h: string;\n    hh: string;\n    m: string;\n    mm: string;\n    past: string;\n    s: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4285 {\n    abbr: string;\n    calendar: interface_4282;\n    invalidDate: string;\n    longDateFormat: interface_4283;\n    meridiemParse: RegExp;\n    months: string[];\n    monthsShort: string[];\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    relativeTime: interface_4284;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n}\n\ninterface interface_4154 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4143 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4148 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4131 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4142;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4146 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4150 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4152 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: locale\ninterface interface_4286 {\n    _meridiemParse: string | string[] | RegExp | interface_4154;\n    _ordinalParse: string | string[] | RegExp | interface_4143;\n    _ordinalParseLenient: string | string[] | RegExp | interface_4143;\n    monthsRegex: (arg0: void) => string | string[] | RegExp | interface_4148;\n    monthsShortRegex: (arg0: void) => string | string[] | RegExp | interface_4131;\n    weekdaysMinRegex: (arg0: void) => string | string[] | RegExp | interface_4146;\n    weekdaysRegex: (arg0: void) => string | string[] | RegExp | interface_4150;\n    weekdaysShortRegex: (arg0: void) => string | string[] | RegExp | interface_4152;\n}\n\ninterface interface_4287 {\n    from: interface_4268 | moment;\n    to: interface_4268 | moment;\n}\n\n// Seen as: duration, input\ninterface interface_4288 {\n    M: number;\n    _days: number;\n    _locale: Locale;\n    _milliseconds: number;\n    _months: number;\n    d: number;\n    from: interface_4268 | moment;\n    h: number;\n    m: number;\n    milliseconds: Duration | interface_4287 | string;\n    ms: number;\n    s: number;\n    to: interface_4268 | moment;\n    w: number;\n    y: number;\n}\n\ninterface interface_4289 {\n    days: number;\n    hours: number;\n    milliseconds: number;\n    minutes: number;\n    months: number;\n    seconds: number;\n    years: number;\n}\n\n// Seen as: duration, input\ninterface interface_4160 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    A: (isStrict: any, locale: interface_4295) => string | string[] | RegExp | interface_4081;\n    D: (isStrict: any, localeData: any) => RegExp;\n    DD: (isStrict: any, localeData: any) => RegExp;\n    DDD: (isStrict: any, localeData: any) => RegExp;\n    DDDD: (isStrict: any, localeData: any) => RegExp;\n    Do: (isStrict: any, locale: interface_4296) => string | string[] | RegExp | interface_4094;\n    E: (isStrict: any, localeData: any) => RegExp;\n    G: (isStrict: any, localeData: any) => RegExp;\n    GG: (isStrict: any, localeData: any) => RegExp;\n    GGGG: (isStrict: any, localeData: any) => RegExp;\n    GGGGG: (isStrict: any, localeData: any) => RegExp;\n    H: (isStrict: any, localeData: any) => RegExp;\n    HH: (isStrict: any, localeData: any) => RegExp;\n    Hmm: (isStrict: any, localeData: any) => RegExp;\n    Hmmss: (isStrict: any, localeData: any) => RegExp;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string | ((isStrict: any, localeData: any) => RegExp);\n    MM: string | ((isStrict: any, localeData: any) => RegExp);\n    MMM: (isStrict: any, locale: interface_4297) => string | string[] | RegExp | interface_4088;\n    MMMM: (isStrict: any, locale: interface_4298) => string | string[] | RegExp | interface_4083;\n    Q: (isStrict: any, localeData: any) => RegExp;\n    S: (isStrict: any, localeData: any) => RegExp;\n    SS: (isStrict: any, localeData: any) => RegExp;\n    SSS: (isStrict: any, localeData: any) => RegExp;\n    SSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    W: (isStrict: any, localeData: any) => RegExp;\n    WW: (isStrict: any, localeData: any) => RegExp;\n    X: (isStrict: any, localeData: any) => RegExp;\n    Y: (isStrict: any, localeData: any) => RegExp;\n    YY: (isStrict: any, localeData: any) => RegExp;\n    YYYY: (isStrict: any, localeData: any) => RegExp;\n    YYYYY: (isStrict: any, localeData: any) => RegExp;\n    YYYYYY: (isStrict: any, localeData: any) => RegExp;\n    Z: (isStrict: any, localeData: any) => RegExp;\n    ZZ: (isStrict: any, localeData: any) => RegExp;\n    _days: any;\n    _locale: any;\n    _milliseconds: any;\n    _months: any;\n    _monthsRegex: RegExp;\n    _monthsShortRegex: RegExp;\n    _weekdaysMinRegex: RegExp;\n    _weekdaysRegex: RegExp;\n    _weekdaysShortRegex: RegExp;\n    a: (isStrict: any, locale: interface_4295) => string | string[] | RegExp | interface_4081;\n    abbr: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: ((isStrict: any, localeData: any) => RegExp) | string;\n    dd: string | ((isStrict: any, locale: interface_4300) => string | string[] | RegExp | interface_4090);\n    ddd: (isStrict: any, locale: interface_4301) => string | string[] | RegExp | interface_4096;\n    dddd: (isStrict: any, locale: interface_4302) => string | string[] | RegExp | interface_4070;\n    dow: number;\n    doy: number;\n    e: (isStrict: any, localeData: any) => RegExp;\n    empty: boolean;\n    from: moment | string | RegExp | string[] | interface_4303;\n    future: string;\n    g: (isStrict: any, localeData: any) => RegExp;\n    gg: (isStrict: any, localeData: any) => RegExp;\n    gggg: (isStrict: any, localeData: any) => RegExp;\n    ggggg: (isStrict: any, localeData: any) => RegExp;\n    h: string | ((isStrict: any, localeData: any) => RegExp);\n    hh: string | ((isStrict: any, localeData: any) => RegExp);\n    hmm: (isStrict: any, localeData: any) => RegExp;\n    hmmss: (isStrict: any, localeData: any) => RegExp;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string | ((isStrict: any, localeData: any) => RegExp);\n    meridiem: any;\n    meridiemParse: RegExp;\n    milliseconds: any;\n    mm: string | ((isStrict: any, localeData: any) => RegExp);\n    months: string[];\n    monthsShort: string[];\n    ms: any;\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string | ((number: number) => string | RegExp | string[] | interface_4067);\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string | ((isStrict: any, localeData: any) => RegExp);\n    sameDay: string;\n    sameElse: string;\n    ss: (isStrict: any, localeData: any) => RegExp;\n    to: moment | string | RegExp | string[] | interface_4306;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    w: (isStrict: any, localeData: any) => RegExp;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    ww: (isStrict: any, localeData: any) => RegExp;\n    x: (isStrict: any, localeData: any) => RegExp;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4155 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4153 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4144 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: locale\ninterface interface_4290 {\n    _meridiemParse: string | string[] | RegExp | interface_4155;\n    _ordinalParse: string | string[] | RegExp | interface_4153;\n    _ordinalParseLenient: string | string[] | RegExp | interface_4144;\n    monthsRegex: (arg0: void) => string | string[] | RegExp | interface_4148;\n    monthsShortRegex: (arg0: void) => string | string[] | RegExp | interface_4131;\n    weekdaysMinRegex: (arg0: void) => string | string[] | RegExp | interface_4146;\n    weekdaysRegex: (arg0: void) => string | string[] | RegExp | interface_4150;\n    weekdaysShortRegex: (arg0: void) => string | string[] | RegExp | interface_4152;\n}\n\ninterface interface_4100 {\n    (isStrict: string, locale: interface_4290) : moment | string | RegExp | string[] | interface_4107;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: duration, input\ninterface interface_4198 {\n    (config?: {_d: Date, _i: string | number, _useUTC: any} | Duration | string, keepLocalTime?: interface_4294) : any;\n    A: (isStrict: any, locale: interface_4295) => string | string[] | RegExp | interface_4081;\n    D: (isStrict: any, localeData: any) => RegExp;\n    DD: (isStrict: any, localeData: any) => RegExp;\n    DDD: (isStrict: any, localeData: any) => RegExp;\n    DDDD: (isStrict: any, localeData: any) => RegExp;\n    Do: (isStrict: any, locale: interface_4296) => string | string[] | RegExp | interface_4094;\n    E: (isStrict: any, localeData: any) => RegExp;\n    G: (isStrict: any, localeData: any) => RegExp;\n    GG: (isStrict: any, localeData: any) => RegExp;\n    GGGG: (isStrict: any, localeData: any) => RegExp;\n    GGGGG: (isStrict: any, localeData: any) => RegExp;\n    H: (isStrict: any, localeData: any) => RegExp;\n    HH: (isStrict: any, localeData: any) => RegExp;\n    Hmm: (isStrict: any, localeData: any) => RegExp;\n    Hmmss: (isStrict: any, localeData: any) => RegExp;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string | ((isStrict: any, localeData: any) => RegExp);\n    MM: string | ((isStrict: any, localeData: any) => RegExp);\n    MMM: (isStrict: any, locale: interface_4297) => string | string[] | RegExp | interface_4088;\n    MMMM: (isStrict: any, locale: interface_4298) => string | string[] | RegExp | interface_4083;\n    Q: (isStrict: any, localeData: any) => RegExp;\n    S: (isStrict: any, localeData: any) => RegExp;\n    SS: (isStrict: any, localeData: any) => RegExp;\n    SSS: (isStrict: any, localeData: any) => RegExp;\n    SSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    SSSSSSSSS: (isStrict: any, localeData: any) => RegExp;\n    W: (isStrict: any, localeData: any) => RegExp;\n    WW: (isStrict: any, localeData: any) => RegExp;\n    X: (isStrict: any, localeData: any) => RegExp;\n    Y: (isStrict: any, localeData: any) => RegExp;\n    YY: (isStrict: any, localeData: any) => RegExp;\n    YYYY: (isStrict: any, localeData: any) => RegExp;\n    YYYYY: (isStrict: any, localeData: any) => RegExp;\n    YYYYYY: (isStrict: any, localeData: any) => RegExp;\n    Z: (isStrict: any, localeData: any) => RegExp;\n    ZZ: (isStrict: any, localeData: any) => RegExp;\n    _days: any;\n    _locale: any;\n    _milliseconds: any;\n    _months: any;\n    _monthsRegex: RegExp;\n    _monthsShortRegex: RegExp;\n    _weekdaysMinRegex: RegExp;\n    _weekdaysRegex: RegExp;\n    _weekdaysShortRegex: RegExp;\n    a: (isStrict: any, locale: interface_4295) => string | string[] | RegExp | interface_4081;\n    abbr: string;\n    calendar: interface_4299;\n    charsLeftOver: number;\n    d: ((isStrict: any, localeData: any) => RegExp) | string;\n    dd: string | ((isStrict: any, locale: interface_4300) => string | string[] | RegExp | interface_4090);\n    ddd: (isStrict: any, locale: interface_4301) => string | string[] | RegExp | interface_4096;\n    dddd: (isStrict: any, locale: interface_4302) => string | string[] | RegExp | interface_4070;\n    dow: number;\n    doy: number;\n    e: (isStrict: any, localeData: any) => RegExp;\n    empty: boolean;\n    from: RegExp | moment | string | string[] | interface_4318;\n    future: string;\n    g: (isStrict: any, localeData: any) => RegExp;\n    gg: (isStrict: any, localeData: any) => RegExp;\n    gggg: (isStrict: any, localeData: any) => RegExp;\n    ggggg: (isStrict: any, localeData: any) => RegExp;\n    h: string | ((isStrict: any, localeData: any) => RegExp);\n    hh: string | ((isStrict: any, localeData: any) => RegExp);\n    hmm: (isStrict: any, localeData: any) => RegExp;\n    hmmss: (isStrict: any, localeData: any) => RegExp;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4304;\n    m: string | ((isStrict: any, localeData: any) => RegExp);\n    meridiem: any;\n    meridiemParse: RegExp;\n    milliseconds: any;\n    mm: string | ((isStrict: any, localeData: any) => RegExp);\n    months: string[];\n    monthsShort: string[];\n    ms: any;\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string | ((number: number) => string | RegExp | string[] | interface_4067);\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4305;\n    s: string | ((isStrict: any, localeData: any) => RegExp);\n    sameDay: string;\n    sameElse: string;\n    ss: (isStrict: any, localeData: any) => RegExp;\n    to: RegExp | moment | string | string[] | interface_4319;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    w: (isStrict: any, localeData: any) => RegExp;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    ww: (isStrict: any, localeData: any) => RegExp;\n    x: (isStrict: any, localeData: any) => RegExp;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4291 {\n    _bubble: () => Duration;\n    abs: () => Duration;\n    add: (input: string | interface_4160, value: string | number) => Duration;\n    as: (units: string) => number;\n    asDays: () => number;\n    asHours: () => number;\n    asMilliseconds: () => number;\n    asMinutes: () => number;\n    asMonths: () => number;\n    asSeconds: () => number;\n    asWeeks: () => number;\n    asYears: () => number;\n    constructor: DurationConstructor;\n    days: () => number;\n    get: (units: string | number) => any;\n    hours: () => any;\n    humanize: (withSuffix: any) => any;\n    lang: () => any;\n    locale: (key: Duration | string) => string | Duration;\n    localeData: () => string | Locale;\n    milliseconds: () => any;\n    minutes: () => any;\n    months: () => any;\n    seconds: () => any;\n    subtract: (input: string | interface_4160, value: string | number) => Duration;\n    toISOString: () => string;\n    toIsoString: () => string;\n    toJSON: () => string;\n    toString: () => string;\n    valueOf: () => string | number;\n    weeks: () => number;\n    years: () => any;\n}\n\ninterface interface_4292 {\n    days: number;\n    hours: number;\n    milliseconds: number;\n    minutes: number;\n    months: number;\n    seconds: number;\n    years: number;\n}\n\n// Seen as: config\ninterface interface_4293 {\n    _d: Date;\n    _data: interface_4292;\n    _days: number;\n    _i: string | number;\n    _locale: Locale;\n    _milliseconds: number;\n    _months: number;\n    _useUTC: any;\n}\n\ninterface interface_4294 {\n    abbr: string;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n}\n\n// Seen as: locale\ninterface interface_4295 {\n    _meridiemParse: string | string[] | RegExp | interface_4155;\n}\n\ninterface interface_4081 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: locale\ninterface interface_4296 {\n    _ordinalParse: string | string[] | RegExp | interface_4153;\n    _ordinalParseLenient: string | string[] | RegExp | interface_4144;\n}\n\ninterface interface_4094 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: locale\ninterface interface_4297 {\n    monthsShortRegex: (arg0: void) => string | string[] | RegExp | interface_4131;\n}\n\ninterface interface_4088 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: locale\ninterface interface_4298 {\n    monthsRegex: (arg0: void) => string | string[] | RegExp | interface_4148;\n}\n\ninterface interface_4083 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4299 {\n    lastDay: string;\n    lastWeek: string;\n    nextDay: string;\n    nextWeek: string;\n    sameDay: string;\n    sameElse: string;\n}\n\n// Seen as: locale\ninterface interface_4300 {\n    weekdaysMinRegex: (arg0: void) => string | string[] | RegExp | interface_4146;\n}\n\ninterface interface_4090 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: locale\ninterface interface_4301 {\n    weekdaysShortRegex: (arg0: void) => string | string[] | RegExp | interface_4152;\n}\n\ninterface interface_4096 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: locale\ninterface interface_4302 {\n    weekdaysRegex: (arg0: void) => string | string[] | RegExp | interface_4150;\n}\n\ninterface interface_4070 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: input\ninterface interface_4303 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4304 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n}\n\ninterface interface_4305 {\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    future: string;\n    h: string;\n    hh: string;\n    m: string;\n    mm: string;\n    past: string;\n    s: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: input\ninterface interface_4306 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4113 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4176 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4307 {\n    lastDay: string;\n    lastWeek: string;\n    nextDay: string;\n    nextWeek: string;\n    sameDay: string;\n    sameElse: string;\n}\n\ninterface interface_4308 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n}\n\ninterface interface_4309 {\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    future: string;\n    h: string;\n    hh: string;\n    m: string;\n    mm: string;\n    past: string;\n    s: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: input\ninterface interface_4310 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4311 {\n    getTime: () => string;\n    getUTCMinutes: () => number;\n    setUTCMinutes: (arg0: void) => void;\n}\n\ninterface interface_4312 {\n    abbr: string;\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    meridiem: any;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n// Seen as: locale\ninterface interface_4313 {\n    _week: {dow: number, doy: number};\n    abbr: string;\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    isPM: (arg0: void) => any;\n    iso: boolean;\n    longDateFormat: (arg0: void) => any;\n    meridiem: any;\n    meridiemHour: (arg0: void, arg1: void) => number;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    preparse: (string: any) => any;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n// Seen as: flags\ninterface interface_4243 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _overflowDayOfYear: any;\n    _overflowWeekday: any;\n    _overflowWeeks: any;\n    abbr: string;\n    bigHour: boolean;\n    calendar: interface_4320;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    invalidWeekday: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4321;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string | ((number: number) => string | RegExp | string[] | interface_4067);\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4322;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    score: any;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n// Seen as: w\ninterface interface_4314 {\n    E: number;\n    GG: number;\n    W: number;\n    d: number;\n    e: number;\n    gg: number;\n    w: number;\n}\n\n// Seen as: input\ninterface interface_4315 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4316 {\n    abbr: string;\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    iso: boolean;\n    meridiem: any;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n// Seen as: locale\ninterface interface_4317 {\n    abbr: string;\n    charsLeftOver: number;\n    empty: boolean;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    isPM: (arg0: void) => any;\n    iso: boolean;\n    longDateFormat: (arg0: void) => any;\n    meridiem: any;\n    meridiemHour: (arg0: void, arg1: void) => number;\n    nullInput: boolean;\n    ordinal: (number: number) => string | RegExp | string[] | interface_4067;\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n}\n\n// Seen as: flags\ninterface interface_4220 {\n    (config?: Duration | {_d: Date, _i: string | number, _useUTC: any} | string, keepLocalTime?: interface_4294) : any;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _overflowDayOfYear: any;\n    _overflowWeekday: any;\n    _overflowWeeks: any;\n    abbr: string;\n    bigHour: boolean;\n    calendar: interface_4320;\n    charsLeftOver: number;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    empty: boolean;\n    future: string;\n    h: string;\n    hh: string;\n    invalidDate: string;\n    invalidFormat: boolean;\n    invalidMonth: any;\n    invalidWeekday: any;\n    iso: boolean;\n    lastDay: string;\n    lastWeek: string;\n    longDateFormat: interface_4321;\n    m: string;\n    meridiem: any;\n    meridiemParse: RegExp;\n    mm: string;\n    months: string[];\n    monthsShort: string[];\n    nextDay: string;\n    nextWeek: string;\n    nullInput: boolean;\n    ordinal: string | ((number: number) => string | RegExp | string[] | interface_4067);\n    ordinalParse: RegExp;\n    overflow: number;\n    parsedDateParts: Array<any>;\n    past: string;\n    relativeTime: interface_4322;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    score: any;\n    unusedInput: Array<any>;\n    unusedTokens: Array<any>;\n    userInvalidated: boolean;\n    week: {dow: number, doy: number};\n    weekdays: string[];\n    weekdaysMin: string[];\n    weekdaysShort: string[];\n    y: string;\n    yy: string;\n}\n\n// Seen as: array2\ninterface interface_4226 {\n    [index: number]: any;\n    length: number;\n}\n\ninterface interface_4142 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4107 {\n    (isStrict: string, locale: interface_4290) : moment | string | string[] | RegExp | interface_4113;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: input, res\ninterface interface_4318 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _nextDay: any;\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\n// Seen as: input, res\ninterface interface_4319 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n    M: string;\n    MM: string;\n    _nextDay: any;\n    add: (val: string | interface_4026, period: string | interface_4026) => moment | string | string[] | RegExp | interface_4172;\n    d: string;\n    dd: string;\n    dow: number;\n    doy: number;\n    future: string;\n    h: string;\n    hh: string;\n    lastDay: string;\n    lastWeek: string;\n    m: string;\n    mm: string;\n    nextDay: string;\n    nextWeek: string;\n    past: string;\n    s: string;\n    sameDay: string;\n    sameElse: string;\n    y: string;\n    yy: string;\n}\n\ninterface interface_4320 {\n    lastDay: string;\n    lastWeek: string;\n    nextDay: string;\n    nextWeek: string;\n    sameDay: string;\n    sameElse: string;\n}\n\ninterface interface_4321 {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n}\n\ninterface interface_4322 {\n    M: string;\n    MM: string;\n    d: string;\n    dd: string;\n    future: string;\n    h: string;\n    hh: string;\n    m: string;\n    mm: string;\n    past: string;\n    s: string;\n    y: string;\n    yy: string;\n}\n\n","newDecAvailable":false}